
Student_LabPart06_Framework.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a80  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010c0  08011c30  08011c30  00012c30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012cf0  08012cf0  000141f8  2**0
                  CONTENTS
  4 .ARM          00000008  08012cf0  08012cf0  00013cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012cf8  08012cf8  000141f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012cf8  08012cf8  00013cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012cfc  08012cfc  00013cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08012d00  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000141f8  2**0
                  CONTENTS
 10 .bss          00002124  200001f8  200001f8  000141f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000231c  2000231c  000141f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000141f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020ed9  00000000  00000000  00014228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c79  00000000  00000000  00035101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001870  00000000  00000000  00039d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012ca  00000000  00000000  0003b5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029b49  00000000  00000000  0003c8ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001df85  00000000  00000000  00066403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea314  00000000  00000000  00084388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016e69c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000082ac  00000000  00000000  0016e6e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000083  00000000  00000000  0017698c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08011c18 	.word	0x08011c18

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	08011c18 	.word	0x08011c18

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <ProcessQueryCommand>:
 * 						pCarsDatabase,
 * 						**ppCurrentWorkingList
 * Outputs:             0 on Success
 * Side Effects:        Depends on command
********************************/
int ProcessQueryCommand( QueryControl_t * pQueryControl, QueryCommand_t * pQueryCommand,  CarListNode_t * pCarsDatabase,  CarListNode_t ** ppCurrentWorkingList) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	@ 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	603b      	str	r3, [r7, #0]
    int nCarsSelected            = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
    int nCarsOnCurrentWorkingList, nCarsInDatabase;
    int ReturnValue;
    CarListNode_t * pNewCarsList = NULL;
 8001036:	2300      	movs	r3, #0
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
    CarListNode_t * pTailOfCurrentWorkingList;

	switch ( pQueryCommand->eQueryCommand ) {
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001040:	3b01      	subs	r3, #1
 8001042:	2b06      	cmp	r3, #6
 8001044:	f200 8095 	bhi.w	8001172 <ProcessQueryCommand+0x14e>
 8001048:	a201      	add	r2, pc, #4	@ (adr r2, 8001050 <ProcessQueryCommand+0x2c>)
 800104a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104e:	bf00      	nop
 8001050:	0800106d 	.word	0x0800106d
 8001054:	080010b1 	.word	0x080010b1
 8001058:	080010db 	.word	0x080010db
 800105c:	0800110b 	.word	0x0800110b
 8001060:	08001133 	.word	0x08001133
 8001064:	08001151 	.word	0x08001151
 8001068:	08001163 	.word	0x08001163
	case qc_Select :
		//  This case has to handle two possibilities.
		//  1)  There is already a current working list
		//  2)  There is no current working list
		if(*ppCurrentWorkingList == NULL) {
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d10b      	bne.n	800108c <ProcessQueryCommand+0x68>
			pNewCarsList = SelectFromCarDatabase(pQueryCommand, pCarsDatabase, &nCarsSelected);
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	461a      	mov	r2, r3
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	68b8      	ldr	r0, [r7, #8]
 800107e:	f000 f889 	bl	8001194 <SelectFromCarDatabase>
 8001082:	6278      	str	r0, [r7, #36]	@ 0x24
			*ppCurrentWorkingList = pNewCarsList;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001088:	601a      	str	r2, [r3, #0]
		//SortCarList(*ppCurrentWorkingList, jVerbosity);
		/*******************
		*  Routine for this case needed
		*******************/

		break;
 800108a:	e075      	b.n	8001178 <ProcessQueryCommand+0x154>
			pNewCarsList = SelectFromCarDatabase(pQueryCommand, *ppCurrentWorkingList, &nCarsSelected);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f107 0214 	add.w	r2, r7, #20
 8001094:	4619      	mov	r1, r3
 8001096:	68b8      	ldr	r0, [r7, #8]
 8001098:	f000 f87c 	bl	8001194 <SelectFromCarDatabase>
 800109c:	6278      	str	r0, [r7, #36]	@ 0x24
			FreeCarListNodes(*ppCurrentWorkingList);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f88f 	bl	80011c6 <FreeCarListNodes>
			*ppCurrentWorkingList = pNewCarsList;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010ac:	601a      	str	r2, [r3, #0]
		break;
 80010ae:	e063      	b.n	8001178 <ProcessQueryCommand+0x154>
		*******************/

		  // A list built this way might have duplcates.   Use the EliminateDuplicatesInCarList() tool

		  // Eliminate any duplicates
		  ReturnValue               = EliminateDuplicatesInCarList( *ppCurrentWorkingList, pQueryControl->jVerbosity );
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80010ba:	4619      	mov	r1, r3
 80010bc:	4610      	mov	r0, r2
 80010be:	f000 fd11 	bl	8001ae4 <EliminateDuplicatesInCarList>
 80010c2:	61b8      	str	r0, [r7, #24]
		  // Sort the final list
		  ReturnValue               = SortCarList( *ppCurrentWorkingList , pQueryControl->jVerbosity );
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80010ce:	4619      	mov	r1, r3
 80010d0:	4610      	mov	r0, r2
 80010d2:	f000 f86c 	bl	80011ae <SortCarList>
 80010d6:	61b8      	str	r0, [r7, #24]
		  break;
 80010d8:	e04e      	b.n	8001178 <ProcessQueryCommand+0x154>

	case qc_Report :
		nCarsOnCurrentWorkingList = CountCarsOnList(*ppCurrentWorkingList);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f001 fcb8 	bl	8002a54 <CountCarsOnList>
 80010e4:	6238      	str	r0, [r7, #32]
		fprintf(stdout, "Pretty Printing p Current Working List, %d Cars \n", nCarsOnCurrentWorkingList);
 80010e6:	4b27      	ldr	r3, [pc, #156]	@ (8001184 <ProcessQueryCommand+0x160>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	6a3a      	ldr	r2, [r7, #32]
 80010ee:	4926      	ldr	r1, [pc, #152]	@ (8001188 <ProcessQueryCommand+0x164>)
 80010f0:	4618      	mov	r0, r3
 80010f2:	f00c f9d5 	bl	800d4a0 <fiprintf>
		PrettyPrintListOfCars(stdout, *ppCurrentWorkingList );
 80010f6:	4b23      	ldr	r3, [pc, #140]	@ (8001184 <ProcessQueryCommand+0x160>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	4610      	mov	r0, r2
 8001104:	f001 fcfa 	bl	8002afc <PrettyPrintListOfCars>
        break;
 8001108:	e036      	b.n	8001178 <ProcessQueryCommand+0x154>
                
	case qc_ReportDatabase :
		nCarsInDatabase = CountCarsOnList(pCarsDatabase);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f001 fca2 	bl	8002a54 <CountCarsOnList>
 8001110:	61f8      	str	r0, [r7, #28]
		fprintf(stdout, "Pretty Printing p Car Database, %d Cars \n", nCarsInDatabase);
 8001112:	4b1c      	ldr	r3, [pc, #112]	@ (8001184 <ProcessQueryCommand+0x160>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	69fa      	ldr	r2, [r7, #28]
 800111a:	491c      	ldr	r1, [pc, #112]	@ (800118c <ProcessQueryCommand+0x168>)
 800111c:	4618      	mov	r0, r3
 800111e:	f00c f9bf 	bl	800d4a0 <fiprintf>
		PrettyPrintListOfCars(stdout, pCarsDatabase );
 8001122:	4b18      	ldr	r3, [pc, #96]	@ (8001184 <ProcessQueryCommand+0x160>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	4618      	mov	r0, r3
 800112c:	f001 fce6 	bl	8002afc <PrettyPrintListOfCars>
		break;
 8001130:	e022      	b.n	8001178 <ProcessQueryCommand+0x154>

	case qc_Report_nCarsOnWorkingList :
		nCarsOnCurrentWorkingList = CountCarsOnList( *ppCurrentWorkingList );
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f001 fc8c 	bl	8002a54 <CountCarsOnList>
 800113c:	6238      	str	r0, [r7, #32]
		fprintf(stdout, "Current Working List has %d cars \n", nCarsOnCurrentWorkingList);
 800113e:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <ProcessQueryCommand+0x160>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	6a3a      	ldr	r2, [r7, #32]
 8001146:	4912      	ldr	r1, [pc, #72]	@ (8001190 <ProcessQueryCommand+0x16c>)
 8001148:	4618      	mov	r0, r3
 800114a:	f00c f9a9 	bl	800d4a0 <fiprintf>
		break;
 800114e:	e013      	b.n	8001178 <ProcessQueryCommand+0x154>

	case qc_Reset :
		FreeCarListNodes( *ppCurrentWorkingList );
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f000 f836 	bl	80011c6 <FreeCarListNodes>
		*ppCurrentWorkingList = NULL;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
		break;
 8001160:	e00a      	b.n	8001178 <ProcessQueryCommand+0x154>

	case  qc_Help :
		PrintHelpMessage( stdout, pQueryControl );
 8001162:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <ProcessQueryCommand+0x160>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	68f9      	ldr	r1, [r7, #12]
 800116a:	4618      	mov	r0, r3
 800116c:	f000 f878 	bl	8001260 <PrintHelpMessage>
		break;
 8001170:	e002      	b.n	8001178 <ProcessQueryCommand+0x154>

	default:
		return FAILURE;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001176:	e000      	b.n	800117a <ProcessQueryCommand+0x156>
	}

	return 0;
 8001178:	2300      	movs	r3, #0
}  // ProcessQueryCommand
 800117a:	4618      	mov	r0, r3
 800117c:	3728      	adds	r7, #40	@ 0x28
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	2000003c 	.word	0x2000003c
 8001188:	08011c30 	.word	0x08011c30
 800118c:	08011c64 	.word	0x08011c64
 8001190:	08011c90 	.word	0x08011c90

08001194 <SelectFromCarDatabase>:
 *
 * Outputs:             Pointer to new list.  
 * 
 * Side Effects:        CarListNodes are malloced as needed,  Populated and connected into a list. 
********************************/
CarListNode_t * SelectFromCarDatabase( QueryCommand_t * pQueryCommand, CarListNode_t * pListOfCars, int *pnCarsSelected ) {
 8001194:	b480      	push	{r7}
 8001196:	b087      	sub	sp, #28
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  CarListNode_t * pSelectedCarsList;

  return pSelectedCarsList;
 80011a0:	697b      	ldr	r3, [r7, #20]
}  //  SelectFromCarDatabase
 80011a2:	4618      	mov	r0, r3
 80011a4:	371c      	adds	r7, #28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <SortCarList>:
 *
 * Inputs:              pCarList
 * Outputs:             0 for success
 * Side Effects:        The list is re-ordered.
********************************/
int SortCarList( CarListNode_t * pCarList, int jVerbosity ) {
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	6039      	str	r1, [r7, #0]

  return SUCCESS;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <FreeCarListNodes>:
 *  FreeCarListNodes   Free the nodes on a List
 * Inputs:              Pointer to a list of cars
 * Outputs:             Count of Car List Nodes Freed
 * Side Effects:        Frees Nodes from the list   (the data records are not affected)
********************************/
int FreeCarListNodes( CarListNode_t * pListOfCars ) {
 80011c6:	b480      	push	{r7}
 80011c8:	b085      	sub	sp, #20
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  int nCarsOnList = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]

  return nCarsOnList;
 80011d2:	68fb      	ldr	r3, [r7, #12]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <InitCarRecordsAndModels>:
 *  InitCarRecordsAndModels
 * Inputs:              none
 * Outputs:             none
 * Side Effects:        Zero the data storage space for the CarRecords and Models
********************************/
void InitCarRecordsAndModels( void ) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	memset( &CarRecords[0], 0, sizeof( CarRecords) );
 80011e4:	f44f 624a 	mov.w	r2, #3232	@ 0xca0
 80011e8:	2100      	movs	r1, #0
 80011ea:	4805      	ldr	r0, [pc, #20]	@ (8001200 <InitCarRecordsAndModels+0x20>)
 80011ec:	f00c ff40 	bl	800e070 <memset>
	memset( &ModelRecords[0], 0, sizeof( ModelRecords) );
 80011f0:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80011f4:	2100      	movs	r1, #0
 80011f6:	4803      	ldr	r0, [pc, #12]	@ (8001204 <InitCarRecordsAndModels+0x24>)
 80011f8:	f00c ff3a 	bl	800e070 <memset>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000214 	.word	0x20000214
 8001204:	20000eb4 	.word	0x20000eb4

08001208 <Get_pCarRecords>:
 *  Get_pCarRecords
 * Inputs:              none
 * Outputs: 			Return a pointer to the Car Records
 * Side Effects:        none
********************************/
CarRecord_t * Get_pCarRecords( void ){
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
	return CarRecords;
 800120c:	4b02      	ldr	r3, [pc, #8]	@ (8001218 <Get_pCarRecords+0x10>)
}
 800120e:	4618      	mov	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	20000214 	.word	0x20000214

0800121c <PrintStringsFromAList>:
 *  PrintStringsFromAList,  Prints Strings on a line
 * Inputs:              none
 * Outputs:             none
 * Side Effects:        none
 * *******************/
void PrintStringsFromAList( FILE * pFile, char * sStrings[], int nStrings ) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
	int jString;
	for (jString=0; jString < nStrings; jString++) {
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	e00c      	b.n	8001248 <PrintStringsFromAList+0x2c>
		fprintf(pFile, "%-13s, ", sStrings[ jString ]);
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	4413      	add	r3, r2
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	4908      	ldr	r1, [pc, #32]	@ (800125c <PrintStringsFromAList+0x40>)
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f00c f92f 	bl	800d4a0 <fiprintf>
	for (jString=0; jString < nStrings; jString++) {
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	3301      	adds	r3, #1
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	429a      	cmp	r2, r3
 800124e:	dbee      	blt.n	800122e <PrintStringsFromAList+0x12>
	}
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	08011cb4 	.word	0x08011cb4

08001260 <PrintHelpMessage>:
 *  PrintHelpMessage,  Print a message about input options
 * Inputs:              none
 * Outputs:             none
 * Side Effects:        none
********************************/
void PrintHelpMessage( FILE * pFile,  QueryControl_t * pQueryControl ) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
	fprintf(pFile, "\n=================================================\n");
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2233      	movs	r2, #51	@ 0x33
 800126e:	2101      	movs	r1, #1
 8001270:	4830      	ldr	r0, [pc, #192]	@ (8001334 <PrintHelpMessage+0xd4>)
 8001272:	f00c f9d1 	bl	800d618 <fwrite>
	fprintf(pFile, "Lab Part 06 Help Message, the Input Options are: \n ---------\n");
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	223d      	movs	r2, #61	@ 0x3d
 800127a:	2101      	movs	r1, #1
 800127c:	482e      	ldr	r0, [pc, #184]	@ (8001338 <PrintHelpMessage+0xd8>)
 800127e:	f00c f9cb 	bl	800d618 <fwrite>

	fprintf(pFile, "       Commands:  ");
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2212      	movs	r2, #18
 8001286:	2101      	movs	r1, #1
 8001288:	482c      	ldr	r0, [pc, #176]	@ (800133c <PrintHelpMessage+0xdc>)
 800128a:	f00c f9c5 	bl	800d618 <fwrite>
	PrintStringsFromAList(pFile, pQueryControl->sQueryCommands, pQueryControl->nQueryCommands);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800129a:	461a      	mov	r2, r3
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ffbd 	bl	800121c <PrintStringsFromAList>
	fprintf(pFile, "\n");
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	200a      	movs	r0, #10
 80012a6:	f00c f931 	bl	800d50c <fputc>

	fprintf(pFile, "Category labels:  ");
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2212      	movs	r2, #18
 80012ae:	2101      	movs	r1, #1
 80012b0:	4823      	ldr	r0, [pc, #140]	@ (8001340 <PrintHelpMessage+0xe0>)
 80012b2:	f00c f9b1 	bl	800d618 <fwrite>
	PrintStringsFromAList(pFile, pQueryControl->sCategoryLabels, pQueryControl->nCategoryLabels);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80012c2:	461a      	mov	r2, r3
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ffa9 	bl	800121c <PrintStringsFromAList>
	fprintf(pFile, "\n");
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	200a      	movs	r0, #10
 80012ce:	f00c f91d 	bl	800d50c <fputc>

	fprintf(pFile, "     Make names:  ");
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2212      	movs	r2, #18
 80012d6:	2101      	movs	r1, #1
 80012d8:	481a      	ldr	r0, [pc, #104]	@ (8001344 <PrintHelpMessage+0xe4>)
 80012da:	f00c f99d 	bl	800d618 <fwrite>
	PrintStringsFromAList(pFile, pQueryControl->sMakeNames, pQueryControl->nMakeNames);
 80012de:	6839      	ldr	r1, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80012e6:	461a      	mov	r2, r3
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff97 	bl	800121c <PrintStringsFromAList>
	fprintf(pFile, "\n");
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	200a      	movs	r0, #10
 80012f2:	f00c f90b 	bl	800d50c <fputc>

	fprintf(pFile, "    Model names:  ");
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2212      	movs	r2, #18
 80012fa:	2101      	movs	r1, #1
 80012fc:	4812      	ldr	r0, [pc, #72]	@ (8001348 <PrintHelpMessage+0xe8>)
 80012fe:	f00c f98b 	bl	800d618 <fwrite>
	PrintStringsFromAList(pFile, pQueryControl->sModelNames, pQueryControl->nModelNames);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	f103 0118 	add.w	r1, r3, #24
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800130e:	461a      	mov	r2, r3
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff83 	bl	800121c <PrintStringsFromAList>
	fprintf(pFile, "\n");
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	200a      	movs	r0, #10
 800131a:	f00c f8f7 	bl	800d50c <fputc>
	fprintf(pFile, "=================================================\n\n");
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2233      	movs	r2, #51	@ 0x33
 8001322:	2101      	movs	r1, #1
 8001324:	4809      	ldr	r0, [pc, #36]	@ (800134c <PrintHelpMessage+0xec>)
 8001326:	f00c f977 	bl	800d618 <fwrite>

}  // PrintHelpMessage
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	08011cbc 	.word	0x08011cbc
 8001338:	08011cf0 	.word	0x08011cf0
 800133c:	08011d30 	.word	0x08011d30
 8001340:	08011d44 	.word	0x08011d44
 8001344:	08011d58 	.word	0x08011d58
 8001348:	08011d6c 	.word	0x08011d6c
 800134c:	08011d80 	.word	0x08011d80

08001350 <CharacterToPrintableString>:
 *  								translates \n to "\n", etc.
 * Inputs:              none
 * Outputs:             none
 * Side Effects:        none
********************************/
int CharacterToPrintableString(char AChar, char sString[]) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]

	// In the interest of speed
	if ( isprint( AChar) ) {
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	3301      	adds	r3, #1
 8001360:	4a24      	ldr	r2, [pc, #144]	@ (80013f4 <CharacterToPrintableString+0xa4>)
 8001362:	4413      	add	r3, r2
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	f003 0397 	and.w	r3, r3, #151	@ 0x97
 800136a:	2b00      	cmp	r3, #0
 800136c:	d007      	beq.n	800137e <CharacterToPrintableString+0x2e>
	  sprintf(sString, "%c", AChar);
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	461a      	mov	r2, r3
 8001372:	4921      	ldr	r1, [pc, #132]	@ (80013f8 <CharacterToPrintableString+0xa8>)
 8001374:	6838      	ldr	r0, [r7, #0]
 8001376:	f00c fb29 	bl	800d9cc <siprintf>
	  return 0;
 800137a:	2300      	movs	r3, #0
 800137c:	e036      	b.n	80013ec <CharacterToPrintableString+0x9c>
	}

	if (AChar == '\a')
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	2b07      	cmp	r3, #7
 8001382:	d102      	bne.n	800138a <CharacterToPrintableString+0x3a>
		sString = "\a";
 8001384:	4b1d      	ldr	r3, [pc, #116]	@ (80013fc <CharacterToPrintableString+0xac>)
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	e02f      	b.n	80013ea <CharacterToPrintableString+0x9a>
	else if (AChar == '\b')
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	2b08      	cmp	r3, #8
 800138e:	d102      	bne.n	8001396 <CharacterToPrintableString+0x46>
		sString = "\b";
 8001390:	4b1b      	ldr	r3, [pc, #108]	@ (8001400 <CharacterToPrintableString+0xb0>)
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	e029      	b.n	80013ea <CharacterToPrintableString+0x9a>
	else if (AChar == '\t')
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	2b09      	cmp	r3, #9
 800139a:	d102      	bne.n	80013a2 <CharacterToPrintableString+0x52>
		sString = "\t";
 800139c:	4b19      	ldr	r3, [pc, #100]	@ (8001404 <CharacterToPrintableString+0xb4>)
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	e023      	b.n	80013ea <CharacterToPrintableString+0x9a>
	else if (AChar == '\n')
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2b0a      	cmp	r3, #10
 80013a6:	d102      	bne.n	80013ae <CharacterToPrintableString+0x5e>
		sString = "\n";
 80013a8:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <CharacterToPrintableString+0xb8>)
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	e01d      	b.n	80013ea <CharacterToPrintableString+0x9a>
	else if (AChar == '\v')
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	2b0b      	cmp	r3, #11
 80013b2:	d102      	bne.n	80013ba <CharacterToPrintableString+0x6a>
		sString = "\v";
 80013b4:	4b15      	ldr	r3, [pc, #84]	@ (800140c <CharacterToPrintableString+0xbc>)
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	e017      	b.n	80013ea <CharacterToPrintableString+0x9a>
	else if (AChar == '\f')
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2b0c      	cmp	r3, #12
 80013be:	d102      	bne.n	80013c6 <CharacterToPrintableString+0x76>
		sString = "\f";
 80013c0:	4b13      	ldr	r3, [pc, #76]	@ (8001410 <CharacterToPrintableString+0xc0>)
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	e011      	b.n	80013ea <CharacterToPrintableString+0x9a>
	else if (AChar == '\r')
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	2b0d      	cmp	r3, #13
 80013ca:	d102      	bne.n	80013d2 <CharacterToPrintableString+0x82>
		sString = "\r";
 80013cc:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <CharacterToPrintableString+0xc4>)
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	e00b      	b.n	80013ea <CharacterToPrintableString+0x9a>
	else if (AChar == '\e')
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b1b      	cmp	r3, #27
 80013d6:	d102      	bne.n	80013de <CharacterToPrintableString+0x8e>
		sString = "\e";
 80013d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <CharacterToPrintableString+0xc8>)
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	e005      	b.n	80013ea <CharacterToPrintableString+0x9a>
	else sprintf(sString, "%2x", AChar);
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	461a      	mov	r2, r3
 80013e2:	490e      	ldr	r1, [pc, #56]	@ (800141c <CharacterToPrintableString+0xcc>)
 80013e4:	6838      	ldr	r0, [r7, #0]
 80013e6:	f00c faf1 	bl	800d9cc <siprintf>
	return 0;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	080128a8 	.word	0x080128a8
 80013f8:	08011db4 	.word	0x08011db4
 80013fc:	08011db8 	.word	0x08011db8
 8001400:	08011dbc 	.word	0x08011dbc
 8001404:	08011dc0 	.word	0x08011dc0
 8001408:	08011dc4 	.word	0x08011dc4
 800140c:	08011dc8 	.word	0x08011dc8
 8001410:	08011dcc 	.word	0x08011dcc
 8001414:	08011dd0 	.word	0x08011dd0
 8001418:	08011dd4 	.word	0x08011dd4
 800141c:	08011dd8 	.word	0x08011dd8

08001420 <SuppressCharactersOffEndOfString>:
 *  SuppressCharactersOffEndOfString,   remove indicated characters from the end of a string
 * Inputs:              Starting String,   List of Characters to remove
 * Outputs:             Count of characters removed
 * Side Effects:        May set final characters to \0
********************************/
int SuppressCharactersOffEndOfString( char sString[], char sCharactersToSuppress[], bool bVerboseReporting ) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	@ 0x30
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	4613      	mov	r3, r2
 800142c:	71fb      	strb	r3, [r7, #7]
	int    nStringCharacters, nCharactersToSuppress;
	int    jCharacterToSuppress;
	bool   bKeepGoing, bHaveSuppressedACharacter;
	int	   nCharactersSuppressed = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
	char   sStringToPrint[6];

	nCharactersToSuppress = strlen( sCharactersToSuppress );
 8001432:	68b8      	ldr	r0, [r7, #8]
 8001434:	f7fe ff3c 	bl	80002b0 <strlen>
 8001438:	4603      	mov	r3, r0
 800143a:	623b      	str	r3, [r7, #32]

	bKeepGoing = true;
 800143c:	2301      	movs	r3, #1
 800143e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	while ( bKeepGoing ) {
 8001442:	e045      	b.n	80014d0 <SuppressCharactersOffEndOfString+0xb0>
		nStringCharacters     = strlen( sString );
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f7fe ff33 	bl	80002b0 <strlen>
 800144a:	4603      	mov	r3, r0
 800144c:	61fb      	str	r3, [r7, #28]
		bHaveSuppressedACharacter = false;
 800144e:	2300      	movs	r3, #0
 8001450:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
		for (jCharacterToSuppress = 0; jCharacterToSuppress < nCharactersToSuppress; jCharacterToSuppress++) {
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001458:	e02c      	b.n	80014b4 <SuppressCharactersOffEndOfString+0x94>
			if ( sString[ nStringCharacters - 1] == sCharactersToSuppress[ jCharacterToSuppress ]) {
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3b01      	subs	r3, #1
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	4413      	add	r3, r2
 8001462:	781a      	ldrb	r2, [r3, #0]
 8001464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001466:	68b9      	ldr	r1, [r7, #8]
 8001468:	440b      	add	r3, r1
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	429a      	cmp	r2, r3
 800146e:	d11e      	bne.n	80014ae <SuppressCharactersOffEndOfString+0x8e>
				sString[ nStringCharacters - 1] = '\0';
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	3b01      	subs	r3, #1
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	4413      	add	r3, r2
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
				bHaveSuppressedACharacter = true;
 800147c:	2301      	movs	r3, #1
 800147e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				if ( bVerboseReporting ) {
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d012      	beq.n	80014ae <SuppressCharactersOffEndOfString+0x8e>
					CharacterToPrintableString( sCharactersToSuppress[ jCharacterToSuppress ], sStringToPrint);
 8001488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	4413      	add	r3, r2
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	f107 0214 	add.w	r2, r7, #20
 8001494:	4611      	mov	r1, r2
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff ff5a 	bl	8001350 <CharacterToPrintableString>
					fprintf(stdout, "  SuppressCharactersOffEndOfString: Suppressed '%s' off %s \n", sStringToPrint, sString);
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <SuppressCharactersOffEndOfString+0xc4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6898      	ldr	r0, [r3, #8]
 80014a2:	f107 0214 	add.w	r2, r7, #20
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	490f      	ldr	r1, [pc, #60]	@ (80014e8 <SuppressCharactersOffEndOfString+0xc8>)
 80014aa:	f00b fff9 	bl	800d4a0 <fiprintf>
		for (jCharacterToSuppress = 0; jCharacterToSuppress < nCharactersToSuppress; jCharacterToSuppress++) {
 80014ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b0:	3301      	adds	r3, #1
 80014b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	dbce      	blt.n	800145a <SuppressCharactersOffEndOfString+0x3a>
				}
			}
		}  //  for
		if ( bHaveSuppressedACharacter == false )
 80014bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80014c0:	f083 0301 	eor.w	r3, r3, #1
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d002      	beq.n	80014d0 <SuppressCharactersOffEndOfString+0xb0>
			bKeepGoing = false;  //  Stop
 80014ca:	2300      	movs	r3, #0
 80014cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	while ( bKeepGoing ) {
 80014d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1b5      	bne.n	8001444 <SuppressCharactersOffEndOfString+0x24>
	}

	return nCharactersSuppressed;
 80014d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}  // SuppressCharactersOffEndOfString
 80014da:	4618      	mov	r0, r3
 80014dc:	3730      	adds	r7, #48	@ 0x30
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2000003c 	.word	0x2000003c
 80014e8:	08011ddc 	.word	0x08011ddc

080014ec <GobbleCharactersFromBeginningOfStream>:
 *  GobbleCharactersFromBeginningOfStream,   remove indicated characters from the beginning of a steam
 * Inputs:              Starting String,   List of Characters to remove
 * Outputs:             Count of characters removed
 * Side Effects:        May set final characters to \0
********************************/
int GobbleCharactersFromBeginningOfStream( FILE *pStream, char sCharactersToGobble[], bool bVerboseReporting ) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	@ 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	4613      	mov	r3, r2
 80014f8:	71fb      	strb	r3, [r7, #7]
	int    nCharactersToGobble;
	int    jCharacterToGobble;
	bool   bKeepGoing, bHaveGobbleedACharacter;
	int	   nCharactersGobbleed = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
	int	   ACharacter;

	nCharactersToGobble = strlen( sCharactersToGobble );
 80014fe:	68b8      	ldr	r0, [r7, #8]
 8001500:	f7fe fed6 	bl	80002b0 <strlen>
 8001504:	4603      	mov	r3, r0
 8001506:	61bb      	str	r3, [r7, #24]

	bKeepGoing = true;
 8001508:	2301      	movs	r3, #1
 800150a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	while ( bKeepGoing ) {
 800150e:	e074      	b.n	80015fa <GobbleCharactersFromBeginningOfStream+0x10e>
		bHaveGobbleedACharacter = false;
 8001510:	2300      	movs	r3, #0
 8001512:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		ACharacter = getc( pStream );
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f00c f88c 	bl	800d634 <getc>
 800151c:	6178      	str	r0, [r7, #20]

		if ( bVerboseReporting ) {
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d01f      	beq.n	8001564 <GobbleCharactersFromBeginningOfStream+0x78>
			fprintf(stdout, "    GobbleCharactersFromBeginningOfStream:  getc AChar got: x%02x", ACharacter);
 8001524:	4b39      	ldr	r3, [pc, #228]	@ (800160c <GobbleCharactersFromBeginningOfStream+0x120>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	4938      	ldr	r1, [pc, #224]	@ (8001610 <GobbleCharactersFromBeginningOfStream+0x124>)
 800152e:	4618      	mov	r0, r3
 8001530:	f00b ffb6 	bl	800d4a0 <fiprintf>
			if ( isprint(ACharacter) )  //  If character is printable, show it
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3301      	adds	r3, #1
 8001538:	4a36      	ldr	r2, [pc, #216]	@ (8001614 <GobbleCharactersFromBeginningOfStream+0x128>)
 800153a:	4413      	add	r3, r2
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	f003 0397 	and.w	r3, r3, #151	@ 0x97
 8001542:	2b00      	cmp	r3, #0
 8001544:	d007      	beq.n	8001556 <GobbleCharactersFromBeginningOfStream+0x6a>
				fprintf(stdout, " >%c< ", ACharacter);
 8001546:	4b31      	ldr	r3, [pc, #196]	@ (800160c <GobbleCharactersFromBeginningOfStream+0x120>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	4932      	ldr	r1, [pc, #200]	@ (8001618 <GobbleCharactersFromBeginningOfStream+0x12c>)
 8001550:	4618      	mov	r0, r3
 8001552:	f00b ffa5 	bl	800d4a0 <fiprintf>
			fprintf(stdout, "\n");
 8001556:	4b2d      	ldr	r3, [pc, #180]	@ (800160c <GobbleCharactersFromBeginningOfStream+0x120>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	4619      	mov	r1, r3
 800155e:	200a      	movs	r0, #10
 8001560:	f00b ffd4 	bl	800d50c <fputc>
		}

		for (jCharacterToGobble = 0; jCharacterToGobble < nCharactersToGobble; jCharacterToGobble++) {
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	@ 0x24
 8001568:	e00e      	b.n	8001588 <GobbleCharactersFromBeginningOfStream+0x9c>
			if ( ACharacter == sCharactersToGobble[jCharacterToGobble] ) {
 800156a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156c:	68ba      	ldr	r2, [r7, #8]
 800156e:	4413      	add	r3, r2
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	461a      	mov	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	4293      	cmp	r3, r2
 8001578:	d103      	bne.n	8001582 <GobbleCharactersFromBeginningOfStream+0x96>
				//  We'll gobble
				bHaveGobbleedACharacter = true;
 800157a:	2301      	movs	r3, #1
 800157c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
				break; // Don't need to examine other characters
 8001580:	e006      	b.n	8001590 <GobbleCharactersFromBeginningOfStream+0xa4>
		for (jCharacterToGobble = 0; jCharacterToGobble < nCharactersToGobble; jCharacterToGobble++) {
 8001582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001584:	3301      	adds	r3, #1
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
 8001588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	429a      	cmp	r2, r3
 800158e:	dbec      	blt.n	800156a <GobbleCharactersFromBeginningOfStream+0x7e>
			}  //  if
		}      //  for

		if ( bHaveGobbleedACharacter == false )  {
 8001590:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001594:	f083 0301 	eor.w	r3, r3, #1
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d02a      	beq.n	80015f4 <GobbleCharactersFromBeginningOfStream+0x108>
			ungetc( ACharacter, pStream );   //  Put character back
 800159e:	68f9      	ldr	r1, [r7, #12]
 80015a0:	6978      	ldr	r0, [r7, #20]
 80015a2:	f00c fb2f 	bl	800dc04 <ungetc>
			bKeepGoing = false;  			 //  Stop
 80015a6:	2300      	movs	r3, #0
 80015a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			if ( bVerboseReporting ) {
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d023      	beq.n	80015fa <GobbleCharactersFromBeginningOfStream+0x10e>
				fprintf(stdout, "    GobbleCharactersFromBeginningOfStream:  ungetc: x%02x ", ACharacter);
 80015b2:	4b16      	ldr	r3, [pc, #88]	@ (800160c <GobbleCharactersFromBeginningOfStream+0x120>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	4918      	ldr	r1, [pc, #96]	@ (800161c <GobbleCharactersFromBeginningOfStream+0x130>)
 80015bc:	4618      	mov	r0, r3
 80015be:	f00b ff6f 	bl	800d4a0 <fiprintf>
				if ( isprint(ACharacter) )  //  If character is printable, show it
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	3301      	adds	r3, #1
 80015c6:	4a13      	ldr	r2, [pc, #76]	@ (8001614 <GobbleCharactersFromBeginningOfStream+0x128>)
 80015c8:	4413      	add	r3, r2
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	f003 0397 	and.w	r3, r3, #151	@ 0x97
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d007      	beq.n	80015e4 <GobbleCharactersFromBeginningOfStream+0xf8>
					fprintf(stdout, " >%c< ", ACharacter);
 80015d4:	4b0d      	ldr	r3, [pc, #52]	@ (800160c <GobbleCharactersFromBeginningOfStream+0x120>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	490e      	ldr	r1, [pc, #56]	@ (8001618 <GobbleCharactersFromBeginningOfStream+0x12c>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f00b ff5e 	bl	800d4a0 <fiprintf>
				fprintf(stdout, "\n");
 80015e4:	4b09      	ldr	r3, [pc, #36]	@ (800160c <GobbleCharactersFromBeginningOfStream+0x120>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	4619      	mov	r1, r3
 80015ec:	200a      	movs	r0, #10
 80015ee:	f00b ff8d 	bl	800d50c <fputc>
 80015f2:	e002      	b.n	80015fa <GobbleCharactersFromBeginningOfStream+0x10e>
			}
		} else {
			nCharactersGobbleed++;
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	3301      	adds	r3, #1
 80015f8:	61fb      	str	r3, [r7, #28]
	while ( bKeepGoing ) {
 80015fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d186      	bne.n	8001510 <GobbleCharactersFromBeginningOfStream+0x24>
		}
	}   //  while

	return nCharactersGobbleed;
 8001602:	69fb      	ldr	r3, [r7, #28]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3728      	adds	r7, #40	@ 0x28
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2000003c 	.word	0x2000003c
 8001610:	08011e1c 	.word	0x08011e1c
 8001614:	080128a8 	.word	0x080128a8
 8001618:	08011e60 	.word	0x08011e60
 800161c:	08011e68 	.word	0x08011e68

08001620 <ParseStringPopulateCarRecord>:
 *
 * Inputs:              String, pointer to car record
 * Outputs:             0 for Success
 * Side Effects:        Populates the car record
********************************/
int ParseStringPopulateCarRecord( CarRecord_t *pCarRecord, char *sInputString, int jVerbosity) {
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b0f3      	sub	sp, #460	@ 0x1cc
 8001624:	af02      	add	r7, sp, #8
 8001626:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800162a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800162e:	6018      	str	r0, [r3, #0]
 8001630:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001634:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001638:	6019      	str	r1, [r3, #0]
 800163a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800163e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001642:	601a      	str	r2, [r3, #0]
	int     nCharacters;
	int 	nCharactersToMalloc;
	float   FieldValue;
	int     jFieldValue;
	int 	jField;
	int     nFields = 6;  //  There are 6 fields in a car record, including the index
 8001644:	2306      	movs	r3, #6
 8001646:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
	int		ReturnValue;

	if (jVerbosity >= 10) fprintf(stdout, "ParseStringPopulateCarRecord: Entering\n%s\n", sInputString);
 800164a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800164e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b09      	cmp	r3, #9
 8001656:	dd0a      	ble.n	800166e <ParseStringPopulateCarRecord+0x4e>
 8001658:	4bc6      	ldr	r3, [pc, #792]	@ (8001974 <ParseStringPopulateCarRecord+0x354>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6898      	ldr	r0, [r3, #8]
 800165e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001662:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	49c3      	ldr	r1, [pc, #780]	@ (8001978 <ParseStringPopulateCarRecord+0x358>)
 800166a:	f00b ff19 	bl	800d4a0 <fiprintf>

	nCharacters = strlen( sInputString );
 800166e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001672:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001676:	6818      	ldr	r0, [r3, #0]
 8001678:	f7fe fe1a 	bl	80002b0 <strlen>
 800167c:	4603      	mov	r3, r0
 800167e:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
	pMemFile    = fmemopen( sInputString, nCharacters, "r" );
 8001682:	f8d7 11b4 	ldr.w	r1, [r7, #436]	@ 0x1b4
 8001686:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800168a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800168e:	4abb      	ldr	r2, [pc, #748]	@ (800197c <ParseStringPopulateCarRecord+0x35c>)
 8001690:	6818      	ldr	r0, [r3, #0]
 8001692:	f00c fce3 	bl	800e05c <fmemopen>
 8001696:	f8c7 01b0 	str.w	r0, [r7, #432]	@ 0x1b0

	// Scan, allocate space for, and copy the Car Make
	ReturnValue = fscanf( pMemFile, "%s", sMakeModelName);
 800169a:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 800169e:	461a      	mov	r2, r3
 80016a0:	49b7      	ldr	r1, [pc, #732]	@ (8001980 <ParseStringPopulateCarRecord+0x360>)
 80016a2:	f8d7 01b0 	ldr.w	r0, [r7, #432]	@ 0x1b0
 80016a6:	f00b ff39 	bl	800d51c <fiscanf>
 80016aa:	f8c7 01ac 	str.w	r0, [r7, #428]	@ 0x1ac
	// If we got an empty line, it marks that we are done.
	if (ReturnValue == EOF) {
 80016ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80016b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016b6:	d106      	bne.n	80016c6 <ParseStringPopulateCarRecord+0xa6>
		fclose( pMemFile );
 80016b8:	f8d7 01b0 	ldr.w	r0, [r7, #432]	@ 0x1b0
 80016bc:	f00b fc8c 	bl	800cfd8 <fclose>
		return EOF;
 80016c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016c4:	e1cc      	b.n	8001a60 <ParseStringPopulateCarRecord+0x440>
	}
	nCharactersToMalloc = strlen(sMakeModelName) + 1;
 80016c6:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe fdf0 	bl	80002b0 <strlen>
 80016d0:	4603      	mov	r3, r0
 80016d2:	3301      	adds	r3, #1
 80016d4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
	pCarRecord->sMake = malloc( nCharactersToMalloc );
 80016d8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80016dc:	4618      	mov	r0, r3
 80016de:	f00a fcfb 	bl	800c0d8 <malloc>
 80016e2:	4603      	mov	r3, r0
 80016e4:	461a      	mov	r2, r3
 80016e6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80016ea:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	601a      	str	r2, [r3, #0]
	strcpy( pCarRecord->sMake, sMakeModelName );
 80016f2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80016f6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f507 72ce 	add.w	r2, r7, #412	@ 0x19c
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f00c fd5d 	bl	800e1c4 <strcpy>

	// Scan, allocate space for, and copy the Car Model
	fscanf( pMemFile, "%s", sMakeModelName);
 800170a:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 800170e:	461a      	mov	r2, r3
 8001710:	499b      	ldr	r1, [pc, #620]	@ (8001980 <ParseStringPopulateCarRecord+0x360>)
 8001712:	f8d7 01b0 	ldr.w	r0, [r7, #432]	@ 0x1b0
 8001716:	f00b ff01 	bl	800d51c <fiscanf>
	// Deal with possible ','
	SuppressCharactersOffEndOfString(sMakeModelName,  ", ", jVerbosity>=jVerbosity_For_SuppressCharacters);
 800171a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800171e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b18      	cmp	r3, #24
 8001726:	bfcc      	ite	gt
 8001728:	2301      	movgt	r3, #1
 800172a:	2300      	movle	r3, #0
 800172c:	b2da      	uxtb	r2, r3
 800172e:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 8001732:	4994      	ldr	r1, [pc, #592]	@ (8001984 <ParseStringPopulateCarRecord+0x364>)
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fe73 	bl	8001420 <SuppressCharactersOffEndOfString>

	nCharactersToMalloc = strlen(sMakeModelName) + 1;
 800173a:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe fdb6 	bl	80002b0 <strlen>
 8001744:	4603      	mov	r3, r0
 8001746:	3301      	adds	r3, #1
 8001748:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
	pCarRecord->sModel = malloc( nCharactersToMalloc );
 800174c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001750:	4618      	mov	r0, r3
 8001752:	f00a fcc1 	bl	800c0d8 <malloc>
 8001756:	4603      	mov	r3, r0
 8001758:	461a      	mov	r2, r3
 800175a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800175e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
	strcpy( pCarRecord->sModel, sMakeModelName );
 8001766:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800176a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f507 72ce 	add.w	r2, r7, #412	@ 0x19c
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f00c fd23 	bl	800e1c4 <strcpy>

	// Now process fields
	for (jField=0; jField < nFields; jField++){
 800177e:	2300      	movs	r3, #0
 8001780:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001784:	e160      	b.n	8001a48 <ParseStringPopulateCarRecord+0x428>
		// Optionally gobble white space and commas.
		GobbleCharactersFromBeginningOfStream(pMemFile, "\t\r\n ,", jVerbosity>=jVerbosity_For_GobbleCharacters);
 8001786:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800178a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b16      	cmp	r3, #22
 8001792:	bfcc      	ite	gt
 8001794:	2301      	movgt	r3, #1
 8001796:	2300      	movle	r3, #0
 8001798:	b2db      	uxtb	r3, r3
 800179a:	461a      	mov	r2, r3
 800179c:	497a      	ldr	r1, [pc, #488]	@ (8001988 <ParseStringPopulateCarRecord+0x368>)
 800179e:	f8d7 01b0 	ldr.w	r0, [r7, #432]	@ 0x1b0
 80017a2:	f7ff fea3 	bl	80014ec <GobbleCharactersFromBeginningOfStream>

		FieldValue = 0.0; jFieldValue = 0; strcpy(sFieldValue, "");
 80017a6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017aa:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017b8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017c4:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80017c8:	2200      	movs	r2, #0
 80017ca:	701a      	strb	r2, [r3, #0]
		if (jField == 1) {
 80017cc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d110      	bne.n	80017f6 <ParseStringPopulateCarRecord+0x1d6>
		  ReturnValue = fscanf(pMemFile, "%s %fL",  sFieldName, &FieldValue);
 80017d4:	f107 0318 	add.w	r3, r7, #24
 80017d8:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 80017dc:	496b      	ldr	r1, [pc, #428]	@ (800198c <ParseStringPopulateCarRecord+0x36c>)
 80017de:	f8d7 01b0 	ldr.w	r0, [r7, #432]	@ 0x1b0
 80017e2:	f00b fe9b 	bl	800d51c <fiscanf>
 80017e6:	f8c7 01ac 	str.w	r0, [r7, #428]	@ 0x1ac
		  if (ReturnValue != 2) while (1) ;
 80017ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d051      	beq.n	8001896 <ParseStringPopulateCarRecord+0x276>
 80017f2:	bf00      	nop
 80017f4:	e7fd      	b.n	80017f2 <ParseStringPopulateCarRecord+0x1d2>
		} else if (jField == 3) {
 80017f6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d114      	bne.n	8001828 <ParseStringPopulateCarRecord+0x208>
			  ReturnValue = fscanf(pMemFile, "%s %s %d",  sFieldName2, sFieldName, &jFieldValue);
 80017fe:	f507 718e 	add.w	r1, r7, #284	@ 0x11c
 8001802:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	460b      	mov	r3, r1
 800180e:	4960      	ldr	r1, [pc, #384]	@ (8001990 <ParseStringPopulateCarRecord+0x370>)
 8001810:	f8d7 01b0 	ldr.w	r0, [r7, #432]	@ 0x1b0
 8001814:	f00b fe82 	bl	800d51c <fiscanf>
 8001818:	f8c7 01ac 	str.w	r0, [r7, #428]	@ 0x1ac
			  if (ReturnValue != 3) while (1) ;
 800181c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001820:	2b03      	cmp	r3, #3
 8001822:	d038      	beq.n	8001896 <ParseStringPopulateCarRecord+0x276>
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <ParseStringPopulateCarRecord+0x204>
		} else if (jField == 4) {
 8001828:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800182c:	2b04      	cmp	r3, #4
 800182e:	d121      	bne.n	8001874 <ParseStringPopulateCarRecord+0x254>
			  ReturnValue = fscanf(pMemFile, "%s %s",  sFieldName, sFieldValue);
 8001830:	f107 031c 	add.w	r3, r7, #28
 8001834:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 8001838:	4956      	ldr	r1, [pc, #344]	@ (8001994 <ParseStringPopulateCarRecord+0x374>)
 800183a:	f8d7 01b0 	ldr.w	r0, [r7, #432]	@ 0x1b0
 800183e:	f00b fe6d 	bl	800d51c <fiscanf>
 8001842:	f8c7 01ac 	str.w	r0, [r7, #428]	@ 0x1ac
			  if (ReturnValue != 2) while (1) ;
 8001846:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800184a:	2b02      	cmp	r3, #2
 800184c:	d001      	beq.n	8001852 <ParseStringPopulateCarRecord+0x232>
 800184e:	bf00      	nop
 8001850:	e7fd      	b.n	800184e <ParseStringPopulateCarRecord+0x22e>
			  SuppressCharactersOffEndOfString(sFieldValue,  ",", jVerbosity>=jVerbosity_For_SuppressCharacters);
 8001852:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001856:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b18      	cmp	r3, #24
 800185e:	bfcc      	ite	gt
 8001860:	2301      	movgt	r3, #1
 8001862:	2300      	movle	r3, #0
 8001864:	b2da      	uxtb	r2, r3
 8001866:	f107 031c 	add.w	r3, r7, #28
 800186a:	494b      	ldr	r1, [pc, #300]	@ (8001998 <ParseStringPopulateCarRecord+0x378>)
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fdd7 	bl	8001420 <SuppressCharactersOffEndOfString>
 8001872:	e010      	b.n	8001896 <ParseStringPopulateCarRecord+0x276>
		} else {
			ReturnValue = fscanf(pMemFile, "%s %d",  sFieldName, &jFieldValue);
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 800187c:	4947      	ldr	r1, [pc, #284]	@ (800199c <ParseStringPopulateCarRecord+0x37c>)
 800187e:	f8d7 01b0 	ldr.w	r0, [r7, #432]	@ 0x1b0
 8001882:	f00b fe4b 	bl	800d51c <fiscanf>
 8001886:	f8c7 01ac 	str.w	r0, [r7, #428]	@ 0x1ac
			if (ReturnValue != 2) while (1) ;
 800188a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800188e:	2b02      	cmp	r3, #2
 8001890:	d001      	beq.n	8001896 <ParseStringPopulateCarRecord+0x276>
 8001892:	bf00      	nop
 8001894:	e7fd      	b.n	8001892 <ParseStringPopulateCarRecord+0x272>
		}

		SuppressCharactersOffEndOfString(sFieldName,  ":", jVerbosity>=jVerbosity_For_SuppressCharacters);
 8001896:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800189a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b18      	cmp	r3, #24
 80018a2:	bfcc      	ite	gt
 80018a4:	2301      	movgt	r3, #1
 80018a6:	2300      	movle	r3, #0
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80018ae:	493c      	ldr	r1, [pc, #240]	@ (80019a0 <ParseStringPopulateCarRecord+0x380>)
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fdb5 	bl	8001420 <SuppressCharactersOffEndOfString>
		if (jVerbosity >= 15)
 80018b6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018ba:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b0e      	cmp	r3, #14
 80018c2:	dd18      	ble.n	80018f6 <ParseStringPopulateCarRecord+0x2d6>
			printf("Got: %12s %8.1f or %8d or >%s< \n", sFieldName, FieldValue, jFieldValue, sFieldValue);
 80018c4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018c8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fe5a 	bl	8000588 <__aeabi_f2d>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 80018dc:	f5a1 71d6 	sub.w	r1, r1, #428	@ 0x1ac
 80018e0:	6809      	ldr	r1, [r1, #0]
 80018e2:	f507 748e 	add.w	r4, r7, #284	@ 0x11c
 80018e6:	f107 001c 	add.w	r0, r7, #28
 80018ea:	9001      	str	r0, [sp, #4]
 80018ec:	9100      	str	r1, [sp, #0]
 80018ee:	4621      	mov	r1, r4
 80018f0:	482c      	ldr	r0, [pc, #176]	@ (80019a4 <ParseStringPopulateCarRecord+0x384>)
 80018f2:	f00b fecf 	bl	800d694 <iprintf>

		if ( strcasecmp(sFieldName, "Year") == 0 )
 80018f6:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80018fa:	492b      	ldr	r1, [pc, #172]	@ (80019a8 <ParseStringPopulateCarRecord+0x388>)
 80018fc:	4618      	mov	r0, r3
 80018fe:	f00c fbbf 	bl	800e080 <strcasecmp>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d10b      	bne.n	8001920 <ParseStringPopulateCarRecord+0x300>
			pCarRecord->jYear = jFieldValue;
 8001908:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800190c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001916:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	e08e      	b.n	8001a3e <ParseStringPopulateCarRecord+0x41e>
		else if ( strcasecmp(sFieldName, "Engine") == 0 )
 8001920:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001924:	4921      	ldr	r1, [pc, #132]	@ (80019ac <ParseStringPopulateCarRecord+0x38c>)
 8001926:	4618      	mov	r0, r3
 8001928:	f00c fbaa 	bl	800e080 <strcasecmp>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10b      	bne.n	800194a <ParseStringPopulateCarRecord+0x32a>
			pCarRecord->EngineSize = FieldValue;
 8001932:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001936:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001940:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	615a      	str	r2, [r3, #20]
 8001948:	e079      	b.n	8001a3e <ParseStringPopulateCarRecord+0x41e>
		else if ( strcasecmp(sFieldName, "Milage") == 0 )
 800194a:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800194e:	4918      	ldr	r1, [pc, #96]	@ (80019b0 <ParseStringPopulateCarRecord+0x390>)
 8001950:	4618      	mov	r0, r3
 8001952:	f00c fb95 	bl	800e080 <strcasecmp>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d12b      	bne.n	80019b4 <ParseStringPopulateCarRecord+0x394>
			pCarRecord->jMilage = jFieldValue;
 800195c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001960:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800196a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	e064      	b.n	8001a3e <ParseStringPopulateCarRecord+0x41e>
 8001974:	2000003c 	.word	0x2000003c
 8001978:	08011ea4 	.word	0x08011ea4
 800197c:	08011ed0 	.word	0x08011ed0
 8001980:	08011ed4 	.word	0x08011ed4
 8001984:	08011ed8 	.word	0x08011ed8
 8001988:	08011edc 	.word	0x08011edc
 800198c:	08011ee4 	.word	0x08011ee4
 8001990:	08011eec 	.word	0x08011eec
 8001994:	08011ef8 	.word	0x08011ef8
 8001998:	08011f00 	.word	0x08011f00
 800199c:	08011f04 	.word	0x08011f04
 80019a0:	08011f0c 	.word	0x08011f0c
 80019a4:	08011f10 	.word	0x08011f10
 80019a8:	08011f34 	.word	0x08011f34
 80019ac:	08011f3c 	.word	0x08011f3c
 80019b0:	08011f44 	.word	0x08011f44
		else if ( strcasecmp(sFieldName, "Price") == 0 )
 80019b4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80019b8:	492c      	ldr	r1, [pc, #176]	@ (8001a6c <ParseStringPopulateCarRecord+0x44c>)
 80019ba:	4618      	mov	r0, r3
 80019bc:	f00c fb60 	bl	800e080 <strcasecmp>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10b      	bne.n	80019de <ParseStringPopulateCarRecord+0x3be>
			pCarRecord->jAskingPrice = jFieldValue;
 80019c6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80019ca:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80019d4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	611a      	str	r2, [r3, #16]
 80019dc:	e02f      	b.n	8001a3e <ParseStringPopulateCarRecord+0x41e>
		else if ( strcasecmp(sFieldName, "Status") == 0 )
 80019de:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80019e2:	4923      	ldr	r1, [pc, #140]	@ (8001a70 <ParseStringPopulateCarRecord+0x450>)
 80019e4:	4618      	mov	r0, r3
 80019e6:	f00c fb4b 	bl	800e080 <strcasecmp>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d112      	bne.n	8001a16 <ParseStringPopulateCarRecord+0x3f6>
			pCarRecord->bCarIsNew = strcasecmp( sFieldValue, "New") == 0;
 80019f0:	f107 031c 	add.w	r3, r7, #28
 80019f4:	491f      	ldr	r1, [pc, #124]	@ (8001a74 <ParseStringPopulateCarRecord+0x454>)
 80019f6:	4618      	mov	r0, r3
 80019f8:	f00c fb42 	bl	800e080 <strcasecmp>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	bf0c      	ite	eq
 8001a02:	2301      	moveq	r3, #1
 8001a04:	2300      	movne	r3, #0
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a0c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	771a      	strb	r2, [r3, #28]
 8001a14:	e013      	b.n	8001a3e <ParseStringPopulateCarRecord+0x41e>
		else if ( strcasecmp(sFieldName, "Index") == 0 )
 8001a16:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001a1a:	4917      	ldr	r1, [pc, #92]	@ (8001a78 <ParseStringPopulateCarRecord+0x458>)
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f00c fb2f 	bl	800e080 <strcasecmp>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10a      	bne.n	8001a3e <ParseStringPopulateCarRecord+0x41e>
			pCarRecord->jRecordIndex = jFieldValue;
 8001a28:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a2c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a36:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	619a      	str	r2, [r3, #24]
	for (jField=0; jField < nFields; jField++){
 8001a3e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001a42:	3301      	adds	r3, #1
 8001a44:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001a48:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001a4c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8001a50:	429a      	cmp	r2, r3
 8001a52:	f6ff ae98 	blt.w	8001786 <ParseStringPopulateCarRecord+0x166>

	}  //  for jField

	fclose( pMemFile );
 8001a56:	f8d7 01b0 	ldr.w	r0, [r7, #432]	@ 0x1b0
 8001a5a:	f00b fabd 	bl	800cfd8 <fclose>

return SUCCESS;
 8001a5e:	2300      	movs	r3, #0
}  //  ParseStringPopulateCarRecord
 8001a60:	4618      	mov	r0, r3
 8001a62:	f507 77e2 	add.w	r7, r7, #452	@ 0x1c4
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd90      	pop	{r4, r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	08011f4c 	.word	0x08011f4c
 8001a70:	08011f54 	.word	0x08011f54
 8001a74:	08011f5c 	.word	0x08011f5c
 8001a78:	08011f60 	.word	0x08011f60

08001a7c <FindStringOnList>:
 *
 * Inputs:              none
 * Outputs:             none
 * Side Effects:        none
********************************/
char *FindStringOnList(char * sString, char *ListOfStrings[], int nStringsOnList, int * pjStringOnList ) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	603b      	str	r3, [r7, #0]
  int bNoMatch;

  for (*pjStringOnList=0; *pjStringOnList < nStringsOnList; (*pjStringOnList)++) {
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	e019      	b.n	8001ac6 <FindStringOnList+0x4a>
	  bNoMatch = strcasecmp( sString, ListOfStrings[*pjStringOnList] );
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	68ba      	ldr	r2, [r7, #8]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f00c faed 	bl	800e080 <strcasecmp>
 8001aa6:	6178      	str	r0, [r7, #20]
	  if ( bNoMatch == 0) {
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d106      	bne.n	8001abc <FindStringOnList+0x40>
		  //  Match !!
		  return ListOfStrings[ *pjStringOnList ];
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	e00e      	b.n	8001ada <FindStringOnList+0x5e>
  for (*pjStringOnList=0; *pjStringOnList < nStringsOnList; (*pjStringOnList)++) {
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	dce0      	bgt.n	8001a92 <FindStringOnList+0x16>
	  }
  }
  *pjStringOnList = -1;  // Also indicate no match found
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ad6:	601a      	str	r2, [r3, #0]
  return NULL;  		 // No match found
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <EliminateDuplicatesInCarList>:
 *  EliminateDuplicatesInCarList    Look for identical record pointers to detect duplicates
 * Inputs:              pCarList, jVerbosity
 * Outputs:             Count of nodes eliminated, or -1 for Failure
 * Side Effects:        Detects and frees duplicate nodes
********************************/
int EliminateDuplicatesInCarList( CarListNode_t * pCarList, int jVerbosity ) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
	int				nDuplicateRecordsFound = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
	CarListNode_t * pCarList2;
	CarListNode_t * pCarList2_Previous;

	if ( pCarList == NULL ) {
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d13d      	bne.n	8001b74 <EliminateDuplicatesInCarList+0x90>
	  if (jVerbosity >= 8)  fprintf(stdout, "EliminateDuplicatesInCarList: Processing an empty list.\n");
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	2b07      	cmp	r3, #7
 8001afc:	dd07      	ble.n	8001b0e <EliminateDuplicatesInCarList+0x2a>
 8001afe:	4b22      	ldr	r3, [pc, #136]	@ (8001b88 <EliminateDuplicatesInCarList+0xa4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2238      	movs	r2, #56	@ 0x38
 8001b06:	2101      	movs	r1, #1
 8001b08:	4820      	ldr	r0, [pc, #128]	@ (8001b8c <EliminateDuplicatesInCarList+0xa8>)
 8001b0a:	f00b fd85 	bl	800d618 <fwrite>
	  return nDuplicateRecordsFound;
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	e035      	b.n	8001b7e <EliminateDuplicatesInCarList+0x9a>
	}

	while ( pCarList->pNextCarListNode != NULL ) {
		pCarList2 = pCarList->pNextCarListNode;  // Initial value, can not be NULL
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	613b      	str	r3, [r7, #16]
		pCarList2_Previous = pCarList;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	60fb      	str	r3, [r7, #12]
		while (pCarList2->pNextCarListNode != NULL) {
 8001b1c:	e023      	b.n	8001b66 <EliminateDuplicatesInCarList+0x82>
			if ( pCarList->pCarRecord == pCarList2->pCarRecord ) {
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d118      	bne.n	8001b5c <EliminateDuplicatesInCarList+0x78>
				nDuplicateRecordsFound++;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
				if (jVerbosity >= 11)  fprintf(stdout, "EliminateDuplicatesInCarList:  Detected a duplicate, %3d and %3d \n",
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	2b0a      	cmp	r3, #10
 8001b34:	dd0b      	ble.n	8001b4e <EliminateDuplicatesInCarList+0x6a>
 8001b36:	4b14      	ldr	r3, [pc, #80]	@ (8001b88 <EliminateDuplicatesInCarList+0xa4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6898      	ldr	r0, [r3, #8]
														pCarList->pCarRecord->jRecordIndex, pCarList2->pCarRecord->jRecordIndex);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
				if (jVerbosity >= 11)  fprintf(stdout, "EliminateDuplicatesInCarList:  Detected a duplicate, %3d and %3d \n",
 8001b40:	699a      	ldr	r2, [r3, #24]
														pCarList->pCarRecord->jRecordIndex, pCarList2->pCarRecord->jRecordIndex);
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	681b      	ldr	r3, [r3, #0]
				if (jVerbosity >= 11)  fprintf(stdout, "EliminateDuplicatesInCarList:  Detected a duplicate, %3d and %3d \n",
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	4911      	ldr	r1, [pc, #68]	@ (8001b90 <EliminateDuplicatesInCarList+0xac>)
 8001b4a:	f00b fca9 	bl	800d4a0 <fiprintf>
				//Cut out pCarList2
				pCarList2_Previous->pNextCarListNode = pCarList2->pNextCarListNode;
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	605a      	str	r2, [r3, #4]
				free( pCarList2 );
 8001b56:	6938      	ldr	r0, [r7, #16]
 8001b58:	f00a fac6 	bl	800c0e8 <free>
			}  //  if Records are duplicate
			pCarList2_Previous = pCarList2;
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	60fb      	str	r3, [r7, #12]
			pCarList2 = pCarList2->pNextCarListNode;
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	613b      	str	r3, [r7, #16]
		while (pCarList2->pNextCarListNode != NULL) {
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1d7      	bne.n	8001b1e <EliminateDuplicatesInCarList+0x3a>
		}  // Inner while loop
		pCarList = pCarList->pNextCarListNode;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	607b      	str	r3, [r7, #4]
	while ( pCarList->pNextCarListNode != NULL ) {
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1ca      	bne.n	8001b12 <EliminateDuplicatesInCarList+0x2e>
	}  //  Outer while
	return nDuplicateRecordsFound;
 8001b7c:	697b      	ldr	r3, [r7, #20]
}  // EliminateDuplicatesInCarList
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	2000003c 	.word	0x2000003c
 8001b8c:	08011f68 	.word	0x08011f68
 8001b90:	08011fa4 	.word	0x08011fa4

08001b94 <InitializeQueryControl>:
 *
 * Inputs:              none
 * Outputs:             none
 * Side Effects:        none
********************************/
int InitializeQueryControl( QueryControl_t *pQueryControl, ModelRecord_t *pModelRecords, int nModelRecords, int nCarRecords, int jVerbosity ) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
 8001ba0:	603b      	str	r3, [r7, #0]
  int  jModelRecord;
  int  jMakeOrModelString;
  char * sReturnValue;

  // Zero out the query control
  memset(pQueryControl, 0, sizeof(QueryControl_t));
 8001ba2:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f00c fa61 	bl	800e070 <memset>

  pQueryControl->nModelRecords = nModelRecords;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
  pQueryControl->nCarRecords   = nCarRecords;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

  // Setup String spaces
  for (jMakeOrModelString=0; jMakeOrModelString < N_MakesOrModels; jMakeOrModelString++) {
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	e01c      	b.n	8001bfe <InitializeQueryControl+0x6a>
	  pQueryControl->sMakeNames[jMakeOrModelString]  = &pQueryControl->StringSpaceForMakeAndModelNames[jMakeOrModelString*2*N_CharactersMakeModelName];
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	3360      	adds	r3, #96	@ 0x60
 8001bd2:	68f9      	ldr	r1, [r7, #12]
 8001bd4:	4419      	add	r1, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  pQueryControl->sModelNames[jMakeOrModelString] = &pQueryControl->StringSpaceForMakeAndModelNames[jMakeOrModelString*2*N_CharactersMakeModelName + N_CharactersMakeModelName];
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	4613      	mov	r3, r2
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4413      	add	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	330c      	adds	r3, #12
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	3360      	adds	r3, #96	@ 0x60
 8001bec:	68f9      	ldr	r1, [r7, #12]
 8001bee:	4419      	add	r1, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3206      	adds	r2, #6
 8001bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (jMakeOrModelString=0; jMakeOrModelString < N_MakesOrModels; jMakeOrModelString++) {
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2b05      	cmp	r3, #5
 8001c02:	dddf      	ble.n	8001bc4 <InitializeQueryControl+0x30>
  }


  // Setup Query Commands
  pQueryControl->sQueryCommands[0] = "Select";
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4a5a      	ldr	r2, [pc, #360]	@ (8001d70 <InitializeQueryControl+0x1dc>)
 8001c08:	631a      	str	r2, [r3, #48]	@ 0x30
  pQueryControl->sQueryCommands[1] = "Add";
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4a59      	ldr	r2, [pc, #356]	@ (8001d74 <InitializeQueryControl+0x1e0>)
 8001c0e:	635a      	str	r2, [r3, #52]	@ 0x34
  pQueryControl->sQueryCommands[2] = "Report";
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4a59      	ldr	r2, [pc, #356]	@ (8001d78 <InitializeQueryControl+0x1e4>)
 8001c14:	639a      	str	r2, [r3, #56]	@ 0x38
  pQueryControl->sQueryCommands[3] = "Report_Database";
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4a58      	ldr	r2, [pc, #352]	@ (8001d7c <InitializeQueryControl+0x1e8>)
 8001c1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  pQueryControl->sQueryCommands[4] = "Report_nCarsOnWorkingList";
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4a58      	ldr	r2, [pc, #352]	@ (8001d80 <InitializeQueryControl+0x1ec>)
 8001c20:	641a      	str	r2, [r3, #64]	@ 0x40
  pQueryControl->sQueryCommands[5] = "Reset";
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4a57      	ldr	r2, [pc, #348]	@ (8001d84 <InitializeQueryControl+0x1f0>)
 8001c26:	645a      	str	r2, [r3, #68]	@ 0x44
  pQueryControl->sQueryCommands[6] = "Help";
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4a57      	ldr	r2, [pc, #348]	@ (8001d88 <InitializeQueryControl+0x1f4>)
 8001c2c:	649a      	str	r2, [r3, #72]	@ 0x48
  pQueryControl->nQueryCommands    = 7;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2207      	movs	r2, #7
 8001c32:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
  if (pQueryControl->nQueryCommands > N_QueryCommands)  while (1) ;  //  error
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001c3c:	2b07      	cmp	r3, #7
 8001c3e:	dd01      	ble.n	8001c44 <InitializeQueryControl+0xb0>
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <InitializeQueryControl+0xac>

  // Setup Category Labels  The indices in this list must match the enum assignments in SetCategoryLabel
  pQueryControl->sCategoryLabels[0] = "Year";
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4a51      	ldr	r2, [pc, #324]	@ (8001d8c <InitializeQueryControl+0x1f8>)
 8001c48:	64da      	str	r2, [r3, #76]	@ 0x4c
  pQueryControl->sCategoryLabels[1] = "Price";
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4a50      	ldr	r2, [pc, #320]	@ (8001d90 <InitializeQueryControl+0x1fc>)
 8001c4e:	651a      	str	r2, [r3, #80]	@ 0x50
  pQueryControl->sCategoryLabels[2] = "EngineSize";
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4a50      	ldr	r2, [pc, #320]	@ (8001d94 <InitializeQueryControl+0x200>)
 8001c54:	655a      	str	r2, [r3, #84]	@ 0x54
  pQueryControl->sCategoryLabels[3] = "Milage";
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4a4f      	ldr	r2, [pc, #316]	@ (8001d98 <InitializeQueryControl+0x204>)
 8001c5a:	659a      	str	r2, [r3, #88]	@ 0x58
  pQueryControl->sCategoryLabels[4] = "Status";
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4a4f      	ldr	r2, [pc, #316]	@ (8001d9c <InitializeQueryControl+0x208>)
 8001c60:	65da      	str	r2, [r3, #92]	@ 0x5c
  pQueryControl->nCategoryLabels    = 5;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2205      	movs	r2, #5
 8001c66:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  if (pQueryControl->nCategoryLabels > N_CategoryLabels) while (1) ;  //  error
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8001c70:	2b05      	cmp	r3, #5
 8001c72:	dd01      	ble.n	8001c78 <InitializeQueryControl+0xe4>
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <InitializeQueryControl+0xe0>

  pQueryControl->jVerbosity         = jVerbosity;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c7c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  // Build a list of makes
  for (jModelRecord=0; jModelRecord < nModelRecords; jModelRecord++) {
 8001c80:	2300      	movs	r3, #0
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	e030      	b.n	8001ce8 <InitializeQueryControl+0x154>
	sReturnValue = FindStringOnList( pModelRecords[jModelRecord].sMake, pQueryControl->sMakeNames, pQueryControl->nMakeNames,  &jMakeOrModelString ) ;
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	222c      	movs	r2, #44	@ 0x2c
 8001c8a:	fb02 f303 	mul.w	r3, r2, r3
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	4413      	add	r3, r2
 8001c92:	6818      	ldr	r0, [r3, #0]
 8001c94:	68f9      	ldr	r1, [r7, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	f7ff feec 	bl	8001a7c <FindStringOnList>
 8001ca4:	61b8      	str	r0, [r7, #24]
	if ( sReturnValue == NULL ) {
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d11a      	bne.n	8001ce2 <InitializeQueryControl+0x14e>
		// Make was not in the list of MakeNames, so add it
		if ( pQueryControl->nMakeNames  >= N_MakesOrModels ) while (1);  // error
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001cb2:	2b05      	cmp	r3, #5
 8001cb4:	dd01      	ble.n	8001cba <InitializeQueryControl+0x126>
 8001cb6:	bf00      	nop
 8001cb8:	e7fd      	b.n	8001cb6 <InitializeQueryControl+0x122>
		strcpy( pQueryControl->sMakeNames[pQueryControl->nMakeNames++], pModelRecords[jModelRecord].sMake );
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001cc0:	1c59      	adds	r1, r3, #1
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	f8c2 1104 	str.w	r1, [r2, #260]	@ 0x104
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	222c      	movs	r2, #44	@ 0x2c
 8001cd2:	fb02 f303 	mul.w	r3, r2, r3
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	4413      	add	r3, r2
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f00c fa71 	bl	800e1c4 <strcpy>
  for (jModelRecord=0; jModelRecord < nModelRecords; jModelRecord++) {
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	61fb      	str	r3, [r7, #28]
 8001ce8:	69fa      	ldr	r2, [r7, #28]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	dbca      	blt.n	8001c86 <InitializeQueryControl+0xf2>
	}
  }  //  for

  // Build a list of models
  for (jModelRecord=0; jModelRecord < nModelRecords; jModelRecord++) {
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
 8001cf4:	e033      	b.n	8001d5e <InitializeQueryControl+0x1ca>
	sReturnValue = FindStringOnList( pModelRecords[jModelRecord].sModel, pQueryControl->sModelNames, pQueryControl->nModelNames, &jMakeOrModelString ) ;
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	222c      	movs	r2, #44	@ 0x2c
 8001cfa:	fb02 f303 	mul.w	r3, r2, r3
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	4413      	add	r3, r2
 8001d02:	6858      	ldr	r0, [r3, #4]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f103 0118 	add.w	r1, r3, #24
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	f7ff feb2 	bl	8001a7c <FindStringOnList>
 8001d18:	61b8      	str	r0, [r7, #24]
	if ( sReturnValue == NULL ) {
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d11b      	bne.n	8001d58 <InitializeQueryControl+0x1c4>
		// Model was not in the list of ModelNames, so add it
		if ( pQueryControl->nModelNames  >= N_MakesOrModels) while (1);  // error
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001d26:	2b05      	cmp	r3, #5
 8001d28:	dd01      	ble.n	8001d2e <InitializeQueryControl+0x19a>
 8001d2a:	bf00      	nop
 8001d2c:	e7fd      	b.n	8001d2a <InitializeQueryControl+0x196>
		strcpy( pQueryControl->sModelNames[pQueryControl->nModelNames++], pModelRecords[jModelRecord].sModel );
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001d34:	1c59      	adds	r1, r3, #1
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	f8c2 1108 	str.w	r1, [r2, #264]	@ 0x108
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	3306      	adds	r3, #6
 8001d40:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	222c      	movs	r2, #44	@ 0x2c
 8001d48:	fb02 f303 	mul.w	r3, r2, r3
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	4413      	add	r3, r2
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4619      	mov	r1, r3
 8001d54:	f00c fa36 	bl	800e1c4 <strcpy>
  for (jModelRecord=0; jModelRecord < nModelRecords; jModelRecord++) {
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	61fb      	str	r3, [r7, #28]
 8001d5e:	69fa      	ldr	r2, [r7, #28]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	dbc7      	blt.n	8001cf6 <InitializeQueryControl+0x162>
	}
  }  //  for


  return SUCCESS;
 8001d66:	2300      	movs	r3, #0
}  //  InitializeQueryControl
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3720      	adds	r7, #32
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	0801205c 	.word	0x0801205c
 8001d74:	08012064 	.word	0x08012064
 8001d78:	08012068 	.word	0x08012068
 8001d7c:	08012070 	.word	0x08012070
 8001d80:	08012080 	.word	0x08012080
 8001d84:	0801209c 	.word	0x0801209c
 8001d88:	080120a4 	.word	0x080120a4
 8001d8c:	08011f34 	.word	0x08011f34
 8001d90:	08011f4c 	.word	0x08011f4c
 8001d94:	080120ac 	.word	0x080120ac
 8001d98:	08011f44 	.word	0x08011f44
 8001d9c:	08011f54 	.word	0x08011f54

08001da0 <SetQueryCommand>:
 *  SetQueryCommand  Match sString to a query command, and set the category label enum in pCategoryRange
 * Inputs:              pQueryControl, pCategoryRange, sString
 * Outputs:             0 for SUCCESS, else Failure
 * Side Effects:        On success, Sets Category label in Category Range
********************************/
int SetQueryCommand( QueryControl_t *pQueryControl, QueryCommand_t * pQueryCommand, char * sString ) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  int 		jQueryCommand;
  char 	 * sReturnValue;

	// Figure out which Category Label
  sReturnValue = FindStringOnList( sString, pQueryControl->sQueryCommands, pQueryControl->nQueryCommands,  &jQueryCommand ) ;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8001db8:	f107 0310 	add.w	r3, r7, #16
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff fe5d 	bl	8001a7c <FindStringOnList>
 8001dc2:	6178      	str	r0, [r7, #20]
  if (sReturnValue != NULL ) {
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d03e      	beq.n	8001e48 <SetQueryCommand+0xa8>
	  switch (jQueryCommand) {
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	2b06      	cmp	r3, #6
 8001dce:	d834      	bhi.n	8001e3a <SetQueryCommand+0x9a>
 8001dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8001dd8 <SetQueryCommand+0x38>)
 8001dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd6:	bf00      	nop
 8001dd8:	08001df5 	.word	0x08001df5
 8001ddc:	08001dff 	.word	0x08001dff
 8001de0:	08001e09 	.word	0x08001e09
 8001de4:	08001e13 	.word	0x08001e13
 8001de8:	08001e1d 	.word	0x08001e1d
 8001dec:	08001e27 	.word	0x08001e27
 8001df0:	08001e31 	.word	0x08001e31
	  case 0 :
		  pQueryCommand->eQueryCommand = qc_Select;
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		  break;
 8001dfc:	e038      	b.n	8001e70 <SetQueryCommand+0xd0>
	  case 1 :
		  pQueryCommand->eQueryCommand = qc_Add;
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	2202      	movs	r2, #2
 8001e02:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		  break;
 8001e06:	e033      	b.n	8001e70 <SetQueryCommand+0xd0>
	  case 2 :
		  pQueryCommand->eQueryCommand = qc_Report;
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		  break;
 8001e10:	e02e      	b.n	8001e70 <SetQueryCommand+0xd0>
	  case 3 :
		  pQueryCommand->eQueryCommand = qc_ReportDatabase;
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	2204      	movs	r2, #4
 8001e16:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		  break;
 8001e1a:	e029      	b.n	8001e70 <SetQueryCommand+0xd0>
	  case 4 :
		  pQueryCommand->eQueryCommand = qc_Report_nCarsOnWorkingList;
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2205      	movs	r2, #5
 8001e20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		  break;
 8001e24:	e024      	b.n	8001e70 <SetQueryCommand+0xd0>
	  case 5 :
		  pQueryCommand->eQueryCommand = qc_Reset;
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2206      	movs	r2, #6
 8001e2a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		  break;
 8001e2e:	e01f      	b.n	8001e70 <SetQueryCommand+0xd0>
	  case 6 :
		  pQueryCommand->eQueryCommand = qc_Help;
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2207      	movs	r2, #7
 8001e34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		  break;
 8001e38:	e01a      	b.n	8001e70 <SetQueryCommand+0xd0>
	  default:
		  pQueryCommand->eQueryCommand = qc_QueryCommandNotSet;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		  return FAILURE;
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e46:	e014      	b.n	8001e72 <SetQueryCommand+0xd2>
	  }  // switch
  }  else  {//  if
	pQueryCommand->eQueryCommand = qc_QueryCommandNotSet;
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	if (pQueryControl->jVerbosity >= 1) fprintf(stderr, "SetQueryCommand:  Processed: >%s<, could not find a valid query command \n", sString);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	dd07      	ble.n	8001e6a <SetQueryCommand+0xca>
 8001e5a:	4b08      	ldr	r3, [pc, #32]	@ (8001e7c <SetQueryCommand+0xdc>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	4907      	ldr	r1, [pc, #28]	@ (8001e80 <SetQueryCommand+0xe0>)
 8001e64:	4618      	mov	r0, r3
 8001e66:	f00b fb1b 	bl	800d4a0 <fiprintf>
	return FAILURE;
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e6e:	e000      	b.n	8001e72 <SetQueryCommand+0xd2>
  }
  return SUCCESS;
 8001e70:	2300      	movs	r3, #0
}  //  SetQueryCommand
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	2000003c 	.word	0x2000003c
 8001e80:	080120b8 	.word	0x080120b8

08001e84 <GetQueryCommandName>:
 *  GetQueryCommandName
 * Inputs:              eQueryCommand
 * Outputs:             none
 * Side Effects:        Return a pointer to a string with Query Command name.
********************************/
char * GetQueryCommandName( PossibleQueryCommands_t eQueryCommand ) {
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
	switch ( eQueryCommand ) {
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	2b07      	cmp	r3, #7
 8001e92:	d823      	bhi.n	8001edc <GetQueryCommandName+0x58>
 8001e94:	a201      	add	r2, pc, #4	@ (adr r2, 8001e9c <GetQueryCommandName+0x18>)
 8001e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9a:	bf00      	nop
 8001e9c:	08001ebd 	.word	0x08001ebd
 8001ea0:	08001ec1 	.word	0x08001ec1
 8001ea4:	08001ec5 	.word	0x08001ec5
 8001ea8:	08001ec9 	.word	0x08001ec9
 8001eac:	08001ecd 	.word	0x08001ecd
 8001eb0:	08001ed1 	.word	0x08001ed1
 8001eb4:	08001ed5 	.word	0x08001ed5
 8001eb8:	08001ed9 	.word	0x08001ed9
	case qc_QueryCommandNotSet 			: return "Query Command not set";
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8001eec <GetQueryCommandName+0x68>)
 8001ebe:	e00e      	b.n	8001ede <GetQueryCommandName+0x5a>
	case qc_Select             			: return "Select";
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef0 <GetQueryCommandName+0x6c>)
 8001ec2:	e00c      	b.n	8001ede <GetQueryCommandName+0x5a>
	case qc_Add             			: return "Add";
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef4 <GetQueryCommandName+0x70>)
 8001ec6:	e00a      	b.n	8001ede <GetQueryCommandName+0x5a>
	case qc_Report             			: return "Report";
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <GetQueryCommandName+0x74>)
 8001eca:	e008      	b.n	8001ede <GetQueryCommandName+0x5a>
	case qc_ReportDatabase             	: return "ReportDatabase";
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <GetQueryCommandName+0x78>)
 8001ece:	e006      	b.n	8001ede <GetQueryCommandName+0x5a>
	case qc_Report_nCarsOnWorkingList  	: return "Report nCars On Working List";
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <GetQueryCommandName+0x7c>)
 8001ed2:	e004      	b.n	8001ede <GetQueryCommandName+0x5a>
	case qc_Reset             			: return "Reset";
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f04 <GetQueryCommandName+0x80>)
 8001ed6:	e002      	b.n	8001ede <GetQueryCommandName+0x5a>
	case qc_Help             			: return "Help";
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <GetQueryCommandName+0x84>)
 8001eda:	e000      	b.n	8001ede <GetQueryCommandName+0x5a>
	}
	return "";
 8001edc:	4b0b      	ldr	r3, [pc, #44]	@ (8001f0c <GetQueryCommandName+0x88>)
}  //  GetCategoryLabel
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	08012104 	.word	0x08012104
 8001ef0:	0801205c 	.word	0x0801205c
 8001ef4:	08012064 	.word	0x08012064
 8001ef8:	08012068 	.word	0x08012068
 8001efc:	0801211c 	.word	0x0801211c
 8001f00:	0801212c 	.word	0x0801212c
 8001f04:	0801209c 	.word	0x0801209c
 8001f08:	080120a4 	.word	0x080120a4
 8001f0c:	0801214c 	.word	0x0801214c

08001f10 <SetCategoryLabel>:
 *  SetCategoryLabel  Match sString to a category label, and set the category label enum in pCategoryRange
 * Inputs:              pQueryControl, pCategoryRange, sString
 * Outputs:             0 for SUCCESS, else Failure
 * Side Effects:        On success, Sets Category label in Category Range
********************************/
int SetCategoryLabel( QueryControl_t *pQueryControl, CategoryRange_t * pCategoryRange, char * sString ) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  int 		jCategoryLabel;
  char 	 * sReturnValue;

	// Figure out which Category Label
  sReturnValue = FindStringOnList( sString, pQueryControl->sCategoryLabels, pQueryControl->nCategoryLabels,  &jCategoryLabel ) ;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001f28:	f107 0310 	add.w	r3, r7, #16
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff fda5 	bl	8001a7c <FindStringOnList>
 8001f32:	6178      	str	r0, [r7, #20]
  if (sReturnValue != NULL ) {
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d02a      	beq.n	8001f90 <SetCategoryLabel+0x80>
	  switch (jCategoryLabel) {
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d821      	bhi.n	8001f84 <SetCategoryLabel+0x74>
 8001f40:	a201      	add	r2, pc, #4	@ (adr r2, 8001f48 <SetCategoryLabel+0x38>)
 8001f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f46:	bf00      	nop
 8001f48:	08001f5d 	.word	0x08001f5d
 8001f4c:	08001f65 	.word	0x08001f65
 8001f50:	08001f6d 	.word	0x08001f6d
 8001f54:	08001f75 	.word	0x08001f75
 8001f58:	08001f7d 	.word	0x08001f7d
	  case 0 :
		  pCategoryRange->eCategoryLabel = cl_Year;
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
		  break;
 8001f62:	e01b      	b.n	8001f9c <SetCategoryLabel+0x8c>
	  case 1 :
		  pCategoryRange->eCategoryLabel = cl_Price;
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2202      	movs	r2, #2
 8001f68:	701a      	strb	r2, [r3, #0]
		  break;
 8001f6a:	e017      	b.n	8001f9c <SetCategoryLabel+0x8c>
	  case 2 :
		  pCategoryRange->eCategoryLabel = cl_EngineSize;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2203      	movs	r2, #3
 8001f70:	701a      	strb	r2, [r3, #0]
		  break;
 8001f72:	e013      	b.n	8001f9c <SetCategoryLabel+0x8c>
	  case 3 :
		  pCategoryRange->eCategoryLabel = cl_Milage;
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2204      	movs	r2, #4
 8001f78:	701a      	strb	r2, [r3, #0]
		  break;
 8001f7a:	e00f      	b.n	8001f9c <SetCategoryLabel+0x8c>
	  case 4 :
		  pCategoryRange->eCategoryLabel = cl_Status;
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2205      	movs	r2, #5
 8001f80:	701a      	strb	r2, [r3, #0]
		  break;
 8001f82:	e00b      	b.n	8001f9c <SetCategoryLabel+0x8c>
	  default:
		  pCategoryRange->eCategoryLabel = cl_CategoryLabelNotSet;
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]
		  return FAILURE;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f8e:	e006      	b.n	8001f9e <SetCategoryLabel+0x8e>
	  }  // switch
  }  else  {//  if
	pCategoryRange->eCategoryLabel = cl_CategoryLabelNotSet;
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
	return FAILURE;
 8001f96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f9a:	e000      	b.n	8001f9e <SetCategoryLabel+0x8e>
  }
  return SUCCESS;
 8001f9c:	2300      	movs	r3, #0
}  //  SetCategoryLabel
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop

08001fa8 <GetCategoryLabel>:
 *  GetCategoryLabel
 * Inputs:              eCategoryLabel
 * Outputs:             none
 * Side Effects:        Return a pointer to a string with Category label name.
********************************/
char * GetCategoryLabel( CategoryLabels_t eCategoryLabel ) {
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	71fb      	strb	r3, [r7, #7]
	switch ( eCategoryLabel ) {
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	2b05      	cmp	r3, #5
 8001fb6:	d81b      	bhi.n	8001ff0 <GetCategoryLabel+0x48>
 8001fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8001fc0 <GetCategoryLabel+0x18>)
 8001fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fbe:	bf00      	nop
 8001fc0:	08001fd9 	.word	0x08001fd9
 8001fc4:	08001fdd 	.word	0x08001fdd
 8001fc8:	08001fe1 	.word	0x08001fe1
 8001fcc:	08001fe9 	.word	0x08001fe9
 8001fd0:	08001fe5 	.word	0x08001fe5
 8001fd4:	08001fed 	.word	0x08001fed
	case cl_CategoryLabelNotSet : return "Category not set";
 8001fd8:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <GetCategoryLabel+0x58>)
 8001fda:	e00a      	b.n	8001ff2 <GetCategoryLabel+0x4a>
	case cl_Year   		: return "Year";
 8001fdc:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <GetCategoryLabel+0x5c>)
 8001fde:	e008      	b.n	8001ff2 <GetCategoryLabel+0x4a>
	case cl_Price  		: return "Price";
 8001fe0:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <GetCategoryLabel+0x60>)
 8001fe2:	e006      	b.n	8001ff2 <GetCategoryLabel+0x4a>
	case cl_Milage 		: return "Milage";
 8001fe4:	4b09      	ldr	r3, [pc, #36]	@ (800200c <GetCategoryLabel+0x64>)
 8001fe6:	e004      	b.n	8001ff2 <GetCategoryLabel+0x4a>
	case cl_EngineSize	: return "Engine Size";
 8001fe8:	4b09      	ldr	r3, [pc, #36]	@ (8002010 <GetCategoryLabel+0x68>)
 8001fea:	e002      	b.n	8001ff2 <GetCategoryLabel+0x4a>
	case cl_Status 		: return "Status";
 8001fec:	4b09      	ldr	r3, [pc, #36]	@ (8002014 <GetCategoryLabel+0x6c>)
 8001fee:	e000      	b.n	8001ff2 <GetCategoryLabel+0x4a>
	}
	return "";
 8001ff0:	4b09      	ldr	r3, [pc, #36]	@ (8002018 <GetCategoryLabel+0x70>)
}  //  GetCategoryLabel
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	08012150 	.word	0x08012150
 8002004:	08011f34 	.word	0x08011f34
 8002008:	08011f4c 	.word	0x08011f4c
 800200c:	08011f44 	.word	0x08011f44
 8002010:	08012164 	.word	0x08012164
 8002014:	08011f54 	.word	0x08011f54
 8002018:	0801214c 	.word	0x0801214c

0800201c <SetRelationalOperator>:
 *  SetRelationalOperator
 * Inputs:              pQueryControl, pCategoryRange, sString
 * Outputs:             0 for SUCCESS, else Failure
 * Side Effects:        On success, Sets Category label in Category Range
********************************/
int SetRelationalOperator( QueryControl_t *pQueryControl, CategoryRange_t * pCategoryRange, char * sString ) {
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]

  if ( strcmp(sString, "<") == 0 ) {
 8002028:	491f      	ldr	r1, [pc, #124]	@ (80020a8 <SetRelationalOperator+0x8c>)
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7fe f8e0 	bl	80001f0 <strcmp>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d103      	bne.n	800203e <SetRelationalOperator+0x22>
	  pCategoryRange->eRelation = re_LessThan;
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	2201      	movs	r2, #1
 800203a:	705a      	strb	r2, [r3, #1]
 800203c:	e02e      	b.n	800209c <SetRelationalOperator+0x80>
  } else
	  if ( strcmp(sString, "<=") == 0 ) {
 800203e:	491b      	ldr	r1, [pc, #108]	@ (80020ac <SetRelationalOperator+0x90>)
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7fe f8d5 	bl	80001f0 <strcmp>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d103      	bne.n	8002054 <SetRelationalOperator+0x38>
		  pCategoryRange->eRelation = re_LessThanOrEqualTo;
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2202      	movs	r2, #2
 8002050:	705a      	strb	r2, [r3, #1]
 8002052:	e023      	b.n	800209c <SetRelationalOperator+0x80>
	  } else
		  if( strcmp(sString, "=") == 0 ) {
 8002054:	4916      	ldr	r1, [pc, #88]	@ (80020b0 <SetRelationalOperator+0x94>)
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7fe f8ca 	bl	80001f0 <strcmp>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d103      	bne.n	800206a <SetRelationalOperator+0x4e>
			  pCategoryRange->eRelation = re_EqualTo;
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2203      	movs	r2, #3
 8002066:	705a      	strb	r2, [r3, #1]
 8002068:	e018      	b.n	800209c <SetRelationalOperator+0x80>
		  } else
			  if( strcmp(sString, ">=") == 0 ) {
 800206a:	4912      	ldr	r1, [pc, #72]	@ (80020b4 <SetRelationalOperator+0x98>)
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7fe f8bf 	bl	80001f0 <strcmp>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d103      	bne.n	8002080 <SetRelationalOperator+0x64>
				  pCategoryRange->eRelation = re_GreaterThanOrEqualTo;
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2204      	movs	r2, #4
 800207c:	705a      	strb	r2, [r3, #1]
 800207e:	e00d      	b.n	800209c <SetRelationalOperator+0x80>
			  } else
				  if( strcmp(sString, ">") == 0 ) {
 8002080:	490d      	ldr	r1, [pc, #52]	@ (80020b8 <SetRelationalOperator+0x9c>)
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7fe f8b4 	bl	80001f0 <strcmp>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d103      	bne.n	8002096 <SetRelationalOperator+0x7a>
					  pCategoryRange->eRelation = re_GreaterThan;
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2205      	movs	r2, #5
 8002092:	705a      	strb	r2, [r3, #1]
 8002094:	e002      	b.n	800209c <SetRelationalOperator+0x80>
				  } else {

					return FAILURE;
 8002096:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800209a:	e000      	b.n	800209e <SetRelationalOperator+0x82>
				  }
  return SUCCESS;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	08012170 	.word	0x08012170
 80020ac:	08012174 	.word	0x08012174
 80020b0:	08012178 	.word	0x08012178
 80020b4:	0801217c 	.word	0x0801217c
 80020b8:	08012180 	.word	0x08012180

080020bc <GetRelationOperator>:


char * GetRelationOperator( Relations_t eRelation ) {
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	71fb      	strb	r3, [r7, #7]
	switch ( eRelation )  {
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	2b05      	cmp	r3, #5
 80020ca:	d81b      	bhi.n	8002104 <GetRelationOperator+0x48>
 80020cc:	a201      	add	r2, pc, #4	@ (adr r2, 80020d4 <GetRelationOperator+0x18>)
 80020ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d2:	bf00      	nop
 80020d4:	080020ed 	.word	0x080020ed
 80020d8:	080020f1 	.word	0x080020f1
 80020dc:	080020f5 	.word	0x080020f5
 80020e0:	080020f9 	.word	0x080020f9
 80020e4:	080020fd 	.word	0x080020fd
 80020e8:	08002101 	.word	0x08002101
	case re_RelationNotSet       : return "Relation not set";
 80020ec:	4b09      	ldr	r3, [pc, #36]	@ (8002114 <GetRelationOperator+0x58>)
 80020ee:	e00a      	b.n	8002106 <GetRelationOperator+0x4a>
	case re_LessThan             : return "<";
 80020f0:	4b09      	ldr	r3, [pc, #36]	@ (8002118 <GetRelationOperator+0x5c>)
 80020f2:	e008      	b.n	8002106 <GetRelationOperator+0x4a>
	case re_LessThanOrEqualTo    : return "<=";
 80020f4:	4b09      	ldr	r3, [pc, #36]	@ (800211c <GetRelationOperator+0x60>)
 80020f6:	e006      	b.n	8002106 <GetRelationOperator+0x4a>
	case re_EqualTo              : return "=";
 80020f8:	4b09      	ldr	r3, [pc, #36]	@ (8002120 <GetRelationOperator+0x64>)
 80020fa:	e004      	b.n	8002106 <GetRelationOperator+0x4a>
	case re_GreaterThanOrEqualTo : return ">=";
 80020fc:	4b09      	ldr	r3, [pc, #36]	@ (8002124 <GetRelationOperator+0x68>)
 80020fe:	e002      	b.n	8002106 <GetRelationOperator+0x4a>
	case re_GreaterThan          : return ">";
 8002100:	4b09      	ldr	r3, [pc, #36]	@ (8002128 <GetRelationOperator+0x6c>)
 8002102:	e000      	b.n	8002106 <GetRelationOperator+0x4a>
	}
	return "";
 8002104:	4b09      	ldr	r3, [pc, #36]	@ (800212c <GetRelationOperator+0x70>)
}
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	08012184 	.word	0x08012184
 8002118:	08012170 	.word	0x08012170
 800211c:	08012174 	.word	0x08012174
 8002120:	08012178 	.word	0x08012178
 8002124:	0801217c 	.word	0x0801217c
 8002128:	08012180 	.word	0x08012180
 800212c:	0801214c 	.word	0x0801214c

08002130 <ParseQueryCommandLine>:
 *
 * Inputs:              pQueryControl, pQueryCommand, sInputString
 * Outputs:             0 for Success, -1 for no command found
 * Side Effects:        Processes string, loads QueryCommand
********************************/
int ParseQueryCommandLine(  QueryControl_t *pQueryControl, QueryCommand_t * pQueryCommand, char sInputString[] ) {
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	b0b1      	sub	sp, #196	@ 0xc4
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
	FILE  * pMemFile;
	char    sString[N_InputCharacters];
	char 	sQueryCommand[N_CharactersQueryCommand];
	int     jColon;
	int 	nChars_sModel;
	bool    bGotIllFormedString = false;
 800213c:	2300      	movs	r3, #0
 800213e:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf

	if (pQueryControl->jVerbosity > 5) fprintf(stdout, "  ParseLine: string: >%s< \n", sInputString);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002148:	2b05      	cmp	r3, #5
 800214a:	dd07      	ble.n	800215c <ParseQueryCommandLine+0x2c>
 800214c:	4baa      	ldr	r3, [pc, #680]	@ (80023f8 <ParseQueryCommandLine+0x2c8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	49a9      	ldr	r1, [pc, #676]	@ (80023fc <ParseQueryCommandLine+0x2cc>)
 8002156:	4618      	mov	r0, r3
 8002158:	f00b f9a2 	bl	800d4a0 <fiprintf>

	// Clear the Query record
	memset(pQueryCommand, 0, sizeof(QueryCommand_t));
 800215c:	2254      	movs	r2, #84	@ 0x54
 800215e:	2100      	movs	r1, #0
 8002160:	68b8      	ldr	r0, [r7, #8]
 8002162:	f00b ff85 	bl	800e070 <memset>

	pMemFile = fmemopen(sInputString, strlen(sInputString), "r");
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7fe f8a2 	bl	80002b0 <strlen>
 800216c:	4603      	mov	r3, r0
 800216e:	4aa4      	ldr	r2, [pc, #656]	@ (8002400 <ParseQueryCommandLine+0x2d0>)
 8002170:	4619      	mov	r1, r3
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f00b ff72 	bl	800e05c <fmemopen>
 8002178:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8

	GobbleWhiteSpace(pMemFile, pQueryControl->jVerbosity >= jVerbosity_For_GobbleCharacters);  // Gobble any leading white space
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002182:	2b16      	cmp	r3, #22
 8002184:	bfcc      	ite	gt
 8002186:	2301      	movgt	r3, #1
 8002188:	2300      	movle	r3, #0
 800218a:	b2db      	uxtb	r3, r3
 800218c:	4619      	mov	r1, r3
 800218e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8002192:	f000 fdc3 	bl	8002d1c <GobbleWhiteSpace>

	ReturnValue = fscanf(pMemFile, "%s:", sQueryCommand);
 8002196:	f107 0310 	add.w	r3, r7, #16
 800219a:	461a      	mov	r2, r3
 800219c:	4999      	ldr	r1, [pc, #612]	@ (8002404 <ParseQueryCommandLine+0x2d4>)
 800219e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 80021a2:	f00b f9bb 	bl	800d51c <fiscanf>
 80021a6:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
	if (ReturnValue != 1) {
 80021aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d013      	beq.n	80021da <ParseQueryCommandLine+0xaa>
		// In this case we did not get any command string, probably a missing :
	  if (pQueryControl->jVerbosity >= 1) fprintf(stdout, "  ParseLine: Did not get a query command string, possibly missing : \n");
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	dd07      	ble.n	80021cc <ParseQueryCommandLine+0x9c>
 80021bc:	4b8e      	ldr	r3, [pc, #568]	@ (80023f8 <ParseQueryCommandLine+0x2c8>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2245      	movs	r2, #69	@ 0x45
 80021c4:	2101      	movs	r1, #1
 80021c6:	4890      	ldr	r0, [pc, #576]	@ (8002408 <ParseQueryCommandLine+0x2d8>)
 80021c8:	f00b fa26 	bl	800d618 <fwrite>
	  fclose( pMemFile );
 80021cc:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 80021d0:	f00a ff02 	bl	800cfd8 <fclose>
	  return FAILURE;
 80021d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021d8:	e2be      	b.n	8002758 <ParseQueryCommandLine+0x628>
	}

	jColon      = strlen( sQueryCommand ) - 1;
 80021da:	f107 0310 	add.w	r3, r7, #16
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe f866 	bl	80002b0 <strlen>
 80021e4:	4603      	mov	r3, r0
 80021e6:	3b01      	subs	r3, #1
 80021e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	if ( sQueryCommand[jColon] != ':' ) {
 80021ec:	f107 0210 	add.w	r2, r7, #16
 80021f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80021f4:	4413      	add	r3, r2
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b3a      	cmp	r3, #58	@ 0x3a
 80021fa:	d013      	beq.n	8002224 <ParseQueryCommandLine+0xf4>
	  if (pQueryControl->jVerbosity >= 1) fprintf(stdout, "  ParseLine: query command string did not have a : at end (should be impossible)\n");
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002202:	2b00      	cmp	r3, #0
 8002204:	dd07      	ble.n	8002216 <ParseQueryCommandLine+0xe6>
 8002206:	4b7c      	ldr	r3, [pc, #496]	@ (80023f8 <ParseQueryCommandLine+0x2c8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2251      	movs	r2, #81	@ 0x51
 800220e:	2101      	movs	r1, #1
 8002210:	487e      	ldr	r0, [pc, #504]	@ (800240c <ParseQueryCommandLine+0x2dc>)
 8002212:	f00b fa01 	bl	800d618 <fwrite>
	  fclose( pMemFile );
 8002216:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 800221a:	f00a fedd 	bl	800cfd8 <fclose>
	  return -2;
 800221e:	f06f 0301 	mvn.w	r3, #1
 8002222:	e299      	b.n	8002758 <ParseQueryCommandLine+0x628>
	}

	sQueryCommand[ jColon ] = '\0';  //  Replace the final character (a :) with the null termination.
 8002224:	f107 0210 	add.w	r2, r7, #16
 8002228:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800222c:	4413      	add	r3, r2
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]
	ReturnValue = SetQueryCommand( pQueryControl, pQueryCommand, sQueryCommand );
 8002232:	f107 0310 	add.w	r3, r7, #16
 8002236:	461a      	mov	r2, r3
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f7ff fdb0 	bl	8001da0 <SetQueryCommand>
 8002240:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
	if ( ReturnValue != 0)	return ReturnValue;
 8002244:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <ParseQueryCommandLine+0x122>
 800224c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002250:	e282      	b.n	8002758 <ParseQueryCommandLine+0x628>

	if ( pQueryCommand->eQueryCommand == qc_Select || pQueryCommand->eQueryCommand == qc_Add ) {
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002258:	2b01      	cmp	r3, #1
 800225a:	d005      	beq.n	8002268 <ParseQueryCommandLine+0x138>
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002262:	2b02      	cmp	r3, #2
 8002264:	f040 8273 	bne.w	800274e <ParseQueryCommandLine+0x61e>

		// Process a query string
		// First comes the make and model
		ReturnValue = fscanf( pMemFile, "%s %s", pQueryCommand->sMake, pQueryCommand->sModel);
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	330c      	adds	r3, #12
 800226e:	4968      	ldr	r1, [pc, #416]	@ (8002410 <ParseQueryCommandLine+0x2e0>)
 8002270:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8002274:	f00b f952 	bl	800d51c <fiscanf>
 8002278:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
		if (ReturnValue != 2) {
 800227c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002280:	2b02      	cmp	r3, #2
 8002282:	d016      	beq.n	80022b2 <ParseQueryCommandLine+0x182>
		  if (pQueryControl->jVerbosity >= 1) fprintf(stdout, "  ParseLine: Did not get  Make and Model strings.\n");
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800228a:	2b00      	cmp	r3, #0
 800228c:	dd07      	ble.n	800229e <ParseQueryCommandLine+0x16e>
 800228e:	4b5a      	ldr	r3, [pc, #360]	@ (80023f8 <ParseQueryCommandLine+0x2c8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2232      	movs	r2, #50	@ 0x32
 8002296:	2101      	movs	r1, #1
 8002298:	485e      	ldr	r0, [pc, #376]	@ (8002414 <ParseQueryCommandLine+0x2e4>)
 800229a:	f00b f9bd 	bl	800d618 <fwrite>
		  bGotIllFormedString = true;
 800229e:	2301      	movs	r3, #1
 80022a0:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
		  fclose( pMemFile );
 80022a4:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 80022a8:	f00a fe96 	bl	800cfd8 <fclose>
		  PossibleRigorousHalt;
		  return -3;
 80022ac:	f06f 0302 	mvn.w	r3, #2
 80022b0:	e252      	b.n	8002758 <ParseQueryCommandLine+0x628>
		}

		nChars_sModel = strlen( pQueryCommand->sModel );
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	330c      	adds	r3, #12
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fd fffa 	bl	80002b0 <strlen>
 80022bc:	4603      	mov	r3, r0
 80022be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		// Remove possible comma from sModel, and put it back into pMemFile stream.
		if ( pQueryCommand->sModel[ nChars_sModel - 1] == ',' ) {
 80022c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022c6:	3b01      	subs	r3, #1
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	4413      	add	r3, r2
 80022cc:	7b1b      	ldrb	r3, [r3, #12]
 80022ce:	2b2c      	cmp	r3, #44	@ 0x2c
 80022d0:	d118      	bne.n	8002304 <ParseQueryCommandLine+0x1d4>
			pQueryCommand->sModel[ nChars_sModel - 1] = '\0';
 80022d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022d6:	3b01      	subs	r3, #1
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	4413      	add	r3, r2
 80022dc:	2200      	movs	r2, #0
 80022de:	731a      	strb	r2, [r3, #12]
			ungetc(',', pMemFile );
 80022e0:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 80022e4:	202c      	movs	r0, #44	@ 0x2c
 80022e6:	f00b fc8d 	bl	800dc04 <ungetc>
			if (pQueryControl->jVerbosity >= 10) fprintf(stdout, "  ParseLine: Found ',' on sModel string, pushing back onto stream \n");
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80022f0:	2b09      	cmp	r3, #9
 80022f2:	dd07      	ble.n	8002304 <ParseQueryCommandLine+0x1d4>
 80022f4:	4b40      	ldr	r3, [pc, #256]	@ (80023f8 <ParseQueryCommandLine+0x2c8>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2243      	movs	r2, #67	@ 0x43
 80022fc:	2101      	movs	r1, #1
 80022fe:	4846      	ldr	r0, [pc, #280]	@ (8002418 <ParseQueryCommandLine+0x2e8>)
 8002300:	f00b f98a 	bl	800d618 <fwrite>
		}

			// bMakeIsAny and bModelIsAny are initialized to false
		if ( strcasecmp( pQueryCommand->sMake, "Any" ) == 0 )
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	4945      	ldr	r1, [pc, #276]	@ (800241c <ParseQueryCommandLine+0x2ec>)
 8002308:	4618      	mov	r0, r3
 800230a:	f00b feb9 	bl	800e080 <strcasecmp>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d103      	bne.n	800231c <ParseQueryCommandLine+0x1ec>
			pQueryCommand->bMakeIsAny  = true;
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		if ( strcasecmp( pQueryCommand->sModel, "Any" ) == 0 )
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	330c      	adds	r3, #12
 8002320:	493e      	ldr	r1, [pc, #248]	@ (800241c <ParseQueryCommandLine+0x2ec>)
 8002322:	4618      	mov	r0, r3
 8002324:	f00b feac 	bl	800e080 <strcasecmp>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d103      	bne.n	8002336 <ParseQueryCommandLine+0x206>
			pQueryCommand->bModelIsAny = true;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51


		if (pQueryControl->jVerbosity >= 10) fprintf(stdout, "  ParseLine: Got sMake: >%s<, and sModel: >%s< \n", pQueryCommand->sMake, pQueryCommand->sModel);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800233c:	2b09      	cmp	r3, #9
 800233e:	dd08      	ble.n	8002352 <ParseQueryCommandLine+0x222>
 8002340:	4b2d      	ldr	r3, [pc, #180]	@ (80023f8 <ParseQueryCommandLine+0x2c8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6898      	ldr	r0, [r3, #8]
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	330c      	adds	r3, #12
 800234c:	4934      	ldr	r1, [pc, #208]	@ (8002420 <ParseQueryCommandLine+0x2f0>)
 800234e:	f00b f8a7 	bl	800d4a0 <fiprintf>
		GobbleWhiteSpace( pMemFile, pQueryControl->jVerbosity >= jVerbosity_For_GobbleCharacters );  //  Possibly set EOF Flag
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002358:	2b16      	cmp	r3, #22
 800235a:	bfcc      	ite	gt
 800235c:	2301      	movgt	r3, #1
 800235e:	2300      	movle	r3, #0
 8002360:	b2db      	uxtb	r3, r3
 8002362:	4619      	mov	r1, r3
 8002364:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8002368:	f000 fcd8 	bl	8002d1c <GobbleWhiteSpace>

		// A Comma indicates that there is a Category Range
		while ( ! feof( pMemFile ) ) {
 800236c:	e1cf      	b.n	800270e <ParseQueryCommandLine+0x5de>

		  // Try to get next category string.   This may set eof.
		  GobbleCharactersFromBeginningOfStream( pMemFile, " ,", pQueryControl->jVerbosity >= jVerbosity_For_GobbleCharacters);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002374:	2b16      	cmp	r3, #22
 8002376:	bfcc      	ite	gt
 8002378:	2301      	movgt	r3, #1
 800237a:	2300      	movle	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	461a      	mov	r2, r3
 8002380:	4928      	ldr	r1, [pc, #160]	@ (8002424 <ParseQueryCommandLine+0x2f4>)
 8002382:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8002386:	f7ff f8b1 	bl	80014ec <GobbleCharactersFromBeginningOfStream>
		  ReturnValue = fscanf(pMemFile, "%s", sString);
 800238a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800238e:	461a      	mov	r2, r3
 8002390:	4925      	ldr	r1, [pc, #148]	@ (8002428 <ParseQueryCommandLine+0x2f8>)
 8002392:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8002396:	f00b f8c1 	bl	800d51c <fiscanf>
 800239a:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
		  if (ReturnValue != 1) {
 800239e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d046      	beq.n	8002434 <ParseQueryCommandLine+0x304>
		    // This is typically how we will exit the loop
			if ( feof(pMemFile) ) {
 80023a6:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 80023aa:	f00a fe1d 	bl	800cfe8 <feof>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d010      	beq.n	80023d6 <ParseQueryCommandLine+0x2a6>
				if (pQueryControl->jVerbosity >= 11) fprintf(stdout, "ParseLine:  Got to the end of the line scanning for Category label, possibly missing ',' \n");
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80023ba:	2b0a      	cmp	r3, #10
 80023bc:	dd07      	ble.n	80023ce <ParseQueryCommandLine+0x29e>
 80023be:	4b0e      	ldr	r3, [pc, #56]	@ (80023f8 <ParseQueryCommandLine+0x2c8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	225a      	movs	r2, #90	@ 0x5a
 80023c6:	2101      	movs	r1, #1
 80023c8:	4818      	ldr	r0, [pc, #96]	@ (800242c <ParseQueryCommandLine+0x2fc>)
 80023ca:	f00b f925 	bl	800d618 <fwrite>
				bGotIllFormedString = true;
 80023ce:	2301      	movs	r3, #1
 80023d0:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
				PossibleRigorousHalt;
				break;
 80023d4:	e1a3      	b.n	800271e <ParseQueryCommandLine+0x5ee>
			}

			if (pQueryControl->jVerbosity >= 11) fprintf(stderr, "  ParseLine:  did not get a Category label, possibly missing ','  \n");
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80023dc:	2b0a      	cmp	r3, #10
 80023de:	dd07      	ble.n	80023f0 <ParseQueryCommandLine+0x2c0>
 80023e0:	4b05      	ldr	r3, [pc, #20]	@ (80023f8 <ParseQueryCommandLine+0x2c8>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	2243      	movs	r2, #67	@ 0x43
 80023e8:	2101      	movs	r1, #1
 80023ea:	4811      	ldr	r0, [pc, #68]	@ (8002430 <ParseQueryCommandLine+0x300>)
 80023ec:	f00b f914 	bl	800d618 <fwrite>
			bGotIllFormedString = true;
 80023f0:	2301      	movs	r3, #1
 80023f2:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
			PossibleRigorousHalt;
			break;
 80023f6:	e192      	b.n	800271e <ParseQueryCommandLine+0x5ee>
 80023f8:	2000003c 	.word	0x2000003c
 80023fc:	08012198 	.word	0x08012198
 8002400:	08011ed0 	.word	0x08011ed0
 8002404:	080121b4 	.word	0x080121b4
 8002408:	080121b8 	.word	0x080121b8
 800240c:	08012200 	.word	0x08012200
 8002410:	08011ef8 	.word	0x08011ef8
 8002414:	08012254 	.word	0x08012254
 8002418:	08012288 	.word	0x08012288
 800241c:	080122cc 	.word	0x080122cc
 8002420:	080122d0 	.word	0x080122d0
 8002424:	08012304 	.word	0x08012304
 8002428:	08011ed4 	.word	0x08011ed4
 800242c:	08012308 	.word	0x08012308
 8002430:	08012364 	.word	0x08012364
		  }

			// Determine and set the enum for this category range
		  	// nCategoryRanges is the index to the Category Range currently being populated
		 if (pQueryControl->jVerbosity >= 11) fprintf(stdout, "  ParseLine:  got Category label: >%s< \n", sString);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800243a:	2b0a      	cmp	r3, #10
 800243c:	dd08      	ble.n	8002450 <ParseQueryCommandLine+0x320>
 800243e:	4b99      	ldr	r3, [pc, #612]	@ (80026a4 <ParseQueryCommandLine+0x574>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002448:	4997      	ldr	r1, [pc, #604]	@ (80026a8 <ParseQueryCommandLine+0x578>)
 800244a:	4618      	mov	r0, r3
 800244c:	f00b f828 	bl	800d4a0 <fiprintf>
		 ReturnValue = SetCategoryLabel( pQueryControl, &(pQueryCommand->CategoryRanges[ pQueryCommand->nCategoryRanges]), sString );
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002454:	3303      	adds	r3, #3
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	4413      	add	r3, r2
 800245c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002460:	4619      	mov	r1, r3
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f7ff fd54 	bl	8001f10 <SetCategoryLabel>
 8002468:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
		 if ( ReturnValue != 0)  {
 800246c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d010      	beq.n	8002496 <ParseQueryCommandLine+0x366>
			if (pQueryControl->jVerbosity >= 11) fprintf(stdout, "ParseLine: did not get a valid Category label \n");
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800247a:	2b0a      	cmp	r3, #10
 800247c:	dd07      	ble.n	800248e <ParseQueryCommandLine+0x35e>
 800247e:	4b89      	ldr	r3, [pc, #548]	@ (80026a4 <ParseQueryCommandLine+0x574>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	222f      	movs	r2, #47	@ 0x2f
 8002486:	2101      	movs	r1, #1
 8002488:	4888      	ldr	r0, [pc, #544]	@ (80026ac <ParseQueryCommandLine+0x57c>)
 800248a:	f00b f8c5 	bl	800d618 <fwrite>
			bGotIllFormedString = true;
 800248e:	2301      	movs	r3, #1
 8002490:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
			PossibleRigorousHalt;
			break;
 8002494:	e143      	b.n	800271e <ParseQueryCommandLine+0x5ee>
		 }

		   // Scan for relation
		 ReturnValue = fscanf(pMemFile, "%s", sString);
 8002496:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800249a:	461a      	mov	r2, r3
 800249c:	4984      	ldr	r1, [pc, #528]	@ (80026b0 <ParseQueryCommandLine+0x580>)
 800249e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 80024a2:	f00b f83b 	bl	800d51c <fiscanf>
 80024a6:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
		 if (ReturnValue != 1) {
 80024aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d00b      	beq.n	80024ca <ParseQueryCommandLine+0x39a>
		   fprintf(stderr, "ParseLine: Did not get relation string \n");
 80024b2:	4b7c      	ldr	r3, [pc, #496]	@ (80026a4 <ParseQueryCommandLine+0x574>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2228      	movs	r2, #40	@ 0x28
 80024ba:	2101      	movs	r1, #1
 80024bc:	487d      	ldr	r0, [pc, #500]	@ (80026b4 <ParseQueryCommandLine+0x584>)
 80024be:	f00b f8ab 	bl	800d618 <fwrite>
			bGotIllFormedString = true;
 80024c2:	2301      	movs	r3, #1
 80024c4:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
			PossibleRigorousHalt;
			break;
 80024c8:	e129      	b.n	800271e <ParseQueryCommandLine+0x5ee>
		  }

		  // Determine and set the enum for this category range
		 if (pQueryControl->jVerbosity >= 11) fprintf(stdout, "ParseLine:  Got Relation string: '%s' \n", sString);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80024d0:	2b0a      	cmp	r3, #10
 80024d2:	dd08      	ble.n	80024e6 <ParseQueryCommandLine+0x3b6>
 80024d4:	4b73      	ldr	r3, [pc, #460]	@ (80026a4 <ParseQueryCommandLine+0x574>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80024de:	4976      	ldr	r1, [pc, #472]	@ (80026b8 <ParseQueryCommandLine+0x588>)
 80024e0:	4618      	mov	r0, r3
 80024e2:	f00a ffdd 	bl	800d4a0 <fiprintf>
		 SetRelationalOperator( pQueryControl, &(pQueryCommand->CategoryRanges[ pQueryCommand->nCategoryRanges]), sString );
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ea:	3303      	adds	r3, #3
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	4413      	add	r3, r2
 80024f2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80024f6:	4619      	mov	r1, r3
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f7ff fd8f 	bl	800201c <SetRelationalOperator>
		 if (pQueryControl->jVerbosity >= 11) fprintf(stdout, "  ParseLine:  Got Relation: %s \n",
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002504:	2b0a      	cmp	r3, #10
 8002506:	dd12      	ble.n	800252e <ParseQueryCommandLine+0x3fe>
 8002508:	4b66      	ldr	r3, [pc, #408]	@ (80026a4 <ParseQueryCommandLine+0x574>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689c      	ldr	r4, [r3, #8]
				  GetRelationOperator( pQueryCommand->CategoryRanges[ pQueryCommand->nCategoryRanges].eRelation ) );
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
		 if (pQueryControl->jVerbosity >= 11) fprintf(stdout, "  ParseLine:  Got Relation: %s \n",
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	3303      	adds	r3, #3
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4413      	add	r3, r2
 800251a:	785b      	ldrb	r3, [r3, #1]
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff fdcd 	bl	80020bc <GetRelationOperator>
 8002522:	4603      	mov	r3, r0
 8002524:	461a      	mov	r2, r3
 8002526:	4965      	ldr	r1, [pc, #404]	@ (80026bc <ParseQueryCommandLine+0x58c>)
 8002528:	4620      	mov	r0, r4
 800252a:	f00a ffb9 	bl	800d4a0 <fiprintf>

		 	 // Now scan for the value
		 if ( pQueryCommand->CategoryRanges[ pQueryCommand->nCategoryRanges].eCategoryLabel != cl_Status ) {
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	3203      	adds	r2, #3
 8002536:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 800253a:	2b05      	cmp	r3, #5
 800253c:	d039      	beq.n	80025b2 <ParseQueryCommandLine+0x482>

		     ReturnValue = fscanf(pMemFile, "%f", &(pQueryCommand->CategoryRanges[ pQueryCommand->nCategoryRanges].Value));
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002542:	3303      	adds	r3, #3
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	4413      	add	r3, r2
 800254a:	3304      	adds	r3, #4
 800254c:	461a      	mov	r2, r3
 800254e:	495c      	ldr	r1, [pc, #368]	@ (80026c0 <ParseQueryCommandLine+0x590>)
 8002550:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8002554:	f00a ffe2 	bl	800d51c <fiscanf>
 8002558:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
			 if (ReturnValue != 1) {
 800255c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002560:	2b01      	cmp	r3, #1
 8002562:	d00b      	beq.n	800257c <ParseQueryCommandLine+0x44c>
			   fprintf(stderr, "ParseLine: Did not get a value \n");
 8002564:	4b4f      	ldr	r3, [pc, #316]	@ (80026a4 <ParseQueryCommandLine+0x574>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	2220      	movs	r2, #32
 800256c:	2101      	movs	r1, #1
 800256e:	4855      	ldr	r0, [pc, #340]	@ (80026c4 <ParseQueryCommandLine+0x594>)
 8002570:	f00b f852 	bl	800d618 <fwrite>
				bGotIllFormedString = true;
 8002574:	2301      	movs	r3, #1
 8002576:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
				PossibleRigorousHalt;
				break;
 800257a:	e0d0      	b.n	800271e <ParseQueryCommandLine+0x5ee>
			  }

		     if (pQueryControl->jVerbosity >= 11) fprintf(stdout, "  ParseLine:  Got Value: %4.1f \n",
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002582:	2b0a      	cmp	r3, #10
 8002584:	f340 80b1 	ble.w	80026ea <ParseQueryCommandLine+0x5ba>
 8002588:	4b46      	ldr	r3, [pc, #280]	@ (80026a4 <ParseQueryCommandLine+0x574>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689c      	ldr	r4, [r3, #8]
		    		 	 	 	 	 	 	 	 	 	  pQueryCommand->CategoryRanges[ pQueryCommand->nCategoryRanges].Value);
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	3303      	adds	r3, #3
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4413      	add	r3, r2
 800259a:	3304      	adds	r3, #4
 800259c:	681b      	ldr	r3, [r3, #0]
		     if (pQueryControl->jVerbosity >= 11) fprintf(stdout, "  ParseLine:  Got Value: %4.1f \n",
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fd fff2 	bl	8000588 <__aeabi_f2d>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4947      	ldr	r1, [pc, #284]	@ (80026c8 <ParseQueryCommandLine+0x598>)
 80025aa:	4620      	mov	r0, r4
 80025ac:	f00a ff78 	bl	800d4a0 <fiprintf>
 80025b0:	e09b      	b.n	80026ea <ParseQueryCommandLine+0x5ba>

		 } else {
			 //  We do have cl_Status
			 // Check that our relation is EqualTo
			 if ( pQueryCommand->CategoryRanges[ pQueryCommand->nCategoryRanges].eRelation  != re_EqualTo ) {
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	3303      	adds	r3, #3
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	4413      	add	r3, r2
 80025be:	785b      	ldrb	r3, [r3, #1]
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d00b      	beq.n	80025dc <ParseQueryCommandLine+0x4ac>
			   fprintf(stderr, "ParseLine: Did not get Relation EqualTo with Category label Status. \n");
 80025c4:	4b37      	ldr	r3, [pc, #220]	@ (80026a4 <ParseQueryCommandLine+0x574>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	2245      	movs	r2, #69	@ 0x45
 80025cc:	2101      	movs	r1, #1
 80025ce:	483f      	ldr	r0, [pc, #252]	@ (80026cc <ParseQueryCommandLine+0x59c>)
 80025d0:	f00b f822 	bl	800d618 <fwrite>
			   bGotIllFormedString = true;
 80025d4:	2301      	movs	r3, #1
 80025d6:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
				PossibleRigorousHalt;
			   break;
 80025da:	e0a0      	b.n	800271e <ParseQueryCommandLine+0x5ee>
			 }

			 ReturnValue = fscanf(pMemFile, "%s", sString);
 80025dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025e0:	461a      	mov	r2, r3
 80025e2:	4933      	ldr	r1, [pc, #204]	@ (80026b0 <ParseQueryCommandLine+0x580>)
 80025e4:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 80025e8:	f00a ff98 	bl	800d51c <fiscanf>
 80025ec:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
			 SuppressCharactersOffEndOfString(sString, ",", pQueryControl->jVerbosity>=jVerbosity_For_SuppressCharacters);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80025f6:	2b18      	cmp	r3, #24
 80025f8:	bfcc      	ite	gt
 80025fa:	2301      	movgt	r3, #1
 80025fc:	2300      	movle	r3, #0
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002604:	4932      	ldr	r1, [pc, #200]	@ (80026d0 <ParseQueryCommandLine+0x5a0>)
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe ff0a 	bl	8001420 <SuppressCharactersOffEndOfString>

			 if ( stricmp(sString, "New" ) == 0)  //  Case insensitive comparison
 800260c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002610:	4930      	ldr	r1, [pc, #192]	@ (80026d4 <ParseQueryCommandLine+0x5a4>)
 8002612:	4618      	mov	r0, r3
 8002614:	f00b fd34 	bl	800e080 <strcasecmp>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10a      	bne.n	8002634 <ParseQueryCommandLine+0x504>
				 //  1 for New  (matchine bCarIsNew
				 pQueryCommand->CategoryRanges[ pQueryCommand->nCategoryRanges].Value = 1;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	3303      	adds	r3, #3
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4413      	add	r3, r2
 800262a:	3304      	adds	r3, #4
 800262c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	e01f      	b.n	8002674 <ParseQueryCommandLine+0x544>
			  else if ( stricmp(sString, "Used" ) == 0)
 8002634:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002638:	4927      	ldr	r1, [pc, #156]	@ (80026d8 <ParseQueryCommandLine+0x5a8>)
 800263a:	4618      	mov	r0, r3
 800263c:	f00b fd20 	bl	800e080 <strcasecmp>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10a      	bne.n	800265c <ParseQueryCommandLine+0x52c>
				  // 0 for Used
				  pQueryCommand->CategoryRanges[ pQueryCommand->nCategoryRanges].Value = 0;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	3303      	adds	r3, #3
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	4413      	add	r3, r2
 8002652:	3304      	adds	r3, #4
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	e00b      	b.n	8002674 <ParseQueryCommandLine+0x544>
			  else {
			    fprintf(stderr, "ParseLine: Did not get New or Used as value for Status. \n");
 800265c:	4b11      	ldr	r3, [pc, #68]	@ (80026a4 <ParseQueryCommandLine+0x574>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	2239      	movs	r2, #57	@ 0x39
 8002664:	2101      	movs	r1, #1
 8002666:	481d      	ldr	r0, [pc, #116]	@ (80026dc <ParseQueryCommandLine+0x5ac>)
 8002668:	f00a ffd6 	bl	800d618 <fwrite>
			    bGotIllFormedString = true;
 800266c:	2301      	movs	r3, #1
 800266e:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
				PossibleRigorousHalt;
			    break;
 8002672:	e054      	b.n	800271e <ParseQueryCommandLine+0x5ee>
			  }
		      if (pQueryControl->jVerbosity >= 11) fprintf(stdout, "  ParseLine:  Got Car Status of %s \n",
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800267a:	2b0a      	cmp	r3, #10
 800267c:	dd35      	ble.n	80026ea <ParseQueryCommandLine+0x5ba>
 800267e:	4b09      	ldr	r3, [pc, #36]	@ (80026a4 <ParseQueryCommandLine+0x574>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6898      	ldr	r0, [r3, #8]
					 (  pQueryCommand->CategoryRanges[ pQueryCommand->nCategoryRanges].Value != 0 ? "New" : "Used") );
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	3303      	adds	r3, #3
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	4413      	add	r3, r2
 8002690:	3304      	adds	r3, #4
 8002692:	edd3 7a00 	vldr	s15, [r3]
		      if (pQueryControl->jVerbosity >= 11) fprintf(stdout, "  ParseLine:  Got Car Status of %s \n",
 8002696:	eef5 7a40 	vcmp.f32	s15, #0.0
 800269a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800269e:	d01f      	beq.n	80026e0 <ParseQueryCommandLine+0x5b0>
 80026a0:	4b0c      	ldr	r3, [pc, #48]	@ (80026d4 <ParseQueryCommandLine+0x5a4>)
 80026a2:	e01e      	b.n	80026e2 <ParseQueryCommandLine+0x5b2>
 80026a4:	2000003c 	.word	0x2000003c
 80026a8:	080123a8 	.word	0x080123a8
 80026ac:	080123d4 	.word	0x080123d4
 80026b0:	08011ed4 	.word	0x08011ed4
 80026b4:	08012404 	.word	0x08012404
 80026b8:	08012430 	.word	0x08012430
 80026bc:	08012458 	.word	0x08012458
 80026c0:	0801247c 	.word	0x0801247c
 80026c4:	08012480 	.word	0x08012480
 80026c8:	080124a4 	.word	0x080124a4
 80026cc:	080124c8 	.word	0x080124c8
 80026d0:	08011f00 	.word	0x08011f00
 80026d4:	08011f5c 	.word	0x08011f5c
 80026d8:	08012510 	.word	0x08012510
 80026dc:	08012518 	.word	0x08012518
 80026e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002760 <ParseQueryCommandLine+0x630>)
 80026e2:	461a      	mov	r2, r3
 80026e4:	491f      	ldr	r1, [pc, #124]	@ (8002764 <ParseQueryCommandLine+0x634>)
 80026e6:	f00a fedb 	bl	800d4a0 <fiprintf>
		 }  //  if ( pQueryCommand->CategoryRanges[ pQueryCommand->nCategoryRanges].eCategoryLabel != cl_Status )


		 // Get ready to process the next Category Range
		 GobbleWhiteSpace( pMemFile, pQueryControl->jVerbosity >= jVerbosity_For_GobbleCharacters);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80026f0:	2b16      	cmp	r3, #22
 80026f2:	bfcc      	ite	gt
 80026f4:	2301      	movgt	r3, #1
 80026f6:	2300      	movle	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	4619      	mov	r1, r3
 80026fc:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8002700:	f000 fb0c 	bl	8002d1c <GobbleWhiteSpace>
		 pQueryCommand->nCategoryRanges++;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	64da      	str	r2, [r3, #76]	@ 0x4c
		while ( ! feof( pMemFile ) ) {
 800270e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8002712:	f00a fc69 	bl	800cfe8 <feof>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	f43f ae28 	beq.w	800236e <ParseQueryCommandLine+0x23e>
		}  //  while ( !feof(pMemFile) )

		if ( bGotIllFormedString ) {
 800271e:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8002722:	2b00      	cmp	r3, #0
 8002724:	d013      	beq.n	800274e <ParseQueryCommandLine+0x61e>
		   if (pQueryControl->jVerbosity >= 1) fprintf(stderr, "  ParseLine:  Got an Ill Formed String, >%s< \n", sInputString);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800272c:	2b00      	cmp	r3, #0
 800272e:	dd07      	ble.n	8002740 <ParseQueryCommandLine+0x610>
 8002730:	4b0d      	ldr	r3, [pc, #52]	@ (8002768 <ParseQueryCommandLine+0x638>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	490c      	ldr	r1, [pc, #48]	@ (800276c <ParseQueryCommandLine+0x63c>)
 800273a:	4618      	mov	r0, r3
 800273c:	f00a feb0 	bl	800d4a0 <fiprintf>
		   fclose( pMemFile );
 8002740:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8002744:	f00a fc48 	bl	800cfd8 <fclose>
		   return FAILURE;
 8002748:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800274c:	e004      	b.n	8002758 <ParseQueryCommandLine+0x628>
		}
	}  // 	if ( pQueryCommand->eQueryCommand == qc_Select || pQueryCommand->eQueryCommand == qc_Add )

	fclose( pMemFile );
 800274e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8002752:	f00a fc41 	bl	800cfd8 <fclose>
	return SUCCESS;
 8002756:	2300      	movs	r3, #0
}  //  ParseQueryCommandLine
 8002758:	4618      	mov	r0, r3
 800275a:	37c4      	adds	r7, #196	@ 0xc4
 800275c:	46bd      	mov	sp, r7
 800275e:	bd90      	pop	{r4, r7, pc}
 8002760:	08012510 	.word	0x08012510
 8002764:	08012554 	.word	0x08012554
 8002768:	2000003c 	.word	0x2000003c
 800276c:	0801257c 	.word	0x0801257c

08002770 <sNewOrUsed>:
 *  sNewOrUsed			Return string "New" or "Used"
 * Inputs:              boolean bIsNew
 * Outputs:             Pointer to "New" if bIsNew is true, else pointer to "Used"
 * Side Effects:        none
********************************/
char * sNewOrUsed(bool bIsNew) {
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]
	if ( bIsNew )
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <sNewOrUsed+0x14>
		return "New";
 8002780:	4b04      	ldr	r3, [pc, #16]	@ (8002794 <sNewOrUsed+0x24>)
 8002782:	e000      	b.n	8002786 <sNewOrUsed+0x16>
	else
		return "Used";
 8002784:	4b04      	ldr	r3, [pc, #16]	@ (8002798 <sNewOrUsed+0x28>)
}  //  sNewOrUsed
 8002786:	4618      	mov	r0, r3
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	08011f5c 	.word	0x08011f5c
 8002798:	08012510 	.word	0x08012510

0800279c <ReceiveAListOfCarRecords>:


CarListNode_t * ReceiveAListOfCarRecords( CarRecord_t *pCarRecords, int nSpaceForCarRecords, int jSelfHandshakeBit, int jOtherHandshakeBit, int jVerbosity ) {
 800279c:	b580      	push	{r7, lr}
 800279e:	b0ac      	sub	sp, #176	@ 0xb0
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	603b      	str	r3, [r7, #0]
	CarListNode_t   * pCarDatabase = NULL,  * pCarListTail = NULL, * pCarListNode;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80027b0:	2300      	movs	r3, #0
 80027b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

	FILE * pFileIn;
	char * pFgetsReturnValue;
	char sStringIn[ N_InputCharacters ];
	bool	bKeepGoing;
	int   nCarRecords = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (jVerbosity >= 10) fprintf(stdout, "\n"); // Put a blank line in, to separate from other material
 80027bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027c0:	2b09      	cmp	r3, #9
 80027c2:	dd06      	ble.n	80027d2 <ReceiveAListOfCarRecords+0x36>
 80027c4:	4b5d      	ldr	r3, [pc, #372]	@ (800293c <ReceiveAListOfCarRecords+0x1a0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	4619      	mov	r1, r3
 80027cc:	200a      	movs	r0, #10
 80027ce:	f00a fe9d 	bl	800d50c <fputc>

	bKeepGoing = true;
 80027d2:	2301      	movs	r3, #1
 80027d4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	while ( bKeepGoing ) {
 80027d8:	e0a5      	b.n	8002926 <ReceiveAListOfCarRecords+0x18a>

		while ( ReadInBit(jOtherHandshakeBit) != 1 )        	// An error occurs if Student computer is booted while the Assesssment computer is mid-test
			FlashNUCLEO_LED(jNUCLEO_GreenLED);	// So block here until assessment computer reaches state 1
 80027da:	2001      	movs	r0, #1
 80027dc:	f000 fb51 	bl	8002e82 <FlashNUCLEO_LED>
		while ( ReadInBit(jOtherHandshakeBit) != 1 )        	// An error occurs if Student computer is booted while the Assesssment computer is mid-test
 80027e0:	6838      	ldr	r0, [r7, #0]
 80027e2:	f000 fbc3 	bl	8002f6c <ReadInBit>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d1f6      	bne.n	80027da <ReceiveAListOfCarRecords+0x3e>
		WriteNUCLEO_LED(jNUCLEO_GreenLED, 0);
 80027ec:	2100      	movs	r1, #0
 80027ee:	2001      	movs	r0, #1
 80027f0:	f000 fafa 	bl	8002de8 <WriteNUCLEO_LED>

		// State 1
		ReturnValue = Start_UART5_Reception();
 80027f4:	f000 fdd2 	bl	800339c <Start_UART5_Reception>
 80027f8:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
		WriteNUCLEO_LED(jNUCLEO_BlueLED, 1);  // Indicates listening
 80027fc:	2101      	movs	r1, #1
 80027fe:	2002      	movs	r0, #2
 8002800:	f000 faf2 	bl	8002de8 <WriteNUCLEO_LED>

		// State 2
		WriteOutBit(jSelfHandshakeBit, 1);  // Raise handshake bit
 8002804:	2101      	movs	r1, #1
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 fb54 	bl	8002eb4 <WriteOutBit>

		// State 21, Assessment Computer done transmitting.
		while ( ReadInBit(jOtherHandshakeBit) != 0 )        	// An error occurs if Student computer is booted while the Assesssment computer is mid-test
 800280c:	e002      	b.n	8002814 <ReceiveAListOfCarRecords+0x78>
			FlashNUCLEO_LED(jNUCLEO_BlueLED);	// So block here until assessment computer reaches state 1
 800280e:	2002      	movs	r0, #2
 8002810:	f000 fb37 	bl	8002e82 <FlashNUCLEO_LED>
		while ( ReadInBit(jOtherHandshakeBit) != 0 )        	// An error occurs if Student computer is booted while the Assesssment computer is mid-test
 8002814:	6838      	ldr	r0, [r7, #0]
 8002816:	f000 fba9 	bl	8002f6c <ReadInBit>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f6      	bne.n	800280e <ReceiveAListOfCarRecords+0x72>

		ReturnValue       = Stop_UART5_Reception();
 8002820:	f000 fde0 	bl	80033e4 <Stop_UART5_Reception>
 8002824:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
		// State 22
		WriteOutBit(jSelfHandshakeBit, 0);  // Lower handshake bit
 8002828:	2100      	movs	r1, #0
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fb42 	bl	8002eb4 <WriteOutBit>

		pFileIn           = UART5_OpenInStream();
 8002830:	f000 fe24 	bl	800347c <UART5_OpenInStream>
 8002834:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
		pFgetsReturnValue = fgets(sStringIn, N_InputCharacters, pFileIn);
 8002838:	f107 0310 	add.w	r3, r7, #16
 800283c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002840:	2180      	movs	r1, #128	@ 0x80
 8002842:	4618      	mov	r0, r3
 8002844:	f00a fd2c 	bl	800d2a0 <fgets>
 8002848:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
		fclose(pFileIn);
 800284c:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8002850:	f00a fbc2 	bl	800cfd8 <fclose>
		Initialize_cBufferIn( ' ' );
 8002854:	2020      	movs	r0, #32
 8002856:	f000 fe89 	bl	800356c <Initialize_cBufferIn>

		if ( nCarRecords >= nSpaceForCarRecords )
 800285a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	429a      	cmp	r2, r3
 8002862:	db01      	blt.n	8002868 <ReceiveAListOfCarRecords+0xcc>
			while (1) ;   // More car records transmitted than maximum capacity
 8002864:	bf00      	nop
 8002866:	e7fd      	b.n	8002864 <ReceiveAListOfCarRecords+0xc8>
		ReturnValue = ParseStringPopulateCarRecord( &pCarRecords[nCarRecords], sStringIn, jVerbosity);
 8002868:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800286c:	015b      	lsls	r3, r3, #5
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4413      	add	r3, r2
 8002872:	f107 0110 	add.w	r1, r7, #16
 8002876:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe fed0 	bl	8001620 <ParseStringPopulateCarRecord>
 8002880:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
		if (ReturnValue == 0) {
 8002884:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002888:	2b00      	cmp	r3, #0
 800288a:	d135      	bne.n	80028f8 <ReceiveAListOfCarRecords+0x15c>
			// In this case, add the car record to the Car Database
			// Note that the database is a linked list, while pCarRecords is an array
			// Allocate a new node structure.   Then initialize it, and add it to the list.
			pCarListNode =  malloc ( sizeof( CarListNode_t ) );
 800288c:	2008      	movs	r0, #8
 800288e:	f009 fc23 	bl	800c0d8 <malloc>
 8002892:	4603      	mov	r3, r0
 8002894:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			if ( pCarListNode == NULL ) {
 8002898:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <ReceiveAListOfCarRecords+0x108>
				while (1) ;   // Malloc Error
 80028a0:	bf00      	nop
 80028a2:	e7fd      	b.n	80028a0 <ReceiveAListOfCarRecords+0x104>
			} else {
				memset( pCarListNode, 0, sizeof( CarListNode_t) );
 80028a4:	2208      	movs	r2, #8
 80028a6:	2100      	movs	r1, #0
 80028a8:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80028ac:	f00b fbe0 	bl	800e070 <memset>
				pCarListNode->pCarRecord = &( pCarRecords[nCarRecords] );
 80028b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028b4:	015b      	lsls	r3, r3, #5
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	441a      	add	r2, r3
 80028ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028be:	601a      	str	r2, [r3, #0]
				if (pCarDatabase == NULL) {
 80028c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d108      	bne.n	80028da <ReceiveAListOfCarRecords+0x13e>
					pCarDatabase = pCarListNode;
 80028c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
					pCarListTail  = pCarListNode;
 80028d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80028d8:	e008      	b.n	80028ec <ReceiveAListOfCarRecords+0x150>
				} else {
					pCarListTail->pNextCarListNode = pCarListNode;
 80028da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028de:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80028e2:	605a      	str	r2, [r3, #4]
					pCarListTail                   = pCarListNode;
 80028e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				}
			}
			nCarRecords++;
 80028ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028f0:	3301      	adds	r3, #1
 80028f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80028f6:	e00c      	b.n	8002912 <ReceiveAListOfCarRecords+0x176>
		} else if (ReturnValue == EOF)
 80028f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002900:	d103      	bne.n	800290a <ReceiveAListOfCarRecords+0x16e>
			bKeepGoing = false;
 8002902:	2300      	movs	r3, #0
 8002904:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8002908:	e003      	b.n	8002912 <ReceiveAListOfCarRecords+0x176>
		else
			while (1) ;  // Error, 0 and EOF should be only possibilities
 800290a:	e7fe      	b.n	800290a <ReceiveAListOfCarRecords+0x16e>

		//  Wait for State 1,  Wait for OutBit1 to go to 1
		while ( bKeepGoing && ReadInBit(jOtherHandshakeBit) != 1 )
			FlashNUCLEO_LED(jNUCLEO_RedLED);
 800290c:	2003      	movs	r0, #3
 800290e:	f000 fab8 	bl	8002e82 <FlashNUCLEO_LED>
		while ( bKeepGoing && ReadInBit(jOtherHandshakeBit) != 1 )
 8002912:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <ReceiveAListOfCarRecords+0x18a>
 800291a:	6838      	ldr	r0, [r7, #0]
 800291c:	f000 fb26 	bl	8002f6c <ReadInBit>
 8002920:	4603      	mov	r3, r0
 8002922:	2b01      	cmp	r3, #1
 8002924:	d1f2      	bne.n	800290c <ReceiveAListOfCarRecords+0x170>
	while ( bKeepGoing ) {
 8002926:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800292a:	2b00      	cmp	r3, #0
 800292c:	f47f af58 	bne.w	80027e0 <ReceiveAListOfCarRecords+0x44>

	}  // while bKeepGoing
	return pCarDatabase;
 8002930:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
} // ReceiveAListOfCarRecords
 8002934:	4618      	mov	r0, r3
 8002936:	37b0      	adds	r7, #176	@ 0xb0
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	2000003c 	.word	0x2000003c

08002940 <Transmit_CarRecords>:
 *  Transmit_CarRecords  Transmit Car Records on UART5, with Bit0 / Bit1 handshaking
 * Inputs:              none
 * Outputs:             Number of Car Records transmitted
 * Side Effects:        none
********************************/
int Transmit_CarRecords( CarListNode_t *pCarList, int jSelfHandshakeBit, int jOtherHandshakeBit, int jVerbosity ) {
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	603b      	str	r3, [r7, #0]
  int jCarRecord = 0;
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
  CarListNode_t * pWorkingCarNode = pCarList;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	61bb      	str	r3, [r7, #24]
  int nCarRecordsTransmitted = 0;
 8002956:	2300      	movs	r3, #0
 8002958:	617b      	str	r3, [r7, #20]
  char	sHD44780String[N_InputCharacters];
  //                                         01234567890123456789
  HD44780_SetCursor(0,2);  HD44780_PrintStr(" Transmitting dB");
#endif

  while ( pWorkingCarNode != NULL ) {
 800295a:	e046      	b.n	80029ea <Transmit_CarRecords+0xaa>

	  //State 21
	  WriteOutBit(jSelfHandshakeBit, 1);  // Raise handshake bit
 800295c:	2101      	movs	r1, #1
 800295e:	68b8      	ldr	r0, [r7, #8]
 8002960:	f000 faa8 	bl	8002eb4 <WriteOutBit>

	 		  //Wait for State 22, ready to receive
	  while ( ReadInBit(jOtherHandshakeBit) != 1 )
 8002964:	e002      	b.n	800296c <Transmit_CarRecords+0x2c>
		  FlashNUCLEO_LED(jNUCLEO_BlueLED);
 8002966:	2002      	movs	r0, #2
 8002968:	f000 fa8b 	bl	8002e82 <FlashNUCLEO_LED>
	  while ( ReadInBit(jOtherHandshakeBit) != 1 )
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 fafd 	bl	8002f6c <ReadInBit>
 8002972:	4603      	mov	r3, r0
 8002974:	2b01      	cmp	r3, #1
 8002976:	d1f6      	bne.n	8002966 <Transmit_CarRecords+0x26>

	  if (jVerbosity >= 10) {
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	2b09      	cmp	r3, #9
 800297c:	dd10      	ble.n	80029a0 <Transmit_CarRecords+0x60>
		  fprintf(stdout, "Transmit_CarRecords %3d \n", jCarRecord);
 800297e:	4b33      	ldr	r3, [pc, #204]	@ (8002a4c <Transmit_CarRecords+0x10c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	69fa      	ldr	r2, [r7, #28]
 8002986:	4932      	ldr	r1, [pc, #200]	@ (8002a50 <Transmit_CarRecords+0x110>)
 8002988:	4618      	mov	r0, r3
 800298a:	f00a fd89 	bl	800d4a0 <fiprintf>
		  PrettyPrintACar( stdout, pWorkingCarNode->pCarRecord );
 800298e:	4b2f      	ldr	r3, [pc, #188]	@ (8002a4c <Transmit_CarRecords+0x10c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4619      	mov	r1, r3
 800299a:	4610      	mov	r0, r2
 800299c:	f000 f876 	bl	8002a8c <PrettyPrintACar>
	  }

	  // Transmit in State 22
	  pFileOut = UART5_OpenOutStream();
 80029a0:	f000 fda0 	bl	80034e4 <UART5_OpenOutStream>
 80029a4:	6138      	str	r0, [r7, #16]
	  PrettyPrintACar( pFileOut, pWorkingCarNode->pCarRecord );
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4619      	mov	r1, r3
 80029ac:	6938      	ldr	r0, [r7, #16]
 80029ae:	f000 f86d 	bl	8002a8c <PrettyPrintACar>
	  UART5_CloseOutStream( pFileOut );
 80029b2:	6938      	ldr	r0, [r7, #16]
 80029b4:	f000 fdb2 	bl	800351c <UART5_CloseOutStream>
	  BlockingTransmit_cBufferOut( );
 80029b8:	f000 fd2c 	bl	8003414 <BlockingTransmit_cBufferOut>

	  //State 23, transmit finished
	  WriteOutBit(jSelfHandshakeBit, 0);  // Lower handshake bit, indicating sent
 80029bc:	2100      	movs	r1, #0
 80029be:	68b8      	ldr	r0, [r7, #8]
 80029c0:	f000 fa78 	bl	8002eb4 <WriteOutBit>

	  // Wait for State 24, Receive finished.
	  while ( ReadInBit(jOtherHandshakeBit) != 0 )
 80029c4:	e002      	b.n	80029cc <Transmit_CarRecords+0x8c>
			FlashNUCLEO_LED(jNUCLEO_BlueLED);
 80029c6:	2002      	movs	r0, #2
 80029c8:	f000 fa5b 	bl	8002e82 <FlashNUCLEO_LED>
	  while ( ReadInBit(jOtherHandshakeBit) != 0 )
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 facd 	bl	8002f6c <ReadInBit>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1f6      	bne.n	80029c6 <Transmit_CarRecords+0x86>

	  nCarRecordsTransmitted++;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	3301      	adds	r3, #1
 80029dc:	617b      	str	r3, [r7, #20]
	  HD44780_SetCursor(16,2);
	  sprintf(sHD44780String, " %3d", jCarRecord+1);
	  HD44780_PrintStr(sHD44780String);
#endif
	  // Increment down the list
	  pWorkingCarNode = pWorkingCarNode->pNextCarListNode;
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	61bb      	str	r3, [r7, #24]
	  jCarRecord++;
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	3301      	adds	r3, #1
 80029e8:	61fb      	str	r3, [r7, #28]
  while ( pWorkingCarNode != NULL ) {
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1b5      	bne.n	800295c <Transmit_CarRecords+0x1c>

  	  }  //  while ( pWorkingCarNode != NULL )

  	  // Send Termination
  	  //State 21
  WriteOutBit(jSelfHandshakeBit, 1);  // Raise handshake bit
 80029f0:	2101      	movs	r1, #1
 80029f2:	68b8      	ldr	r0, [r7, #8]
 80029f4:	f000 fa5e 	bl	8002eb4 <WriteOutBit>

	 		  //Wait for State 22, ready to receive
  while ( ReadInBit(jOtherHandshakeBit) != 1 )
 80029f8:	e002      	b.n	8002a00 <Transmit_CarRecords+0xc0>
	  FlashNUCLEO_LED(jNUCLEO_BlueLED);
 80029fa:	2002      	movs	r0, #2
 80029fc:	f000 fa41 	bl	8002e82 <FlashNUCLEO_LED>
  while ( ReadInBit(jOtherHandshakeBit) != 1 )
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 fab3 	bl	8002f6c <ReadInBit>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d1f6      	bne.n	80029fa <Transmit_CarRecords+0xba>

	  // Transmit in State 22
  pFileOut = UART5_OpenOutStream();
 8002a0c:	f000 fd6a 	bl	80034e4 <UART5_OpenOutStream>
 8002a10:	6138      	str	r0, [r7, #16]
  fprintf( pFileOut, " ");
 8002a12:	6939      	ldr	r1, [r7, #16]
 8002a14:	2020      	movs	r0, #32
 8002a16:	f00a fd79 	bl	800d50c <fputc>
  UART5_CloseOutStream( pFileOut );
 8002a1a:	6938      	ldr	r0, [r7, #16]
 8002a1c:	f000 fd7e 	bl	800351c <UART5_CloseOutStream>
  BlockingTransmit_cBufferOut( );
 8002a20:	f000 fcf8 	bl	8003414 <BlockingTransmit_cBufferOut>

	  //State 23, transmit finished
  WriteOutBit(jSelfHandshakeBit, 0);  // Lower handshake bit, indicating sent
 8002a24:	2100      	movs	r1, #0
 8002a26:	68b8      	ldr	r0, [r7, #8]
 8002a28:	f000 fa44 	bl	8002eb4 <WriteOutBit>

	  // Wait for State 24, Receive finished.
  while ( ReadInBit(jOtherHandshakeBit) != 0 )
 8002a2c:	e002      	b.n	8002a34 <Transmit_CarRecords+0xf4>
	  FlashNUCLEO_LED(jNUCLEO_BlueLED);
 8002a2e:	2002      	movs	r0, #2
 8002a30:	f000 fa27 	bl	8002e82 <FlashNUCLEO_LED>
  while ( ReadInBit(jOtherHandshakeBit) != 0 )
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 fa99 	bl	8002f6c <ReadInBit>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f6      	bne.n	8002a2e <Transmit_CarRecords+0xee>


  return nCarRecordsTransmitted;
 8002a40:	697b      	ldr	r3, [r7, #20]
} // Transmit_CarRecords
 8002a42:	4618      	mov	r0, r3
 8002a44:	3720      	adds	r7, #32
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	2000003c 	.word	0x2000003c
 8002a50:	080125ac 	.word	0x080125ac

08002a54 <CountCarsOnList>:
 *  CountCarsOnList   Count the Cars On a List
 * Inputs:              Pointer to a list of cars
 * Outputs:             Count of cars on the list
 * Side Effects:        none
********************************/
int CountCarsOnList( CarListNode_t * pListOfCars ) {
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  int nCarsOnList = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60fb      	str	r3, [r7, #12]

  if (pListOfCars == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d107      	bne.n	8002a76 <CountCarsOnList+0x22>
	  return nCarsOnList;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	e009      	b.n	8002a7e <CountCarsOnList+0x2a>

  while ( pListOfCars != NULL ) {
	  pListOfCars = pListOfCars->pNextCarListNode;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	607b      	str	r3, [r7, #4]
	  nCarsOnList++;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	3301      	adds	r3, #1
 8002a74:	60fb      	str	r3, [r7, #12]
  while ( pListOfCars != NULL ) {
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1f6      	bne.n	8002a6a <CountCarsOnList+0x16>
  }
  return nCarsOnList;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
	...

08002a8c <PrettyPrintACar>:
 *  PrettyPrintACar  Pretty Print one car to pFile
 * Inputs:				pFile, CarRecord_t * pCarRecord
 * Outputs:             none
 * Side Effects:        Printing one line
********************************/
void PrettyPrintACar(FILE *pFile, CarRecord_t * pCarRecord) {
 8002a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a8e:	b08f      	sub	sp, #60	@ 0x3c
 8002a90:	af08      	add	r7, sp, #32
 8002a92:	6178      	str	r0, [r7, #20]
 8002a94:	6139      	str	r1, [r7, #16]
	fprintf(pFile, "%-10s %-7s,   Year: %4d,  Engine: %.1fL,  Milage: %6d,  Asking Price: %6d,  Status: %-4s, Index: %d \n",
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	6859      	ldr	r1, [r3, #4]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	689e      	ldr	r6, [r3, #8]
			pCarRecord->sMake, 		pCarRecord->sModel, pCarRecord->jYear,  pCarRecord->EngineSize,
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	695b      	ldr	r3, [r3, #20]
	fprintf(pFile, "%-10s %-7s,   Year: %4d,  Engine: %.1fL,  Milage: %6d,  Asking Price: %6d,  Status: %-4s, Index: %d \n",
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fd fd6c 	bl	8000588 <__aeabi_f2d>
 8002ab0:	4604      	mov	r4, r0
 8002ab2:	460d      	mov	r5, r1
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	68d8      	ldr	r0, [r3, #12]
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	691a      	ldr	r2, [r3, #16]
 8002abe:	603a      	str	r2, [r7, #0]
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	7f1b      	ldrb	r3, [r3, #28]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff fe53 	bl	8002770 <sNewOrUsed>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	9307      	str	r3, [sp, #28]
 8002ad2:	9206      	str	r2, [sp, #24]
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	9205      	str	r2, [sp, #20]
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	9004      	str	r0, [sp, #16]
 8002adc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002ae0:	9600      	str	r6, [sp, #0]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4904      	ldr	r1, [pc, #16]	@ (8002af8 <PrettyPrintACar+0x6c>)
 8002ae8:	6978      	ldr	r0, [r7, #20]
 8002aea:	f00a fcd9 	bl	800d4a0 <fiprintf>
			pCarRecord->jMilage, pCarRecord->jAskingPrice,
			sNewOrUsed( pCarRecord->bCarIsNew ), pCarRecord->jRecordIndex );
}  //  PrettyPrintACar
 8002aee:	bf00      	nop
 8002af0:	371c      	adds	r7, #28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002af6:	bf00      	nop
 8002af8:	080125c8 	.word	0x080125c8

08002afc <PrettyPrintListOfCars>:
 * PrettyPrintListOfCars  Pretty Print a list of cars to pFile
 * Inputs:              pFile, pListOfCars
 * Outputs:             nCarsPrinted
 * Side Effects:        Printing n lines
********************************/
int PrettyPrintListOfCars( FILE *pFile,  CarListNode_t * pListOfCars) {
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
	int  nCarsPrinted  			= 0 ;
 8002b06:	2300      	movs	r3, #0
 8002b08:	60bb      	str	r3, [r7, #8]
	CarListNode_t * pCarToPrint	= pListOfCars;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	60fb      	str	r3, [r7, #12]

	while ( pCarToPrint != NULL ) {
 8002b0e:	e008      	b.n	8002b22 <PrettyPrintListOfCars+0x26>
		PrettyPrintACar(pFile, pCarToPrint->pCarRecord);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4619      	mov	r1, r3
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7ff ffb8 	bl	8002a8c <PrettyPrintACar>
		pCarToPrint = pCarToPrint->pNextCarListNode;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	60fb      	str	r3, [r7, #12]
	while ( pCarToPrint != NULL ) {
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1f3      	bne.n	8002b10 <PrettyPrintListOfCars+0x14>
	}
	return nCarsPrinted;
 8002b28:	68bb      	ldr	r3, [r7, #8]
}  //  PrettyPrintListOfCars
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <PrettyPrintAQueryCommand>:
 *  PrettyPrintAQueryCommand
 * Inputs:              pFile, A Query Record
 * Outputs:             none
 * Side Effects:        Printing a query record
********************************/
void PrettyPrintAQueryCommand(FILE *pFile, QueryCommand_t *pQueryCommand) {
 8002b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]

	//   What gets printed will depend on what the command is
  fprintf(stdout, "Pretty Print Query Command: %s  \n", GetQueryCommandName( pQueryCommand->eQueryCommand ) );
 8002b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c68 <PrettyPrintAQueryCommand+0x134>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689c      	ldr	r4, [r3, #8]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff f99a 	bl	8001e84 <GetQueryCommandName>
 8002b50:	4603      	mov	r3, r0
 8002b52:	461a      	mov	r2, r3
 8002b54:	4945      	ldr	r1, [pc, #276]	@ (8002c6c <PrettyPrintAQueryCommand+0x138>)
 8002b56:	4620      	mov	r0, r4
 8002b58:	f00a fca2 	bl	800d4a0 <fiprintf>

  if ( pQueryCommand->eQueryCommand == qc_Select || pQueryCommand->eQueryCommand == qc_Add ) {
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d004      	beq.n	8002b70 <PrettyPrintAQueryCommand+0x3c>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d176      	bne.n	8002c5e <PrettyPrintAQueryCommand+0x12a>
	  fprintf(stdout, "  Make and Model: %s %s \n", pQueryCommand->sMake, pQueryCommand->sModel);
 8002b70:	4b3d      	ldr	r3, [pc, #244]	@ (8002c68 <PrettyPrintAQueryCommand+0x134>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6898      	ldr	r0, [r3, #8]
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	330c      	adds	r3, #12
 8002b7c:	493c      	ldr	r1, [pc, #240]	@ (8002c70 <PrettyPrintAQueryCommand+0x13c>)
 8002b7e:	f00a fc8f 	bl	800d4a0 <fiprintf>
	  for (int jCategoryRange=0; jCategoryRange < pQueryCommand->nCategoryRanges; jCategoryRange++) {
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	e065      	b.n	8002c54 <PrettyPrintAQueryCommand+0x120>
		  if ( pQueryCommand->CategoryRanges[jCategoryRange].eCategoryLabel != cl_Status )
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	3203      	adds	r2, #3
 8002b8e:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8002b92:	2b05      	cmp	r3, #5
 8002b94:	d02a      	beq.n	8002bec <PrettyPrintAQueryCommand+0xb8>
			fprintf(stdout, "  %-8s %2s %.1f \n",
 8002b96:	4b34      	ldr	r3, [pc, #208]	@ (8002c68 <PrettyPrintAQueryCommand+0x134>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689c      	ldr	r4, [r3, #8]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	3203      	adds	r2, #3
 8002ba2:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff f9fe 	bl	8001fa8 <GetCategoryLabel>
 8002bac:	4605      	mov	r5, r0
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	3303      	adds	r3, #3
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	785b      	ldrb	r3, [r3, #1]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fa7e 	bl	80020bc <GetRelationOperator>
 8002bc0:	4606      	mov	r6, r0
					GetCategoryLabel( pQueryCommand->CategoryRanges[jCategoryRange].eCategoryLabel ),
					GetRelationOperator(  pQueryCommand->CategoryRanges[jCategoryRange].eRelation ),
					pQueryCommand->CategoryRanges[jCategoryRange].Value );
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	3303      	adds	r3, #3
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4413      	add	r3, r2
 8002bcc:	3304      	adds	r3, #4
 8002bce:	681b      	ldr	r3, [r3, #0]
			fprintf(stdout, "  %-8s %2s %.1f \n",
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fd fcd9 	bl	8000588 <__aeabi_f2d>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	e9cd 2300 	strd	r2, r3, [sp]
 8002bde:	4633      	mov	r3, r6
 8002be0:	462a      	mov	r2, r5
 8002be2:	4924      	ldr	r1, [pc, #144]	@ (8002c74 <PrettyPrintAQueryCommand+0x140>)
 8002be4:	4620      	mov	r0, r4
 8002be6:	f00a fc5b 	bl	800d4a0 <fiprintf>
 8002bea:	e030      	b.n	8002c4e <PrettyPrintAQueryCommand+0x11a>
		  else
			fprintf(stdout, "  %-8s %2s %s \n",
 8002bec:	4b1e      	ldr	r3, [pc, #120]	@ (8002c68 <PrettyPrintAQueryCommand+0x134>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689c      	ldr	r4, [r3, #8]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	3203      	adds	r2, #3
 8002bf8:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff f9d3 	bl	8001fa8 <GetCategoryLabel>
 8002c02:	4605      	mov	r5, r0
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	3303      	adds	r3, #3
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	785b      	ldrb	r3, [r3, #1]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fa53 	bl	80020bc <GetRelationOperator>
 8002c16:	4606      	mov	r6, r0
					GetCategoryLabel( pQueryCommand->CategoryRanges[jCategoryRange].eCategoryLabel ),
					GetRelationOperator(  pQueryCommand->CategoryRanges[jCategoryRange].eRelation ),
					sNewOrUsed( pQueryCommand->CategoryRanges[jCategoryRange].Value != 0.0 ) );
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	3303      	adds	r3, #3
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	3304      	adds	r3, #4
 8002c24:	edd3 7a00 	vldr	s15, [r3]
			fprintf(stdout, "  %-8s %2s %s \n",
 8002c28:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c30:	bf14      	ite	ne
 8002c32:	2301      	movne	r3, #1
 8002c34:	2300      	moveq	r3, #0
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fd99 	bl	8002770 <sNewOrUsed>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	4633      	mov	r3, r6
 8002c44:	462a      	mov	r2, r5
 8002c46:	490c      	ldr	r1, [pc, #48]	@ (8002c78 <PrettyPrintAQueryCommand+0x144>)
 8002c48:	4620      	mov	r0, r4
 8002c4a:	f00a fc29 	bl	800d4a0 <fiprintf>
	  for (int jCategoryRange=0; jCategoryRange < pQueryCommand->nCategoryRanges; jCategoryRange++) {
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3301      	adds	r3, #1
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	db94      	blt.n	8002b88 <PrettyPrintAQueryCommand+0x54>
	  }		// for jCategoryRange
  } 		// if Select or Add
} // PrettyPrintAQueryCommand
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c66:	bf00      	nop
 8002c68:	2000003c 	.word	0x2000003c
 8002c6c:	08012630 	.word	0x08012630
 8002c70:	08012654 	.word	0x08012654
 8002c74:	08012670 	.word	0x08012670
 8002c78:	08012684 	.word	0x08012684

08002c7c <__io_putchar>:
 *
 * Inputs:    The Character to transmit (converted to an int)
 * Outputs:   Returns the character sent, or EOF on failure (EOF is -1 in STM32CubeIDE)
 * Side Effects:
********************************/
int __io_putchar(int ACharacter) {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 HAL_StatusTypeDef  HAL_Status;
 int                ReturnValue;

	// printf() outputs characters through the routine __io_putchar()
  HAL_Status = HAL_UART_Transmit(&huart3, (uint8_t *)&ACharacter, 1, 100);
 8002c84:	1d39      	adds	r1, r7, #4
 8002c86:	2364      	movs	r3, #100	@ 0x64
 8002c88:	2201      	movs	r2, #1
 8002c8a:	4809      	ldr	r0, [pc, #36]	@ (8002cb0 <__io_putchar+0x34>)
 8002c8c:	f004 fde9 	bl	8007862 <HAL_UART_Transmit>
 8002c90:	4603      	mov	r3, r0
 8002c92:	73fb      	strb	r3, [r7, #15]

  	  // See man  putchar()
  ReturnValue = ( HAL_Status == HAL_OK ) ? ACharacter  :  EOF;
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <__io_putchar+0x22>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	e001      	b.n	8002ca2 <__io_putchar+0x26>
 8002c9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ca2:	60bb      	str	r3, [r7, #8]

  return ReturnValue;
 8002ca4:	68bb      	ldr	r3, [r7, #8]
} //__io_putchar
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20001a9c 	.word	0x20001a9c

08002cb4 <__io_getchar>:
 *                Converts CR to NL, for fgets to work.
 * Inputs:    None
 * Outputs:   Returns the character received, or EOF on failure (EOF is -1 in STM32CubeIDE)
 * Side Effects:
********************************/
int __io_getchar(void) {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
  uint8_t ACharacter = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	71fb      	strb	r3, [r7, #7]
  int                ReturnValue;

  // scanf() inputs characters through the routine __io_getchar()

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart3);  // It should be checked when this is necessary
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	4b15      	ldr	r3, [pc, #84]	@ (8002d18 <__io_getchar+0x64>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	603b      	str	r3, [r7, #0]
 8002cca:	4b13      	ldr	r3, [pc, #76]	@ (8002d18 <__io_getchar+0x64>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	603b      	str	r3, [r7, #0]
 8002cd2:	683b      	ldr	r3, [r7, #0]

  /* Wait for reception of a character on the USART RX line and echo this character on console */
  HAL_Status = HAL_UART_Receive(&huart3, (uint8_t *)&ACharacter, 1, HAL_MAX_DELAY);
 8002cd4:	1df9      	adds	r1, r7, #7
 8002cd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002cda:	2201      	movs	r2, #1
 8002cdc:	480e      	ldr	r0, [pc, #56]	@ (8002d18 <__io_getchar+0x64>)
 8002cde:	f004 fe52 	bl	8007986 <HAL_UART_Receive>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ACharacter, 1, 100);
 8002ce6:	1df9      	adds	r1, r7, #7
 8002ce8:	2364      	movs	r3, #100	@ 0x64
 8002cea:	2201      	movs	r2, #1
 8002cec:	480a      	ldr	r0, [pc, #40]	@ (8002d18 <__io_getchar+0x64>)
 8002cee:	f004 fdb8 	bl	8007862 <HAL_UART_Transmit>

  //  fgets() needs the new line character.   No way at this point, or one up, to add a character for \r\n
  if (ACharacter == '\r') 	  ACharacter = '\n';
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	2b0d      	cmp	r3, #13
 8002cf6:	d101      	bne.n	8002cfc <__io_getchar+0x48>
 8002cf8:	230a      	movs	r3, #10
 8002cfa:	71fb      	strb	r3, [r7, #7]

  ReturnValue = ( HAL_Status == HAL_OK ) ? ACharacter  :  EOF;
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <__io_getchar+0x52>
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	e001      	b.n	8002d0a <__io_getchar+0x56>
 8002d06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d0a:	60bb      	str	r3, [r7, #8]

  return ReturnValue;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	20001a9c 	.word	0x20001a9c

08002d1c <GobbleWhiteSpace>:
 * Inputs:              pFile, bVerboseReporting
 * Outputs:             AChar, the last character read
 * Side Effects:		White space characters are removed from a stream
 *                      If bVerboseReporting is true, messages are sent to stdout
********************************/
int GobbleWhiteSpace( FILE *pFile, bool bVerboseReporting ) {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	70fb      	strb	r3, [r7, #3]
	int AChar;

	do {
		AChar = getc( pFile );
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f00a fc83 	bl	800d634 <getc>
 8002d2e:	60f8      	str	r0, [r7, #12]
		if ( bVerboseReporting ) {
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d020      	beq.n	8002d78 <GobbleWhiteSpace+0x5c>
			fprintf(stdout, "    GobbleWhiteSpace:  getc AChar got: x%02x", AChar);
 8002d36:	4b21      	ldr	r3, [pc, #132]	@ (8002dbc <GobbleWhiteSpace+0xa0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	4920      	ldr	r1, [pc, #128]	@ (8002dc0 <GobbleWhiteSpace+0xa4>)
 8002d40:	4618      	mov	r0, r3
 8002d42:	f00a fbad 	bl	800d4a0 <fiprintf>
			if ( isprint(AChar) )  //  If character is printable, show it
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8002dc4 <GobbleWhiteSpace+0xa8>)
 8002d4c:	4413      	add	r3, r2
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	f003 0397 	and.w	r3, r3, #151	@ 0x97
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <GobbleWhiteSpace+0x4e>
				fprintf(stdout, " >%c< \n", AChar);
 8002d58:	4b18      	ldr	r3, [pc, #96]	@ (8002dbc <GobbleWhiteSpace+0xa0>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	4919      	ldr	r1, [pc, #100]	@ (8002dc8 <GobbleWhiteSpace+0xac>)
 8002d62:	4618      	mov	r0, r3
 8002d64:	f00a fb9c 	bl	800d4a0 <fiprintf>
 8002d68:	e006      	b.n	8002d78 <GobbleWhiteSpace+0x5c>
			else
				fprintf(stdout, "\n");
 8002d6a:	4b14      	ldr	r3, [pc, #80]	@ (8002dbc <GobbleWhiteSpace+0xa0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	4619      	mov	r1, r3
 8002d72:	200a      	movs	r0, #10
 8002d74:	f00a fbca 	bl	800d50c <fputc>
		}
	} while ( isspace(AChar) );  //  == '\n' || AChar == '\r' || AChar == ' ' || AChar == '\t' );
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	4a11      	ldr	r2, [pc, #68]	@ (8002dc4 <GobbleWhiteSpace+0xa8>)
 8002d7e:	4413      	add	r3, r2
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1ce      	bne.n	8002d28 <GobbleWhiteSpace+0xc>

	// If we did not get an EOF, then we have a non-white space character, and do unget.
	if ( AChar != EOF ) {
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d90:	d00e      	beq.n	8002db0 <GobbleWhiteSpace+0x94>
		if ( bVerboseReporting ) fprintf(stdout, "    GobbleWhiteSpace:  ungetc: x%02x \n", AChar);
 8002d92:	78fb      	ldrb	r3, [r7, #3]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d007      	beq.n	8002da8 <GobbleWhiteSpace+0x8c>
 8002d98:	4b08      	ldr	r3, [pc, #32]	@ (8002dbc <GobbleWhiteSpace+0xa0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	490a      	ldr	r1, [pc, #40]	@ (8002dcc <GobbleWhiteSpace+0xb0>)
 8002da2:	4618      	mov	r0, r3
 8002da4:	f00a fb7c 	bl	800d4a0 <fiprintf>
		ungetc( AChar, pFile );
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f00a ff2a 	bl	800dc04 <ungetc>
	}

	return AChar;
 8002db0:	68fb      	ldr	r3, [r7, #12]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	2000003c 	.word	0x2000003c
 8002dc0:	08012694 	.word	0x08012694
 8002dc4:	080128a8 	.word	0x080128a8
 8002dc8:	080126c4 	.word	0x080126c4
 8002dcc:	080126cc 	.word	0x080126cc

08002dd0 <ReadTimer2>:
 *
 * Inputs:              None
 * Outputs:             Current Timer2 value
 * Side Effects:		None
********************************/
uint32_t  ReadTimer2( void) {
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return __HAL_TIM_GET_COUNTER(&htim2);
 8002dd4:	4b03      	ldr	r3, [pc, #12]	@ (8002de4 <ReadTimer2+0x14>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}  // ReadTimer2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	20001a10 	.word	0x20001a10

08002de8 <WriteNUCLEO_LED>:
 *
 * Inputs:              jLED (1 .. 3), and jValue  (value to put on LED)
 * Outputs:             0 for Success, else -1
 * Side Effects:		LED port is changed
********************************/
int WriteNUCLEO_LED(int jLED, int jValue) {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
	int ReturnValue = 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	60fb      	str	r3, [r7, #12]
	switch( jLED) {
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d019      	beq.n	8002e30 <WriteNUCLEO_LED+0x48>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	dc1f      	bgt.n	8002e42 <WriteNUCLEO_LED+0x5a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d003      	beq.n	8002e10 <WriteNUCLEO_LED+0x28>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d008      	beq.n	8002e20 <WriteNUCLEO_LED+0x38>
 8002e0e:	e018      	b.n	8002e42 <WriteNUCLEO_LED+0x5a>
	case 1:
	   HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, jValue);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	2101      	movs	r1, #1
 8002e18:	480e      	ldr	r0, [pc, #56]	@ (8002e54 <WriteNUCLEO_LED+0x6c>)
 8002e1a:	f002 f8b9 	bl	8004f90 <HAL_GPIO_WritePin>
	   break;
 8002e1e:	e013      	b.n	8002e48 <WriteNUCLEO_LED+0x60>
	case 2:
	    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, jValue);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	2180      	movs	r1, #128	@ 0x80
 8002e28:	480a      	ldr	r0, [pc, #40]	@ (8002e54 <WriteNUCLEO_LED+0x6c>)
 8002e2a:	f002 f8b1 	bl	8004f90 <HAL_GPIO_WritePin>
	    break;
 8002e2e:	e00b      	b.n	8002e48 <WriteNUCLEO_LED+0x60>
	case 3:
	    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, jValue);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002e3a:	4806      	ldr	r0, [pc, #24]	@ (8002e54 <WriteNUCLEO_LED+0x6c>)
 8002e3c:	f002 f8a8 	bl	8004f90 <HAL_GPIO_WritePin>
	    break;
 8002e40:	e002      	b.n	8002e48 <WriteNUCLEO_LED+0x60>
	default:
		ReturnValue = -1;
 8002e42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e46:	60fb      	str	r3, [r7, #12]
	}
	return ReturnValue;
 8002e48:	68fb      	ldr	r3, [r7, #12]
}  // WriteNUCLEO_LED
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40020400 	.word	0x40020400

08002e58 <ClearNUCLEO_LEDs>:
 *
 * Inputs:              None
 * Outputs:             0 for Success, else -1
 * Side Effects:		LEDs set to 0
********************************/
int ClearNUCLEO_LEDs( void ) {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
	int jLED;
	for (jLED = jNUCLEO_FirstLED; jLED <= jNUCLEO_LastLED; jLED++)
 8002e5e:	2301      	movs	r3, #1
 8002e60:	607b      	str	r3, [r7, #4]
 8002e62:	e006      	b.n	8002e72 <ClearNUCLEO_LEDs+0x1a>
		WriteNUCLEO_LED(jLED, 0);
 8002e64:	2100      	movs	r1, #0
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7ff ffbe 	bl	8002de8 <WriteNUCLEO_LED>
	for (jLED = jNUCLEO_FirstLED; jLED <= jNUCLEO_LastLED; jLED++)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	ddf5      	ble.n	8002e64 <ClearNUCLEO_LEDs+0xc>
	return SUCCESS;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <FlashNUCLEO_LED>:
 * Inputs:          jLED, if jLED >= 1 && jLED <= 3,  will flash the LED indicated, based on Timer2
 *                  Set jLED to 0 to stop flashing (no write to LED, in this case)
 * Outputs:         None.
 * Side Effects:	Flash LED.
********************************/
int FlashNUCLEO_LED(int jLED) {
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
	if ( jLED >= jNUCLEO_FirstLED && jLED <= jNUCLEO_LastLED )
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	dd0c      	ble.n	8002eaa <FlashNUCLEO_LED+0x28>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	dc09      	bgt.n	8002eaa <FlashNUCLEO_LED+0x28>
		WriteNUCLEO_LED(jLED,  ReadTimer2() >> 16 & 0x01);
 8002e96:	f7ff ff9b 	bl	8002dd0 <ReadTimer2>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	0c1b      	lsrs	r3, r3, #16
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff ff9f 	bl	8002de8 <WriteNUCLEO_LED>
	return SUCCESS;
 8002eaa:	2300      	movs	r3, #0
}  // FlashNUCLEO_LED
 8002eac:	4618      	mov	r0, r3
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <WriteOutBit>:
 *
 * Inputs:              jOutBit (0 .. 3), and jValue  (value to put on OutBit)
 * Outputs:             0 for Success, else -1
 * Side Effects:		OutBit(jOutBit)  bit is changed
********************************/
int WriteOutBit(int jOutBit, int jValue) {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
	int ReturnValue = SUCCESS;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
	switch( jOutBit) {
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	d82b      	bhi.n	8002f20 <WriteOutBit+0x6c>
 8002ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ed0 <WriteOutBit+0x1c>)
 8002eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ece:	bf00      	nop
 8002ed0:	08002ee1 	.word	0x08002ee1
 8002ed4:	08002ef1 	.word	0x08002ef1
 8002ed8:	08002f01 	.word	0x08002f01
 8002edc:	08002f11 	.word	0x08002f11
	case 0:
		HAL_GPIO_WritePin(OutBit0_GPIO_Port, OutBit0_Pin, jValue);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	2104      	movs	r1, #4
 8002ee8:	4811      	ldr	r0, [pc, #68]	@ (8002f30 <WriteOutBit+0x7c>)
 8002eea:	f002 f851 	bl	8004f90 <HAL_GPIO_WritePin>
		break;
 8002eee:	e01a      	b.n	8002f26 <WriteOutBit+0x72>
	case 1:
		HAL_GPIO_WritePin(OutBit1_GPIO_Port, OutBit1_Pin, jValue);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	2110      	movs	r1, #16
 8002ef8:	480d      	ldr	r0, [pc, #52]	@ (8002f30 <WriteOutBit+0x7c>)
 8002efa:	f002 f849 	bl	8004f90 <HAL_GPIO_WritePin>
		break;
 8002efe:	e012      	b.n	8002f26 <WriteOutBit+0x72>
	case 2:
		HAL_GPIO_WritePin(OutBit2_GPIO_Port, OutBit2_Pin, jValue);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	461a      	mov	r2, r3
 8002f06:	2120      	movs	r1, #32
 8002f08:	4809      	ldr	r0, [pc, #36]	@ (8002f30 <WriteOutBit+0x7c>)
 8002f0a:	f002 f841 	bl	8004f90 <HAL_GPIO_WritePin>
		break;
 8002f0e:	e00a      	b.n	8002f26 <WriteOutBit+0x72>
	case 3:
		HAL_GPIO_WritePin(OutBit3_GPIO_Port, OutBit3_Pin, jValue);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	461a      	mov	r2, r3
 8002f16:	2140      	movs	r1, #64	@ 0x40
 8002f18:	4805      	ldr	r0, [pc, #20]	@ (8002f30 <WriteOutBit+0x7c>)
 8002f1a:	f002 f839 	bl	8004f90 <HAL_GPIO_WritePin>
		break;
 8002f1e:	e002      	b.n	8002f26 <WriteOutBit+0x72>
	default:
		ReturnValue = -1;
 8002f20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f24:	60fb      	str	r3, [r7, #12]
	}
	return ReturnValue;
 8002f26:	68fb      	ldr	r3, [r7, #12]
}  // WriteOutBit
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40021000 	.word	0x40021000

08002f34 <ClearOutBits>:
 *
 * Inputs:              None
 * Outputs:             0 for Success, else -1
 * Side Effects:		All jOutBits set to zero
********************************/
int ClearOutBits( void ) {
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
  int jOutBit;
  int ReturnValue = SUCCESS;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	603b      	str	r3, [r7, #0]
  for (jOutBit = 0; jOutBit < 4; jOutBit++)
 8002f3e:	2300      	movs	r3, #0
 8002f40:	607b      	str	r3, [r7, #4]
 8002f42:	e00a      	b.n	8002f5a <ClearOutBits+0x26>
	ReturnValue |= WriteOutBit(jOutBit, 0);
 8002f44:	2100      	movs	r1, #0
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff ffb4 	bl	8002eb4 <WriteOutBit>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	603b      	str	r3, [r7, #0]
  for (jOutBit = 0; jOutBit < 4; jOutBit++)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3301      	adds	r3, #1
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	ddf1      	ble.n	8002f44 <ClearOutBits+0x10>
  return ReturnValue;
 8002f60:	683b      	ldr	r3, [r7, #0]
} //  ClearOutBits
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <ReadInBit>:
 *
 * Inputs:              jInBit (0 .. 3)
 * Outputs:             0 for Success, else -1
 * Side Effects:		InBItx bit is changed
********************************/
int ReadInBit(int jInBit) {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
	int ReturnValue;
	switch( jInBit) {
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d826      	bhi.n	8002fc8 <ReadInBit+0x5c>
 8002f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8002f80 <ReadInBit+0x14>)
 8002f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f80:	08002f91 	.word	0x08002f91
 8002f84:	08002f9f 	.word	0x08002f9f
 8002f88:	08002fad 	.word	0x08002fad
 8002f8c:	08002fbb 	.word	0x08002fbb
	case 0:
		ReturnValue=HAL_GPIO_ReadPin(InBit0_GPIO_Port, InBit0_Pin);
 8002f90:	2180      	movs	r1, #128	@ 0x80
 8002f92:	4811      	ldr	r0, [pc, #68]	@ (8002fd8 <ReadInBit+0x6c>)
 8002f94:	f001 ffe4 	bl	8004f60 <HAL_GPIO_ReadPin>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	60fb      	str	r3, [r7, #12]
		break;
 8002f9c:	e017      	b.n	8002fce <ReadInBit+0x62>
	case 1:
		ReturnValue=HAL_GPIO_ReadPin(InBit1_GPIO_Port, InBit1_Pin);
 8002f9e:	2140      	movs	r1, #64	@ 0x40
 8002fa0:	480d      	ldr	r0, [pc, #52]	@ (8002fd8 <ReadInBit+0x6c>)
 8002fa2:	f001 ffdd 	bl	8004f60 <HAL_GPIO_ReadPin>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	60fb      	str	r3, [r7, #12]
		break;
 8002faa:	e010      	b.n	8002fce <ReadInBit+0x62>
	case 2:
		ReturnValue=HAL_GPIO_ReadPin(InBit2_GPIO_Port, InBit2_Pin);
 8002fac:	2120      	movs	r1, #32
 8002fae:	480a      	ldr	r0, [pc, #40]	@ (8002fd8 <ReadInBit+0x6c>)
 8002fb0:	f001 ffd6 	bl	8004f60 <HAL_GPIO_ReadPin>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	60fb      	str	r3, [r7, #12]
		break;
 8002fb8:	e009      	b.n	8002fce <ReadInBit+0x62>
	case 3:
		ReturnValue=HAL_GPIO_ReadPin(InBit3_GPIO_Port, InBit3_Pin);
 8002fba:	2110      	movs	r1, #16
 8002fbc:	4806      	ldr	r0, [pc, #24]	@ (8002fd8 <ReadInBit+0x6c>)
 8002fbe:	f001 ffcf 	bl	8004f60 <HAL_GPIO_ReadPin>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	60fb      	str	r3, [r7, #12]
		break;
 8002fc6:	e002      	b.n	8002fce <ReadInBit+0x62>
	default:
		ReturnValue = -1;
 8002fc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002fcc:	60fb      	str	r3, [r7, #12]
	}
	return ReturnValue;
 8002fce:	68fb      	ldr	r3, [r7, #12]
}  // ReadInBit
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40020c00 	.word	0x40020c00

08002fdc <MyMain>:
 * 					to do hardware initializations.   Lab Part 05
 * Inputs:              None
 * Outputs:             None
 * Side Effects:
********************************/
int MyMain(void) {
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8002fe2:	af02      	add	r7, sp, #8
  int 	jVerbosity;
  int 	ReturnValue;
  int  	nCarsInDatabase = 0, nCarsOnCurrentWorkingList = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8002fea:	2300      	movs	r3, #0
 8002fec:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
  char 	sInputString[ N_InputCharacters ];
  FILE *pFileIn;
  char *pFgetsReturnValue;
  bool	bKeepProcessingCommands;

  CarRecord_t     * pCarRecords   = Get_pCarRecords();
 8002ff0:	f7fe f90a 	bl	8001208 <Get_pCarRecords>
 8002ff4:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
  CarListNode_t   * pCarDatabase = NULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
  CarListNode_t   * pCurrentWorkingList = NULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
  QueryCommand_t  	AQueryCommand;
  QueryControl_t 	AQueryControl, *pQueryControl = &AQueryControl;
 8003004:	463b      	mov	r3, r7
 8003006:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204


	// State 0
  jVerbosity = 2;
 800300a:	2302      	movs	r3, #2
 800300c:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
  ClearOutBits();
 8003010:	f7ff ff90 	bl	8002f34 <ClearOutBits>
  ClearNUCLEO_LEDs();
 8003014:	f7ff ff20 	bl	8002e58 <ClearNUCLEO_LEDs>
  Initialize_cBufferIn( ' ' );
 8003018:	2020      	movs	r0, #32
 800301a:	f000 faa7 	bl	800356c <Initialize_cBufferIn>
  Initialize_cBufferOut( ' ' );
 800301e:	2020      	movs	r0, #32
 8003020:	f000 fabc 	bl	800359c <Initialize_cBufferOut>
  InitCarRecordsAndModels();
 8003024:	f7fe f8dc 	bl	80011e0 <InitCarRecordsAndModels>

  // State 2
  MarkEvenState;
 8003028:	2100      	movs	r1, #0
 800302a:	2003      	movs	r0, #3
 800302c:	f7ff fedc 	bl	8002de8 <WriteNUCLEO_LED>
  pCarDatabase 	  = ReceiveAListOfCarRecords( pCarRecords, N_CarRecords, 1, 0, jVerbosity );
 8003030:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	2300      	movs	r3, #0
 8003038:	2201      	movs	r2, #1
 800303a:	2165      	movs	r1, #101	@ 0x65
 800303c:	f8d7 020c 	ldr.w	r0, [r7, #524]	@ 0x20c
 8003040:	f7ff fbac 	bl	800279c <ReceiveAListOfCarRecords>
 8003044:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
  nCarsInDatabase = CountCarsOnList(pCarDatabase);
 8003048:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 800304c:	f7ff fd02 	bl	8002a54 <CountCarsOnList>
 8003050:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
  InitializeQueryControl( pQueryControl, NULL,  0, nCarsInDatabase, jVerbosity );
 8003054:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800305e:	2200      	movs	r2, #0
 8003060:	2100      	movs	r1, #0
 8003062:	f8d7 0204 	ldr.w	r0, [r7, #516]	@ 0x204
 8003066:	f7fe fd95 	bl	8001b94 <InitializeQueryControl>


  	  // Show the database on console
  if (jVerbosity >= 1) {
 800306a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800306e:	2b00      	cmp	r3, #0
 8003070:	dd18      	ble.n	80030a4 <MyMain+0xc8>
    fprintf(stdout, "Car Database:\n");
 8003072:	4b9b      	ldr	r3, [pc, #620]	@ (80032e0 <MyMain+0x304>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	220e      	movs	r2, #14
 800307a:	2101      	movs	r1, #1
 800307c:	4899      	ldr	r0, [pc, #612]	@ (80032e4 <MyMain+0x308>)
 800307e:	f00a facb 	bl	800d618 <fwrite>
    PrettyPrintListOfCars(stdout, pCarDatabase);
 8003082:	4b97      	ldr	r3, [pc, #604]	@ (80032e0 <MyMain+0x304>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f8d7 1208 	ldr.w	r1, [r7, #520]	@ 0x208
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff fd35 	bl	8002afc <PrettyPrintListOfCars>
    fprintf(stdout, " ----  Car Database, %d Cars  ---- \n", nCarsInDatabase);
 8003092:	4b93      	ldr	r3, [pc, #588]	@ (80032e0 <MyMain+0x304>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 800309c:	4992      	ldr	r1, [pc, #584]	@ (80032e8 <MyMain+0x30c>)
 800309e:	4618      	mov	r0, r3
 80030a0:	f00a f9fe 	bl	800d4a0 <fiprintf>
  }

  // State 4
  MarkEvenState;
 80030a4:	2100      	movs	r1, #0
 80030a6:	2003      	movs	r0, #3
 80030a8:	f7ff fe9e 	bl	8002de8 <WriteNUCLEO_LED>
  WriteOutBit(1, 0);  // Lower handshake bit, indicating reception complete
 80030ac:	2100      	movs	r1, #0
 80030ae:	2001      	movs	r0, #1
 80030b0:	f7ff ff00 	bl	8002eb4 <WriteOutBit>


  bKeepProcessingCommands = true;
 80030b4:	2301      	movs	r3, #1
 80030b6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
  while ( bKeepProcessingCommands ) {
 80030ba:	e105      	b.n	80032c8 <MyMain+0x2ec>

	  // Wait for State 5,  Assessment Computer ready to send command
	  while ( ReadInBit(0) != 1 )        	// An error occurs if Student computer is booted while the Assesssment computer is mid-test
		  FlashNUCLEO_LED(jNUCLEO_GreenLED);	// So block here until assessment computer reaches state 1
 80030bc:	2001      	movs	r0, #1
 80030be:	f7ff fee0 	bl	8002e82 <FlashNUCLEO_LED>
	  while ( ReadInBit(0) != 1 )        	// An error occurs if Student computer is booted while the Assesssment computer is mid-test
 80030c2:	2000      	movs	r0, #0
 80030c4:	f7ff ff52 	bl	8002f6c <ReadInBit>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d1f6      	bne.n	80030bc <MyMain+0xe0>
	  WriteNUCLEO_LED(jNUCLEO_GreenLED, 0);
 80030ce:	2100      	movs	r1, #0
 80030d0:	2001      	movs	r0, #1
 80030d2:	f7ff fe89 	bl	8002de8 <WriteNUCLEO_LED>
	  MarkOddState;
 80030d6:	2101      	movs	r1, #1
 80030d8:	2003      	movs	r0, #3
 80030da:	f7ff fe85 	bl	8002de8 <WriteNUCLEO_LED>

	  // State 5
	  ReturnValue = Start_UART5_Reception();
 80030de:	f000 f95d 	bl	800339c <Start_UART5_Reception>
 80030e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
	  WriteNUCLEO_LED(jNUCLEO_BlueLED, 1);  // Indicates listening
 80030e6:	2101      	movs	r1, #1
 80030e8:	2002      	movs	r0, #2
 80030ea:	f7ff fe7d 	bl	8002de8 <WriteNUCLEO_LED>

	  // State 6
	  WriteOutBit(1, 1);  // Raise handshake bit
 80030ee:	2101      	movs	r1, #1
 80030f0:	2001      	movs	r0, #1
 80030f2:	f7ff fedf 	bl	8002eb4 <WriteOutBit>
	  MarkEvenState;
 80030f6:	2100      	movs	r1, #0
 80030f8:	2003      	movs	r0, #3
 80030fa:	f7ff fe75 	bl	8002de8 <WriteNUCLEO_LED>


	  // State 6, Assessment Computer transmitting.
	  // Waiting for State 7, Assessment Computer done transmitting
	  while ( ReadInBit(0) != 0 )        	// An error occurs if Student computer is booted while the Assesssment computer is mid-test
 80030fe:	e002      	b.n	8003106 <MyMain+0x12a>
		  FlashNUCLEO_LED(jNUCLEO_BlueLED);	// So block here until assessment computer reaches state 1
 8003100:	2002      	movs	r0, #2
 8003102:	f7ff febe 	bl	8002e82 <FlashNUCLEO_LED>
	  while ( ReadInBit(0) != 0 )        	// An error occurs if Student computer is booted while the Assesssment computer is mid-test
 8003106:	2000      	movs	r0, #0
 8003108:	f7ff ff30 	bl	8002f6c <ReadInBit>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f6      	bne.n	8003100 <MyMain+0x124>

	  // State 7
	  MarkOddState;
 8003112:	2101      	movs	r1, #1
 8003114:	2003      	movs	r0, #3
 8003116:	f7ff fe67 	bl	8002de8 <WriteNUCLEO_LED>
	  ReturnValue       = Stop_UART5_Reception();
 800311a:	f000 f963 	bl	80033e4 <Stop_UART5_Reception>
 800311e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
	  WriteNUCLEO_LED(jNUCLEO_BlueLED, 0);  // Indicates not listening
 8003122:	2100      	movs	r1, #0
 8003124:	2002      	movs	r0, #2
 8003126:	f7ff fe5f 	bl	8002de8 <WriteNUCLEO_LED>


	  WriteOutBit(1, 0);  // Lower handshake bit
 800312a:	2100      	movs	r1, #0
 800312c:	2001      	movs	r0, #1
 800312e:	f7ff fec1 	bl	8002eb4 <WriteOutBit>

	  // State 8, Process the command
	  MarkEvenState;
 8003132:	2100      	movs	r1, #0
 8003134:	2003      	movs	r0, #3
 8003136:	f7ff fe57 	bl	8002de8 <WriteNUCLEO_LED>

	  pFileIn           = UART5_OpenInStream();
 800313a:	f000 f99f 	bl	800347c <UART5_OpenInStream>
 800313e:	f8c7 01f4 	str.w	r0, [r7, #500]	@ 0x1f4
	  pFgetsReturnValue = fgets(sInputString, N_InputCharacters, pFileIn);
 8003142:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003146:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 800314a:	2180      	movs	r1, #128	@ 0x80
 800314c:	4618      	mov	r0, r3
 800314e:	f00a f8a7 	bl	800d2a0 <fgets>
 8003152:	f8c7 01f0 	str.w	r0, [r7, #496]	@ 0x1f0
	  fclose(pFileIn);
 8003156:	f8d7 01f4 	ldr.w	r0, [r7, #500]	@ 0x1f4
 800315a:	f009 ff3d 	bl	800cfd8 <fclose>
	  Initialize_cBufferIn( ' ' );
 800315e:	2020      	movs	r0, #32
 8003160:	f000 fa04 	bl	800356c <Initialize_cBufferIn>
	  SuppressCharactersOffEndOfString(sInputString, " \n\r\t", pQueryControl->jVerbosity >= 13);
 8003164:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8003168:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800316c:	2b0c      	cmp	r3, #12
 800316e:	bfcc      	ite	gt
 8003170:	2301      	movgt	r3, #1
 8003172:	2300      	movle	r3, #0
 8003174:	b2da      	uxtb	r2, r3
 8003176:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800317a:	495c      	ldr	r1, [pc, #368]	@ (80032ec <MyMain+0x310>)
 800317c:	4618      	mov	r0, r3
 800317e:	f7fe f94f 	bl	8001420 <SuppressCharactersOffEndOfString>

	  fprintf(stdout, "Command: >%s< \n", sInputString);
 8003182:	4b57      	ldr	r3, [pc, #348]	@ (80032e0 <MyMain+0x304>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 800318c:	4958      	ldr	r1, [pc, #352]	@ (80032f0 <MyMain+0x314>)
 800318e:	4618      	mov	r0, r3
 8003190:	f00a f986 	bl	800d4a0 <fiprintf>

	  ReturnValue = ParseQueryCommandLine( pQueryControl, &AQueryCommand,  sInputString );
 8003194:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8003198:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800319c:	4619      	mov	r1, r3
 800319e:	f8d7 0204 	ldr.w	r0, [r7, #516]	@ 0x204
 80031a2:	f7fe ffc5 	bl	8002130 <ParseQueryCommandLine>
 80031a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
	  if (pQueryControl->jVerbosity >=  4) {
 80031aa:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80031ae:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	dd14      	ble.n	80031e0 <MyMain+0x204>
		  fprintf(stdout, "  MyMain:  ParseQueryCommandLine returned %d Criteria \n", AQueryCommand.nCategoryRanges);
 80031b6:	4b4a      	ldr	r3, [pc, #296]	@ (80032e0 <MyMain+0x304>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6898      	ldr	r0, [r3, #8]
 80031bc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80031c0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80031c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c6:	461a      	mov	r2, r3
 80031c8:	494a      	ldr	r1, [pc, #296]	@ (80032f4 <MyMain+0x318>)
 80031ca:	f00a f969 	bl	800d4a0 <fiprintf>
		  PrettyPrintAQueryCommand(stdout, &AQueryCommand);
 80031ce:	4b44      	ldr	r3, [pc, #272]	@ (80032e0 <MyMain+0x304>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80031d8:	4611      	mov	r1, r2
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff fcaa 	bl	8002b34 <PrettyPrintAQueryCommand>
	  }

	  ProcessQueryCommand( pQueryControl, &AQueryCommand, pCarDatabase, &pCurrentWorkingList ) ;
 80031e0:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80031e4:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80031e8:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 80031ec:	f8d7 0204 	ldr.w	r0, [r7, #516]	@ 0x204
 80031f0:	f7fd ff18 	bl	8001024 <ProcessQueryCommand>
	  nCarsOnCurrentWorkingList = CountCarsOnList( pCurrentWorkingList );
 80031f4:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fc2b 	bl	8002a54 <CountCarsOnList>
 80031fe:	f8c7 0210 	str.w	r0, [r7, #528]	@ 0x210

	  if (pQueryControl->jVerbosity >= 11) fprintf(stdout, "\nMyMain:  SelectFromCarDatabase found %d cars from a list of %d cars.\n",
 8003202:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8003206:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800320a:	2b0a      	cmp	r3, #10
 800320c:	dd09      	ble.n	8003222 <MyMain+0x246>
 800320e:	4b34      	ldr	r3, [pc, #208]	@ (80032e0 <MyMain+0x304>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6898      	ldr	r0, [r3, #8]
 8003214:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003218:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 800321c:	4936      	ldr	r1, [pc, #216]	@ (80032f8 <MyMain+0x31c>)
 800321e:	f00a f93f 	bl	800d4a0 <fiprintf>
			  nCarsOnCurrentWorkingList, nCarsInDatabase );

	  if (pQueryControl->jVerbosity >= 2) {
 8003222:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8003226:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800322a:	2b01      	cmp	r3, #1
 800322c:	dd11      	ble.n	8003252 <MyMain+0x276>
		  PrettyPrintListOfCars(stdout, pCurrentWorkingList);
 800322e:	4b2c      	ldr	r3, [pc, #176]	@ (80032e0 <MyMain+0x304>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8003238:	4611      	mov	r1, r2
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff fc5e 	bl	8002afc <PrettyPrintListOfCars>
		  fprintf(stdout, "At end of processing cycle, Current Working List of %d Cars: \n", nCarsOnCurrentWorkingList);
 8003240:	4b27      	ldr	r3, [pc, #156]	@ (80032e0 <MyMain+0x304>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 800324a:	492c      	ldr	r1, [pc, #176]	@ (80032fc <MyMain+0x320>)
 800324c:	4618      	mov	r0, r3
 800324e:	f00a f927 	bl	800d4a0 <fiprintf>

	  }

	  if ( strcasecmp( sInputString, "Report:" ) == 0 ) {
 8003252:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003256:	492a      	ldr	r1, [pc, #168]	@ (8003300 <MyMain+0x324>)
 8003258:	4618      	mov	r0, r3
 800325a:	f00a ff11 	bl	800e080 <strcasecmp>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d131      	bne.n	80032c8 <MyMain+0x2ec>

		  // State 81
		  WriteOutBit(3, 1);  // Raise handshake bit
 8003264:	2101      	movs	r1, #1
 8003266:	2003      	movs	r0, #3
 8003268:	f7ff fe24 	bl	8002eb4 <WriteOutBit>
		  MarkOddState;
 800326c:	2101      	movs	r1, #1
 800326e:	2003      	movs	r0, #3
 8003270:	f7ff fdba 	bl	8002de8 <WriteNUCLEO_LED>

		  // Wait for State 82 For Ready to Receive
		  while ( ReadInBit(2) != 1 )
 8003274:	e002      	b.n	800327c <MyMain+0x2a0>
				FlashNUCLEO_LED(jNUCLEO_BlueLED);
 8003276:	2002      	movs	r0, #2
 8003278:	f7ff fe03 	bl	8002e82 <FlashNUCLEO_LED>
		  while ( ReadInBit(2) != 1 )
 800327c:	2002      	movs	r0, #2
 800327e:	f7ff fe75 	bl	8002f6c <ReadInBit>
 8003282:	4603      	mov	r3, r0
 8003284:	2b01      	cmp	r3, #1
 8003286:	d1f6      	bne.n	8003276 <MyMain+0x29a>
		  MarkEvenState;
 8003288:	2100      	movs	r1, #0
 800328a:	2003      	movs	r0, #3
 800328c:	f7ff fdac 	bl	8002de8 <WriteNUCLEO_LED>

		  Transmit_CarRecords( pCurrentWorkingList, 3, 2, pQueryControl->jVerbosity );
 8003290:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 8003294:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8003298:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800329c:	2202      	movs	r2, #2
 800329e:	2103      	movs	r1, #3
 80032a0:	f7ff fb4e 	bl	8002940 <Transmit_CarRecords>

		  	  // In state 83,
		  MarkOddState;
 80032a4:	2101      	movs	r1, #1
 80032a6:	2003      	movs	r0, #3
 80032a8:	f7ff fd9e 	bl	8002de8 <WriteNUCLEO_LED>
		  WriteNUCLEO_LED(jNUCLEO_BlueLED, 0);  // Done transmitting
 80032ac:	2100      	movs	r1, #0
 80032ae:	2002      	movs	r0, #2
 80032b0:	f7ff fd9a 	bl	8002de8 <WriteNUCLEO_LED>

			  //Wait for State 84, Db Processed
		  while ( ReadInBit(2) != 0 )
 80032b4:	e002      	b.n	80032bc <MyMain+0x2e0>
				FlashNUCLEO_LED(jNUCLEO_GreenLED);
 80032b6:	2001      	movs	r0, #1
 80032b8:	f7ff fde3 	bl	8002e82 <FlashNUCLEO_LED>
		  while ( ReadInBit(2) != 0 )
 80032bc:	2002      	movs	r0, #2
 80032be:	f7ff fe55 	bl	8002f6c <ReadInBit>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1f6      	bne.n	80032b6 <MyMain+0x2da>
  while ( bKeepProcessingCommands ) {
 80032c8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f47f aef8 	bne.w	80030c2 <MyMain+0xe6>

	  }

  }

  return  0;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	2000003c 	.word	0x2000003c
 80032e4:	08012760 	.word	0x08012760
 80032e8:	08012770 	.word	0x08012770
 80032ec:	08012798 	.word	0x08012798
 80032f0:	080127a0 	.word	0x080127a0
 80032f4:	080127b0 	.word	0x080127b0
 80032f8:	080127e8 	.word	0x080127e8
 80032fc:	08012830 	.word	0x08012830
 8003300:	08012870 	.word	0x08012870

08003304 <HAL_UART_RxCpltCallback>:
 * Side Effects:        A character is transferred to cBufferIn.  
 *                      Interrupt is reactivated, for next character. 
 ********************************/
/* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
	// Tests for a 0 data on first call is because ficticious 0 data at head of a string has been seen.
  if (huart->Instance == UART5 && !( nUART5_ReceiveCalls==0 && UART5_IncomingByte == 0 ) )   {
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a1b      	ldr	r2, [pc, #108]	@ (8003380 <HAL_UART_RxCpltCallback+0x7c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d130      	bne.n	8003378 <HAL_UART_RxCpltCallback+0x74>
 8003316:	4b1b      	ldr	r3, [pc, #108]	@ (8003384 <HAL_UART_RxCpltCallback+0x80>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d103      	bne.n	8003326 <HAL_UART_RxCpltCallback+0x22>
 800331e:	4b1a      	ldr	r3, [pc, #104]	@ (8003388 <HAL_UART_RxCpltCallback+0x84>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d028      	beq.n	8003378 <HAL_UART_RxCpltCallback+0x74>
	  nUART5_ReceiveCalls++;
 8003326:	4b17      	ldr	r3, [pc, #92]	@ (8003384 <HAL_UART_RxCpltCallback+0x80>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	3301      	adds	r3, #1
 800332c:	4a15      	ldr	r2, [pc, #84]	@ (8003384 <HAL_UART_RxCpltCallback+0x80>)
 800332e:	6013      	str	r3, [r2, #0]

	if ( jLED_ForReception !=  jLED_NotSet )
 8003330:	4b16      	ldr	r3, [pc, #88]	@ (800338c <HAL_UART_RxCpltCallback+0x88>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003338:	d009      	beq.n	800334e <HAL_UART_RxCpltCallback+0x4a>
		WriteNUCLEO_LED(jLED_ForReception, nUART5_ReceiveCalls & 0x02 );
 800333a:	4b14      	ldr	r3, [pc, #80]	@ (800338c <HAL_UART_RxCpltCallback+0x88>)
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	4b11      	ldr	r3, [pc, #68]	@ (8003384 <HAL_UART_RxCpltCallback+0x80>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	4619      	mov	r1, r3
 8003348:	4610      	mov	r0, r2
 800334a:	f7ff fd4d 	bl	8002de8 <WriteNUCLEO_LED>

	if (jcBufferIn < nUART5_Buffer_Characters) {
 800334e:	4b10      	ldr	r3, [pc, #64]	@ (8003390 <HAL_UART_RxCpltCallback+0x8c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003356:	da0e      	bge.n	8003376 <HAL_UART_RxCpltCallback+0x72>
		//ReturnValue = fputc((int)UART5_IncomingByte, pFileWriteToBufferIn);
		//if (ReturnValue == EOF) while (1) ;
	//	fflush( pFileWriteToBufferIn );
		//jcBufferIn++;
		cBufferIn[ jcBufferIn++ ] = UART5_IncomingByte ;
 8003358:	4b0d      	ldr	r3, [pc, #52]	@ (8003390 <HAL_UART_RxCpltCallback+0x8c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	490c      	ldr	r1, [pc, #48]	@ (8003390 <HAL_UART_RxCpltCallback+0x8c>)
 8003360:	600a      	str	r2, [r1, #0]
 8003362:	4a09      	ldr	r2, [pc, #36]	@ (8003388 <HAL_UART_RxCpltCallback+0x84>)
 8003364:	7811      	ldrb	r1, [r2, #0]
 8003366:	4a0b      	ldr	r2, [pc, #44]	@ (8003394 <HAL_UART_RxCpltCallback+0x90>)
 8003368:	54d1      	strb	r1, [r2, r3]
		//  Figure this out
		while (1) ;
	}

    /* Reenable interrupt mode reception */
    HAL_UART_Receive_IT(&huart5, &UART5_IncomingByte, 1);
 800336a:	2201      	movs	r2, #1
 800336c:	4906      	ldr	r1, [pc, #24]	@ (8003388 <HAL_UART_RxCpltCallback+0x84>)
 800336e:	480a      	ldr	r0, [pc, #40]	@ (8003398 <HAL_UART_RxCpltCallback+0x94>)
 8003370:	f004 fbab 	bl	8007aca <HAL_UART_Receive_IT>
  }  // if UART5
}    // HAL_UART_RxCpltCallback
 8003374:	e000      	b.n	8003378 <HAL_UART_RxCpltCallback+0x74>
		while (1) ;
 8003376:	e7fe      	b.n	8003376 <HAL_UART_RxCpltCallback+0x72>
}    // HAL_UART_RxCpltCallback
 8003378:	bf00      	nop
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40005000 	.word	0x40005000
 8003384:	200017c4 	.word	0x200017c4
 8003388:	200017c1 	.word	0x200017c1
 800338c:	20000000 	.word	0x20000000
 8003390:	200017c8 	.word	0x200017c8
 8003394:	20000fbc 	.word	0x20000fbc
 8003398:	20001a58 	.word	0x20001a58

0800339c <Start_UART5_Reception>:
 *
 * Inputs:          None
 * Outputs:         SUCCESS if launching returns HAL_OK, else FAILURE 
 * Side Effects:    Launch receiving characters from UART5
********************************/
int  Start_UART5_Reception(void) {
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef  HAL_Status;
	int ReturnValue;


	UART5_IncomingByte  = 0;    // 0 is used to detect undesired initial interrupt
 80033a2:	4b0d      	ldr	r3, [pc, #52]	@ (80033d8 <Start_UART5_Reception+0x3c>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	701a      	strb	r2, [r3, #0]
	nUART5_ReceiveCalls = 0;    // 0 is used to detect undesired initial interrupt
 80033a8:	4b0c      	ldr	r3, [pc, #48]	@ (80033dc <Start_UART5_Reception+0x40>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]

	HAL_Status = HAL_UART_Receive_IT(&huart5, &UART5_IncomingByte, 1);
 80033ae:	2201      	movs	r2, #1
 80033b0:	4909      	ldr	r1, [pc, #36]	@ (80033d8 <Start_UART5_Reception+0x3c>)
 80033b2:	480b      	ldr	r0, [pc, #44]	@ (80033e0 <Start_UART5_Reception+0x44>)
 80033b4:	f004 fb89 	bl	8007aca <HAL_UART_Receive_IT>
 80033b8:	4603      	mov	r3, r0
 80033ba:	71fb      	strb	r3, [r7, #7]
	ReturnValue = ( HAL_Status == HAL_OK ) ? SUCCESS  :  FAILURE;
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <Start_UART5_Reception+0x2a>
 80033c2:	2300      	movs	r3, #0
 80033c4:	e001      	b.n	80033ca <Start_UART5_Reception+0x2e>
 80033c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80033ca:	603b      	str	r3, [r7, #0]
	return ReturnValue;
 80033cc:	683b      	ldr	r3, [r7, #0]
}  //  Start_UART5_Reception
 80033ce:	4618      	mov	r0, r3
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	200017c1 	.word	0x200017c1
 80033dc:	200017c4 	.word	0x200017c4
 80033e0:	20001a58 	.word	0x20001a58

080033e4 <Stop_UART5_Reception>:
 *
 * Inputs:          None
 * Outputs:         SUCCESS if Abort returns HAL_OK, else FAILURE
 * Side Effects:    Stop receiving characters from UART5
********************************/
int  Stop_UART5_Reception(void) {
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef  HAL_Status;
	int ReturnValue;

	HAL_Status = HAL_UART_AbortReceive(&huart5);
 80033ea:	4809      	ldr	r0, [pc, #36]	@ (8003410 <Stop_UART5_Reception+0x2c>)
 80033ec:	f004 fb9d 	bl	8007b2a <HAL_UART_AbortReceive>
 80033f0:	4603      	mov	r3, r0
 80033f2:	71fb      	strb	r3, [r7, #7]
	ReturnValue = ( HAL_Status == HAL_OK ) ? SUCCESS  :  FAILURE;
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <Stop_UART5_Reception+0x1a>
 80033fa:	2300      	movs	r3, #0
 80033fc:	e001      	b.n	8003402 <Stop_UART5_Reception+0x1e>
 80033fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003402:	603b      	str	r3, [r7, #0]
	return ReturnValue;
 8003404:	683b      	ldr	r3, [r7, #0]
}  //  Stop_UART5_Reception
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20001a58 	.word	0x20001a58

08003414 <BlockingTransmit_cBufferOut>:
 *
 * Inputs:          None
 * Outputs:         Count of characters transmitted,   else FAILURE
 * Side Effects:    Trans
********************************/
int BlockingTransmit_cBufferOut( void ) {
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  HAL_Status;
  int ReturnValue = 0, jCharacter;
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]
  for (jCharacter=0; jCharacter<jcBufferOut; jCharacter++ ) {
 800341e:	2300      	movs	r3, #0
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	e01a      	b.n	800345a <BlockingTransmit_cBufferOut+0x46>
	  HAL_Status = HAL_UART_Transmit( &huart5, (uint8_t *)&cBufferOut[jCharacter], 1, 100 );
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	4a12      	ldr	r2, [pc, #72]	@ (8003470 <BlockingTransmit_cBufferOut+0x5c>)
 8003428:	1899      	adds	r1, r3, r2
 800342a:	2364      	movs	r3, #100	@ 0x64
 800342c:	2201      	movs	r2, #1
 800342e:	4811      	ldr	r0, [pc, #68]	@ (8003474 <BlockingTransmit_cBufferOut+0x60>)
 8003430:	f004 fa17 	bl	8007862 <HAL_UART_Transmit>
 8003434:	4603      	mov	r3, r0
 8003436:	71fb      	strb	r3, [r7, #7]
	  if ( ReturnValue != FAILURE && HAL_Status == HAL_OK ) {
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800343e:	d006      	beq.n	800344e <BlockingTransmit_cBufferOut+0x3a>
 8003440:	79fb      	ldrb	r3, [r7, #7]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d103      	bne.n	800344e <BlockingTransmit_cBufferOut+0x3a>
		  ReturnValue++;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	3301      	adds	r3, #1
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	e002      	b.n	8003454 <BlockingTransmit_cBufferOut+0x40>
	  } else {
		  ReturnValue = FAILURE;
 800344e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003452:	60fb      	str	r3, [r7, #12]
  for (jCharacter=0; jCharacter<jcBufferOut; jCharacter++ ) {
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	3301      	adds	r3, #1
 8003458:	60bb      	str	r3, [r7, #8]
 800345a:	4b07      	ldr	r3, [pc, #28]	@ (8003478 <BlockingTransmit_cBufferOut+0x64>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	429a      	cmp	r2, r3
 8003462:	dbdf      	blt.n	8003424 <BlockingTransmit_cBufferOut+0x10>
	  }
  }

  return ReturnValue;
 8003464:	68fb      	ldr	r3, [r7, #12]
}  //  BlockingTransmit_cBufferOut
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	200013c0 	.word	0x200013c0
 8003474:	20001a58 	.word	0x20001a58
 8003478:	200017cc 	.word	0x200017cc

0800347c <UART5_OpenInStream>:
 * Inputs:              None
 * Outputs:              *FILE, handle to the input stream.
 * Side Effects:        The cBufferIn is opened for reading.  The Stream is initialized to the
 *                      Characters in cBufferIn;
********************************/
FILE * UART5_OpenInStream(void) {
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0

	if (jcBufferIn > 0) {
 8003480:	4b14      	ldr	r3, [pc, #80]	@ (80034d4 <UART5_OpenInStream+0x58>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	dd0a      	ble.n	800349e <UART5_OpenInStream+0x22>
	// Use the memory stream open
		pFileIn   = fmemopen(cBufferIn, jcBufferIn, "r");
 8003488:	4b12      	ldr	r3, [pc, #72]	@ (80034d4 <UART5_OpenInStream+0x58>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a12      	ldr	r2, [pc, #72]	@ (80034d8 <UART5_OpenInStream+0x5c>)
 800348e:	4619      	mov	r1, r3
 8003490:	4812      	ldr	r0, [pc, #72]	@ (80034dc <UART5_OpenInStream+0x60>)
 8003492:	f00a fde3 	bl	800e05c <fmemopen>
 8003496:	4603      	mov	r3, r0
 8003498:	4a11      	ldr	r2, [pc, #68]	@ (80034e0 <UART5_OpenInStream+0x64>)
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	e00f      	b.n	80034be <UART5_OpenInStream+0x42>
		//  fmemopen errors on a zero length string
		//  Normally, the pFileIn = NULL would be passed back to caller
		//  But here, we want life to be simple for students, and so a single ' ' is inserted in cBufferIn,
		//    and a length 1 buffer is opened.
		// Set first character to blank
		cBufferIn[0] = ' ';
 800349e:	4b0f      	ldr	r3, [pc, #60]	@ (80034dc <UART5_OpenInStream+0x60>)
 80034a0:	2220      	movs	r2, #32
 80034a2:	701a      	strb	r2, [r3, #0]
		jcBufferIn = 1;
 80034a4:	4b0b      	ldr	r3, [pc, #44]	@ (80034d4 <UART5_OpenInStream+0x58>)
 80034a6:	2201      	movs	r2, #1
 80034a8:	601a      	str	r2, [r3, #0]
		pFileIn   = fmemopen(cBufferIn, jcBufferIn, "r");
 80034aa:	4b0a      	ldr	r3, [pc, #40]	@ (80034d4 <UART5_OpenInStream+0x58>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a0a      	ldr	r2, [pc, #40]	@ (80034d8 <UART5_OpenInStream+0x5c>)
 80034b0:	4619      	mov	r1, r3
 80034b2:	480a      	ldr	r0, [pc, #40]	@ (80034dc <UART5_OpenInStream+0x60>)
 80034b4:	f00a fdd2 	bl	800e05c <fmemopen>
 80034b8:	4603      	mov	r3, r0
 80034ba:	4a09      	ldr	r2, [pc, #36]	@ (80034e0 <UART5_OpenInStream+0x64>)
 80034bc:	6013      	str	r3, [r2, #0]
	}

		//  Detect a failure to open pFileIn, and halt
	if ( pFileIn == NULL )
 80034be:	4b08      	ldr	r3, [pc, #32]	@ (80034e0 <UART5_OpenInStream+0x64>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <UART5_OpenInStream+0x4e>
		while(1) ;
 80034c6:	bf00      	nop
 80034c8:	e7fd      	b.n	80034c6 <UART5_OpenInStream+0x4a>

 // setvbuf(pFileIn, NULL, _IONBF, 0);

  return pFileIn;
 80034ca:	4b05      	ldr	r3, [pc, #20]	@ (80034e0 <UART5_OpenInStream+0x64>)
 80034cc:	681b      	ldr	r3, [r3, #0]
}  //  UART5_OpenInStream
 80034ce:	4618      	mov	r0, r3
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	200017c8 	.word	0x200017c8
 80034d8:	08012878 	.word	0x08012878
 80034dc:	20000fbc 	.word	0x20000fbc
 80034e0:	200017d0 	.word	0x200017d0

080034e4 <UART5_OpenOutStream>:
 *  UART5_OpenOutStream
 * Inputs:              None
 * Outputs:             *FILE, handle to the output stream.
 * Side Effects:        The cBufferOut is opened for writing
********************************/
FILE * UART5_OpenOutStream(void) {
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0

  pFileOut  = fmemopen(cBufferOut, nUART5_Buffer_Characters, "w");
 80034e8:	4a09      	ldr	r2, [pc, #36]	@ (8003510 <UART5_OpenOutStream+0x2c>)
 80034ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80034ee:	4809      	ldr	r0, [pc, #36]	@ (8003514 <UART5_OpenOutStream+0x30>)
 80034f0:	f00a fdb4 	bl	800e05c <fmemopen>
 80034f4:	4603      	mov	r3, r0
 80034f6:	4a08      	ldr	r2, [pc, #32]	@ (8003518 <UART5_OpenOutStream+0x34>)
 80034f8:	6013      	str	r3, [r2, #0]
  // setvbuf(pFileOut, NULL, _IONBF, 0);

	//  Detect a failure to open pFileOut, and halt
  if ( pFileOut == NULL )
 80034fa:	4b07      	ldr	r3, [pc, #28]	@ (8003518 <UART5_OpenOutStream+0x34>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <UART5_OpenOutStream+0x22>
	  while(1) ;
 8003502:	bf00      	nop
 8003504:	e7fd      	b.n	8003502 <UART5_OpenOutStream+0x1e>

  return pFileOut;
 8003506:	4b04      	ldr	r3, [pc, #16]	@ (8003518 <UART5_OpenOutStream+0x34>)
 8003508:	681b      	ldr	r3, [r3, #0]
}  //
 800350a:	4618      	mov	r0, r3
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	0801287c 	.word	0x0801287c
 8003514:	200013c0 	.word	0x200013c0
 8003518:	200017d4 	.word	0x200017d4

0800351c <UART5_CloseOutStream>:
 *  UART5_CloseOutStream
 * Inputs:              FILE *pFileOut,  output stream handle to close
 * Outputs:             None
 * Side Effects:        The cBufferOut is Closed for reading
********************************/
int UART5_CloseOutStream(FILE *pFileOut) {
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  int      ReturnValue;
  fpos_t   jPosition;

  fflush( pFileOut );				// Transfer characters to cBufferOut;
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f009 fe2f 	bl	800d188 <fflush>
  fgetpos( pFileOut, &jPosition );  // Find total number of characters transferred.
 800352a:	f107 0308 	add.w	r3, r7, #8
 800352e:	4619      	mov	r1, r3
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f009 fe47 	bl	800d1c4 <fgetpos>
  jcBufferOut = jPosition;      	// Set jcBufferOut to indicate the number of characters in the out-bound buffer.
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	4a0a      	ldr	r2, [pc, #40]	@ (8003564 <UART5_CloseOutStream+0x48>)
 800353a:	6013      	str	r3, [r2, #0]

  // Validate that jPosition looks correct.
  if ( strlen(cBufferOut) != jcBufferOut )
 800353c:	480a      	ldr	r0, [pc, #40]	@ (8003568 <UART5_CloseOutStream+0x4c>)
 800353e:	f7fc feb7 	bl	80002b0 <strlen>
 8003542:	4603      	mov	r3, r0
 8003544:	4a07      	ldr	r2, [pc, #28]	@ (8003564 <UART5_CloseOutStream+0x48>)
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	4293      	cmp	r3, r2
 800354a:	d001      	beq.n	8003550 <UART5_CloseOutStream+0x34>
	  while(1) ;  // Halt
 800354c:	bf00      	nop
 800354e:	e7fd      	b.n	800354c <UART5_CloseOutStream+0x30>

  ReturnValue = fclose( pFileOut );
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f009 fd41 	bl	800cfd8 <fclose>
 8003556:	60f8      	str	r0, [r7, #12]
  return ReturnValue;
 8003558:	68fb      	ldr	r3, [r7, #12]
}  //  UART5_CloseOutStream
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	200017cc 	.word	0x200017cc
 8003568:	200013c0 	.word	0x200013c0

0800356c <Initialize_cBufferIn>:
 *
 * Inputs:         A character used to fill the buffer 
 * Outputs:        None
 * Side Effects:   Global variables cBufferIn and jcBufferIn are initialized
********************************/
void Initialize_cBufferIn( char ACharacter) {
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	71fb      	strb	r3, [r7, #7]
  memset( cBufferIn, ACharacter, nUART5_Buffer_Characters+1) ;
 8003576:	79fb      	ldrb	r3, [r7, #7]
 8003578:	f240 4201 	movw	r2, #1025	@ 0x401
 800357c:	4619      	mov	r1, r3
 800357e:	4805      	ldr	r0, [pc, #20]	@ (8003594 <Initialize_cBufferIn+0x28>)
 8003580:	f00a fd76 	bl	800e070 <memset>
  jcBufferIn = 0; 
 8003584:	4b04      	ldr	r3, [pc, #16]	@ (8003598 <Initialize_cBufferIn+0x2c>)
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
}
 800358a:	bf00      	nop
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	20000fbc 	.word	0x20000fbc
 8003598:	200017c8 	.word	0x200017c8

0800359c <Initialize_cBufferOut>:
 *
 * Inputs:         A character used to fill the buffer 
 * Outputs:        None
 * Side Effects:   Global variables cBufferOut and jcBufferOut are initialized
********************************/
void Initialize_cBufferOut( char ACharacter) {
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	71fb      	strb	r3, [r7, #7]
  memset( cBufferOut, ACharacter, nUART5_Buffer_Characters+1) ;
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	f240 4201 	movw	r2, #1025	@ 0x401
 80035ac:	4619      	mov	r1, r3
 80035ae:	4805      	ldr	r0, [pc, #20]	@ (80035c4 <Initialize_cBufferOut+0x28>)
 80035b0:	f00a fd5e 	bl	800e070 <memset>
  jcBufferOut = 0; 
 80035b4:	4b04      	ldr	r3, [pc, #16]	@ (80035c8 <Initialize_cBufferOut+0x2c>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]
}
 80035ba:	bf00      	nop
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	200013c0 	.word	0x200013c0
 80035c8:	200017cc 	.word	0x200017cc

080035cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035d2:	f000 fdab 	bl	800412c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035d6:	f000 f83b 	bl	8003650 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035da:	f000 f9a7 	bl	800392c <MX_GPIO_Init>
  MX_ETH_Init();
 80035de:	f000 f8a1 	bl	8003724 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80035e2:	f000 f979 	bl	80038d8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80035e6:	f000 f8ff 	bl	80037e8 <MX_TIM2_Init>
  MX_USB_HOST_Init();
 80035ea:	f008 fa6d 	bl	800bac8 <MX_USB_HOST_Init>
  MX_UART5_Init();
 80035ee:	f000 f949 	bl	8003884 <MX_UART5_Init>
  MX_RNG_Init();
 80035f2:	f000 f8e5 	bl	80037c0 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  // This must come after initialization of huart3
  ReturnValue = setvbuf(stdin, NULL, _IONBF, 0); 	// Needed for serial port connection to work with scanf
 80035f6:	4b14      	ldr	r3, [pc, #80]	@ (8003648 <main+0x7c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6858      	ldr	r0, [r3, #4]
 80035fc:	2300      	movs	r3, #0
 80035fe:	2202      	movs	r2, #2
 8003600:	2100      	movs	r1, #0
 8003602:	f00a f92f 	bl	800d864 <setvbuf>
 8003606:	6078      	str	r0, [r7, #4]
  if (ReturnValue != 0) while (1) ;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <main+0x46>
 800360e:	bf00      	nop
 8003610:	e7fd      	b.n	800360e <main+0x42>
  ReturnValue = setvbuf(stdout, NULL, _IONBF, 0);	// Needed, so that output is unbuffered, otherwise fflush(stdout) or \n required for serial output to be emitted.
 8003612:	4b0d      	ldr	r3, [pc, #52]	@ (8003648 <main+0x7c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6898      	ldr	r0, [r3, #8]
 8003618:	2300      	movs	r3, #0
 800361a:	2202      	movs	r2, #2
 800361c:	2100      	movs	r1, #0
 800361e:	f00a f921 	bl	800d864 <setvbuf>
 8003622:	6078      	str	r0, [r7, #4]
  if (ReturnValue != 0) while (1) ;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <main+0x62>
 800362a:	bf00      	nop
 800362c:	e7fd      	b.n	800362a <main+0x5e>
  printf("\f");						// Clear anything currently on the Putty screen (\f is "form feed," and clears the Putty screen)
 800362e:	200c      	movs	r0, #12
 8003630:	f00a f876 	bl	800d720 <putchar>

  HAL_TIM_Base_Start(&htim2);  // Start the timer
 8003634:	4805      	ldr	r0, [pc, #20]	@ (800364c <main+0x80>)
 8003636:	f003 fde1 	bl	80071fc <HAL_TIM_Base_Start>

  ReturnValue = MyMain();
 800363a:	f7ff fccf 	bl	8002fdc <MyMain>
 800363e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8003640:	f008 fa68 	bl	800bb14 <MX_USB_HOST_Process>
 8003644:	e7fc      	b.n	8003640 <main+0x74>
 8003646:	bf00      	nop
 8003648:	2000003c 	.word	0x2000003c
 800364c:	20001a10 	.word	0x20001a10

08003650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b094      	sub	sp, #80	@ 0x50
 8003654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003656:	f107 0320 	add.w	r3, r7, #32
 800365a:	2230      	movs	r2, #48	@ 0x30
 800365c:	2100      	movs	r1, #0
 800365e:	4618      	mov	r0, r3
 8003660:	f00a fd06 	bl	800e070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003664:	f107 030c 	add.w	r3, r7, #12
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	605a      	str	r2, [r3, #4]
 800366e:	609a      	str	r2, [r3, #8]
 8003670:	60da      	str	r2, [r3, #12]
 8003672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003674:	2300      	movs	r3, #0
 8003676:	60bb      	str	r3, [r7, #8]
 8003678:	4b28      	ldr	r3, [pc, #160]	@ (800371c <SystemClock_Config+0xcc>)
 800367a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367c:	4a27      	ldr	r2, [pc, #156]	@ (800371c <SystemClock_Config+0xcc>)
 800367e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003682:	6413      	str	r3, [r2, #64]	@ 0x40
 8003684:	4b25      	ldr	r3, [pc, #148]	@ (800371c <SystemClock_Config+0xcc>)
 8003686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003690:	2300      	movs	r3, #0
 8003692:	607b      	str	r3, [r7, #4]
 8003694:	4b22      	ldr	r3, [pc, #136]	@ (8003720 <SystemClock_Config+0xd0>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a21      	ldr	r2, [pc, #132]	@ (8003720 <SystemClock_Config+0xd0>)
 800369a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003720 <SystemClock_Config+0xd0>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80036a8:	607b      	str	r3, [r7, #4]
 80036aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80036ac:	2301      	movs	r3, #1
 80036ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80036b0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80036b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036b6:	2302      	movs	r3, #2
 80036b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80036ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80036be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80036c0:	2304      	movs	r3, #4
 80036c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80036c4:	23a8      	movs	r3, #168	@ 0xa8
 80036c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036c8:	2302      	movs	r3, #2
 80036ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80036cc:	2307      	movs	r3, #7
 80036ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036d0:	f107 0320 	add.w	r3, r7, #32
 80036d4:	4618      	mov	r0, r3
 80036d6:	f003 f87f 	bl	80067d8 <HAL_RCC_OscConfig>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80036e0:	f000 fa02 	bl	8003ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036e4:	230f      	movs	r3, #15
 80036e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036e8:	2302      	movs	r3, #2
 80036ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80036f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80036f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80036f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80036fc:	f107 030c 	add.w	r3, r7, #12
 8003700:	2105      	movs	r1, #5
 8003702:	4618      	mov	r0, r3
 8003704:	f003 fae0 	bl	8006cc8 <HAL_RCC_ClockConfig>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800370e:	f000 f9eb 	bl	8003ae8 <Error_Handler>
  }
}
 8003712:	bf00      	nop
 8003714:	3750      	adds	r7, #80	@ 0x50
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40023800 	.word	0x40023800
 8003720:	40007000 	.word	0x40007000

08003724 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8003728:	4b1f      	ldr	r3, [pc, #124]	@ (80037a8 <MX_ETH_Init+0x84>)
 800372a:	4a20      	ldr	r2, [pc, #128]	@ (80037ac <MX_ETH_Init+0x88>)
 800372c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800372e:	4b20      	ldr	r3, [pc, #128]	@ (80037b0 <MX_ETH_Init+0x8c>)
 8003730:	2200      	movs	r2, #0
 8003732:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8003734:	4b1e      	ldr	r3, [pc, #120]	@ (80037b0 <MX_ETH_Init+0x8c>)
 8003736:	2280      	movs	r2, #128	@ 0x80
 8003738:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800373a:	4b1d      	ldr	r3, [pc, #116]	@ (80037b0 <MX_ETH_Init+0x8c>)
 800373c:	22e1      	movs	r2, #225	@ 0xe1
 800373e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8003740:	4b1b      	ldr	r3, [pc, #108]	@ (80037b0 <MX_ETH_Init+0x8c>)
 8003742:	2200      	movs	r2, #0
 8003744:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8003746:	4b1a      	ldr	r3, [pc, #104]	@ (80037b0 <MX_ETH_Init+0x8c>)
 8003748:	2200      	movs	r2, #0
 800374a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800374c:	4b18      	ldr	r3, [pc, #96]	@ (80037b0 <MX_ETH_Init+0x8c>)
 800374e:	2200      	movs	r2, #0
 8003750:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8003752:	4b15      	ldr	r3, [pc, #84]	@ (80037a8 <MX_ETH_Init+0x84>)
 8003754:	4a16      	ldr	r2, [pc, #88]	@ (80037b0 <MX_ETH_Init+0x8c>)
 8003756:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003758:	4b13      	ldr	r3, [pc, #76]	@ (80037a8 <MX_ETH_Init+0x84>)
 800375a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800375e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003760:	4b11      	ldr	r3, [pc, #68]	@ (80037a8 <MX_ETH_Init+0x84>)
 8003762:	4a14      	ldr	r2, [pc, #80]	@ (80037b4 <MX_ETH_Init+0x90>)
 8003764:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003766:	4b10      	ldr	r3, [pc, #64]	@ (80037a8 <MX_ETH_Init+0x84>)
 8003768:	4a13      	ldr	r2, [pc, #76]	@ (80037b8 <MX_ETH_Init+0x94>)
 800376a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800376c:	4b0e      	ldr	r3, [pc, #56]	@ (80037a8 <MX_ETH_Init+0x84>)
 800376e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8003772:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8003774:	480c      	ldr	r0, [pc, #48]	@ (80037a8 <MX_ETH_Init+0x84>)
 8003776:	f000 ff1f 	bl	80045b8 <HAL_ETH_Init>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8003780:	f000 f9b2 	bl	8003ae8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003784:	2238      	movs	r2, #56	@ 0x38
 8003786:	2100      	movs	r1, #0
 8003788:	480c      	ldr	r0, [pc, #48]	@ (80037bc <MX_ETH_Init+0x98>)
 800378a:	f00a fc71 	bl	800e070 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800378e:	4b0b      	ldr	r3, [pc, #44]	@ (80037bc <MX_ETH_Init+0x98>)
 8003790:	2221      	movs	r2, #33	@ 0x21
 8003792:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003794:	4b09      	ldr	r3, [pc, #36]	@ (80037bc <MX_ETH_Init+0x98>)
 8003796:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800379a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800379c:	4b07      	ldr	r3, [pc, #28]	@ (80037bc <MX_ETH_Init+0x98>)
 800379e:	2200      	movs	r2, #0
 80037a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20001950 	.word	0x20001950
 80037ac:	40028000 	.word	0x40028000
 80037b0:	20001ae0 	.word	0x20001ae0
 80037b4:	200018b0 	.word	0x200018b0
 80037b8:	20001810 	.word	0x20001810
 80037bc:	200017d8 	.word	0x200017d8

080037c0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80037c4:	4b06      	ldr	r3, [pc, #24]	@ (80037e0 <MX_RNG_Init+0x20>)
 80037c6:	4a07      	ldr	r2, [pc, #28]	@ (80037e4 <MX_RNG_Init+0x24>)
 80037c8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80037ca:	4805      	ldr	r0, [pc, #20]	@ (80037e0 <MX_RNG_Init+0x20>)
 80037cc:	f003 fc9c 	bl	8007108 <HAL_RNG_Init>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80037d6:	f000 f987 	bl	8003ae8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	20001a00 	.word	0x20001a00
 80037e4:	50060800 	.word	0x50060800

080037e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037ee:	f107 0308 	add.w	r3, r7, #8
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	605a      	str	r2, [r3, #4]
 80037f8:	609a      	str	r2, [r3, #8]
 80037fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037fc:	463b      	mov	r3, r7
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003804:	4b1e      	ldr	r3, [pc, #120]	@ (8003880 <MX_TIM2_Init+0x98>)
 8003806:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800380a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 845-1;
 800380c:	4b1c      	ldr	r3, [pc, #112]	@ (8003880 <MX_TIM2_Init+0x98>)
 800380e:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 8003812:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003814:	4b1a      	ldr	r3, [pc, #104]	@ (8003880 <MX_TIM2_Init+0x98>)
 8003816:	2200      	movs	r2, #0
 8003818:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967296-1;
 800381a:	4b19      	ldr	r3, [pc, #100]	@ (8003880 <MX_TIM2_Init+0x98>)
 800381c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003820:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003822:	4b17      	ldr	r3, [pc, #92]	@ (8003880 <MX_TIM2_Init+0x98>)
 8003824:	2200      	movs	r2, #0
 8003826:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003828:	4b15      	ldr	r3, [pc, #84]	@ (8003880 <MX_TIM2_Init+0x98>)
 800382a:	2200      	movs	r2, #0
 800382c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800382e:	4814      	ldr	r0, [pc, #80]	@ (8003880 <MX_TIM2_Init+0x98>)
 8003830:	f003 fc94 	bl	800715c <HAL_TIM_Base_Init>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800383a:	f000 f955 	bl	8003ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800383e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003842:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003844:	f107 0308 	add.w	r3, r7, #8
 8003848:	4619      	mov	r1, r3
 800384a:	480d      	ldr	r0, [pc, #52]	@ (8003880 <MX_TIM2_Init+0x98>)
 800384c:	f003 fd3e 	bl	80072cc <HAL_TIM_ConfigClockSource>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003856:	f000 f947 	bl	8003ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800385a:	2300      	movs	r3, #0
 800385c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800385e:	2300      	movs	r3, #0
 8003860:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003862:	463b      	mov	r3, r7
 8003864:	4619      	mov	r1, r3
 8003866:	4806      	ldr	r0, [pc, #24]	@ (8003880 <MX_TIM2_Init+0x98>)
 8003868:	f003 ff32 	bl	80076d0 <HAL_TIMEx_MasterConfigSynchronization>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003872:	f000 f939 	bl	8003ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003876:	bf00      	nop
 8003878:	3718      	adds	r7, #24
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20001a10 	.word	0x20001a10

08003884 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003888:	4b11      	ldr	r3, [pc, #68]	@ (80038d0 <MX_UART5_Init+0x4c>)
 800388a:	4a12      	ldr	r2, [pc, #72]	@ (80038d4 <MX_UART5_Init+0x50>)
 800388c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800388e:	4b10      	ldr	r3, [pc, #64]	@ (80038d0 <MX_UART5_Init+0x4c>)
 8003890:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003894:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003896:	4b0e      	ldr	r3, [pc, #56]	@ (80038d0 <MX_UART5_Init+0x4c>)
 8003898:	2200      	movs	r2, #0
 800389a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800389c:	4b0c      	ldr	r3, [pc, #48]	@ (80038d0 <MX_UART5_Init+0x4c>)
 800389e:	2200      	movs	r2, #0
 80038a0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80038a2:	4b0b      	ldr	r3, [pc, #44]	@ (80038d0 <MX_UART5_Init+0x4c>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80038a8:	4b09      	ldr	r3, [pc, #36]	@ (80038d0 <MX_UART5_Init+0x4c>)
 80038aa:	220c      	movs	r2, #12
 80038ac:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038ae:	4b08      	ldr	r3, [pc, #32]	@ (80038d0 <MX_UART5_Init+0x4c>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80038b4:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <MX_UART5_Init+0x4c>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80038ba:	4805      	ldr	r0, [pc, #20]	@ (80038d0 <MX_UART5_Init+0x4c>)
 80038bc:	f003 ff84 	bl	80077c8 <HAL_UART_Init>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80038c6:	f000 f90f 	bl	8003ae8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80038ca:	bf00      	nop
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20001a58 	.word	0x20001a58
 80038d4:	40005000 	.word	0x40005000

080038d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80038dc:	4b11      	ldr	r3, [pc, #68]	@ (8003924 <MX_USART3_UART_Init+0x4c>)
 80038de:	4a12      	ldr	r2, [pc, #72]	@ (8003928 <MX_USART3_UART_Init+0x50>)
 80038e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80038e2:	4b10      	ldr	r3, [pc, #64]	@ (8003924 <MX_USART3_UART_Init+0x4c>)
 80038e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80038e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80038ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003924 <MX_USART3_UART_Init+0x4c>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80038f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003924 <MX_USART3_UART_Init+0x4c>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80038f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003924 <MX_USART3_UART_Init+0x4c>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80038fc:	4b09      	ldr	r3, [pc, #36]	@ (8003924 <MX_USART3_UART_Init+0x4c>)
 80038fe:	220c      	movs	r2, #12
 8003900:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003902:	4b08      	ldr	r3, [pc, #32]	@ (8003924 <MX_USART3_UART_Init+0x4c>)
 8003904:	2200      	movs	r2, #0
 8003906:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003908:	4b06      	ldr	r3, [pc, #24]	@ (8003924 <MX_USART3_UART_Init+0x4c>)
 800390a:	2200      	movs	r2, #0
 800390c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800390e:	4805      	ldr	r0, [pc, #20]	@ (8003924 <MX_USART3_UART_Init+0x4c>)
 8003910:	f003 ff5a 	bl	80077c8 <HAL_UART_Init>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800391a:	f000 f8e5 	bl	8003ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800391e:	bf00      	nop
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20001a9c 	.word	0x20001a9c
 8003928:	40004800 	.word	0x40004800

0800392c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08c      	sub	sp, #48	@ 0x30
 8003930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003932:	f107 031c 	add.w	r3, r7, #28
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	605a      	str	r2, [r3, #4]
 800393c:	609a      	str	r2, [r3, #8]
 800393e:	60da      	str	r2, [r3, #12]
 8003940:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003942:	2300      	movs	r3, #0
 8003944:	61bb      	str	r3, [r7, #24]
 8003946:	4b62      	ldr	r3, [pc, #392]	@ (8003ad0 <MX_GPIO_Init+0x1a4>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394a:	4a61      	ldr	r2, [pc, #388]	@ (8003ad0 <MX_GPIO_Init+0x1a4>)
 800394c:	f043 0310 	orr.w	r3, r3, #16
 8003950:	6313      	str	r3, [r2, #48]	@ 0x30
 8003952:	4b5f      	ldr	r3, [pc, #380]	@ (8003ad0 <MX_GPIO_Init+0x1a4>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	61bb      	str	r3, [r7, #24]
 800395c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800395e:	2300      	movs	r3, #0
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	4b5b      	ldr	r3, [pc, #364]	@ (8003ad0 <MX_GPIO_Init+0x1a4>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003966:	4a5a      	ldr	r2, [pc, #360]	@ (8003ad0 <MX_GPIO_Init+0x1a4>)
 8003968:	f043 0304 	orr.w	r3, r3, #4
 800396c:	6313      	str	r3, [r2, #48]	@ 0x30
 800396e:	4b58      	ldr	r3, [pc, #352]	@ (8003ad0 <MX_GPIO_Init+0x1a4>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	4b54      	ldr	r3, [pc, #336]	@ (8003ad0 <MX_GPIO_Init+0x1a4>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003982:	4a53      	ldr	r2, [pc, #332]	@ (8003ad0 <MX_GPIO_Init+0x1a4>)
 8003984:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003988:	6313      	str	r3, [r2, #48]	@ 0x30
 800398a:	4b51      	ldr	r3, [pc, #324]	@ (8003ad0 <MX_GPIO_Init+0x1a4>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	4b4d      	ldr	r3, [pc, #308]	@ (8003ad0 <MX_GPIO_Init+0x1a4>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399e:	4a4c      	ldr	r2, [pc, #304]	@ (8003ad0 <MX_GPIO_Init+0x1a4>)
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80039a6:	4b4a      	ldr	r3, [pc, #296]	@ (8003ad0 <MX_GPIO_Init+0x1a4>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	4b46      	ldr	r3, [pc, #280]	@ (8003ad0 <MX_GPIO_Init+0x1a4>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ba:	4a45      	ldr	r2, [pc, #276]	@ (8003ad0 <MX_GPIO_Init+0x1a4>)
 80039bc:	f043 0302 	orr.w	r3, r3, #2
 80039c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80039c2:	4b43      	ldr	r3, [pc, #268]	@ (8003ad0 <MX_GPIO_Init+0x1a4>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	60bb      	str	r3, [r7, #8]
 80039cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80039ce:	2300      	movs	r3, #0
 80039d0:	607b      	str	r3, [r7, #4]
 80039d2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ad0 <MX_GPIO_Init+0x1a4>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d6:	4a3e      	ldr	r2, [pc, #248]	@ (8003ad0 <MX_GPIO_Init+0x1a4>)
 80039d8:	f043 0308 	orr.w	r3, r3, #8
 80039dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80039de:	4b3c      	ldr	r3, [pc, #240]	@ (8003ad0 <MX_GPIO_Init+0x1a4>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	607b      	str	r3, [r7, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80039ea:	2300      	movs	r3, #0
 80039ec:	603b      	str	r3, [r7, #0]
 80039ee:	4b38      	ldr	r3, [pc, #224]	@ (8003ad0 <MX_GPIO_Init+0x1a4>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f2:	4a37      	ldr	r2, [pc, #220]	@ (8003ad0 <MX_GPIO_Init+0x1a4>)
 80039f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80039fa:	4b35      	ldr	r3, [pc, #212]	@ (8003ad0 <MX_GPIO_Init+0x1a4>)
 80039fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a02:	603b      	str	r3, [r7, #0]
 8003a04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OutBit0_Pin|OutBit1_Pin|OutBit2_Pin|OutBit3_Pin, GPIO_PIN_RESET);
 8003a06:	2200      	movs	r2, #0
 8003a08:	2174      	movs	r1, #116	@ 0x74
 8003a0a:	4832      	ldr	r0, [pc, #200]	@ (8003ad4 <MX_GPIO_Init+0x1a8>)
 8003a0c:	f001 fac0 	bl	8004f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003a10:	2200      	movs	r2, #0
 8003a12:	f244 0181 	movw	r1, #16513	@ 0x4081
 8003a16:	4830      	ldr	r0, [pc, #192]	@ (8003ad8 <MX_GPIO_Init+0x1ac>)
 8003a18:	f001 faba 	bl	8004f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	2140      	movs	r1, #64	@ 0x40
 8003a20:	482e      	ldr	r0, [pc, #184]	@ (8003adc <MX_GPIO_Init+0x1b0>)
 8003a22:	f001 fab5 	bl	8004f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OutBit0_Pin OutBit1_Pin OutBit2_Pin OutBit3_Pin */
  GPIO_InitStruct.Pin = OutBit0_Pin|OutBit1_Pin|OutBit2_Pin|OutBit3_Pin;
 8003a26:	2374      	movs	r3, #116	@ 0x74
 8003a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a32:	2300      	movs	r3, #0
 8003a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a36:	f107 031c 	add.w	r3, r7, #28
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4825      	ldr	r0, [pc, #148]	@ (8003ad4 <MX_GPIO_Init+0x1a8>)
 8003a3e:	f001 f8e3 	bl	8004c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003a42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a48:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003a52:	f107 031c 	add.w	r3, r7, #28
 8003a56:	4619      	mov	r1, r3
 8003a58:	4821      	ldr	r0, [pc, #132]	@ (8003ae0 <MX_GPIO_Init+0x1b4>)
 8003a5a:	f001 f8d5 	bl	8004c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003a5e:	f244 0381 	movw	r3, #16513	@ 0x4081
 8003a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a64:	2301      	movs	r3, #1
 8003a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a70:	f107 031c 	add.w	r3, r7, #28
 8003a74:	4619      	mov	r1, r3
 8003a76:	4818      	ldr	r0, [pc, #96]	@ (8003ad8 <MX_GPIO_Init+0x1ac>)
 8003a78:	f001 f8c6 	bl	8004c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003a7c:	2340      	movs	r3, #64	@ 0x40
 8003a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a80:	2301      	movs	r3, #1
 8003a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003a8c:	f107 031c 	add.w	r3, r7, #28
 8003a90:	4619      	mov	r1, r3
 8003a92:	4812      	ldr	r0, [pc, #72]	@ (8003adc <MX_GPIO_Init+0x1b0>)
 8003a94:	f001 f8b8 	bl	8004c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003a98:	2380      	movs	r3, #128	@ 0x80
 8003a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003aa4:	f107 031c 	add.w	r3, r7, #28
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	480c      	ldr	r0, [pc, #48]	@ (8003adc <MX_GPIO_Init+0x1b0>)
 8003aac:	f001 f8ac 	bl	8004c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : InBit3_Pin InBit2_Pin InBit1_Pin InBit0_Pin */
  GPIO_InitStruct.Pin = InBit3_Pin|InBit2_Pin|InBit1_Pin|InBit0_Pin;
 8003ab0:	23f0      	movs	r3, #240	@ 0xf0
 8003ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003abc:	f107 031c 	add.w	r3, r7, #28
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4808      	ldr	r0, [pc, #32]	@ (8003ae4 <MX_GPIO_Init+0x1b8>)
 8003ac4:	f001 f8a0 	bl	8004c08 <HAL_GPIO_Init>

}
 8003ac8:	bf00      	nop
 8003aca:	3730      	adds	r7, #48	@ 0x30
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	40020400 	.word	0x40020400
 8003adc:	40021800 	.word	0x40021800
 8003ae0:	40020800 	.word	0x40020800
 8003ae4:	40020c00 	.word	0x40020c00

08003ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003aec:	b672      	cpsid	i
}
 8003aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003af0:	bf00      	nop
 8003af2:	e7fd      	b.n	8003af0 <Error_Handler+0x8>

08003af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	607b      	str	r3, [r7, #4]
 8003afe:	4b10      	ldr	r3, [pc, #64]	@ (8003b40 <HAL_MspInit+0x4c>)
 8003b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b02:	4a0f      	ldr	r2, [pc, #60]	@ (8003b40 <HAL_MspInit+0x4c>)
 8003b04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b40 <HAL_MspInit+0x4c>)
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b12:	607b      	str	r3, [r7, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b16:	2300      	movs	r3, #0
 8003b18:	603b      	str	r3, [r7, #0]
 8003b1a:	4b09      	ldr	r3, [pc, #36]	@ (8003b40 <HAL_MspInit+0x4c>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1e:	4a08      	ldr	r2, [pc, #32]	@ (8003b40 <HAL_MspInit+0x4c>)
 8003b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b26:	4b06      	ldr	r3, [pc, #24]	@ (8003b40 <HAL_MspInit+0x4c>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40023800 	.word	0x40023800

08003b44 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08e      	sub	sp, #56	@ 0x38
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	605a      	str	r2, [r3, #4]
 8003b56:	609a      	str	r2, [r3, #8]
 8003b58:	60da      	str	r2, [r3, #12]
 8003b5a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a55      	ldr	r2, [pc, #340]	@ (8003cb8 <HAL_ETH_MspInit+0x174>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	f040 80a4 	bne.w	8003cb0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003b68:	2300      	movs	r3, #0
 8003b6a:	623b      	str	r3, [r7, #32]
 8003b6c:	4b53      	ldr	r3, [pc, #332]	@ (8003cbc <HAL_ETH_MspInit+0x178>)
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b70:	4a52      	ldr	r2, [pc, #328]	@ (8003cbc <HAL_ETH_MspInit+0x178>)
 8003b72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b76:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b78:	4b50      	ldr	r3, [pc, #320]	@ (8003cbc <HAL_ETH_MspInit+0x178>)
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b80:	623b      	str	r3, [r7, #32]
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	2300      	movs	r3, #0
 8003b86:	61fb      	str	r3, [r7, #28]
 8003b88:	4b4c      	ldr	r3, [pc, #304]	@ (8003cbc <HAL_ETH_MspInit+0x178>)
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8c:	4a4b      	ldr	r2, [pc, #300]	@ (8003cbc <HAL_ETH_MspInit+0x178>)
 8003b8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b92:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b94:	4b49      	ldr	r3, [pc, #292]	@ (8003cbc <HAL_ETH_MspInit+0x178>)
 8003b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b98:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b9c:	61fb      	str	r3, [r7, #28]
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61bb      	str	r3, [r7, #24]
 8003ba4:	4b45      	ldr	r3, [pc, #276]	@ (8003cbc <HAL_ETH_MspInit+0x178>)
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba8:	4a44      	ldr	r2, [pc, #272]	@ (8003cbc <HAL_ETH_MspInit+0x178>)
 8003baa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003bae:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bb0:	4b42      	ldr	r3, [pc, #264]	@ (8003cbc <HAL_ETH_MspInit+0x178>)
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bb8:	61bb      	str	r3, [r7, #24]
 8003bba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	4b3e      	ldr	r3, [pc, #248]	@ (8003cbc <HAL_ETH_MspInit+0x178>)
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc4:	4a3d      	ldr	r2, [pc, #244]	@ (8003cbc <HAL_ETH_MspInit+0x178>)
 8003bc6:	f043 0304 	orr.w	r3, r3, #4
 8003bca:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bcc:	4b3b      	ldr	r3, [pc, #236]	@ (8003cbc <HAL_ETH_MspInit+0x178>)
 8003bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bd8:	2300      	movs	r3, #0
 8003bda:	613b      	str	r3, [r7, #16]
 8003bdc:	4b37      	ldr	r3, [pc, #220]	@ (8003cbc <HAL_ETH_MspInit+0x178>)
 8003bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be0:	4a36      	ldr	r2, [pc, #216]	@ (8003cbc <HAL_ETH_MspInit+0x178>)
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003be8:	4b34      	ldr	r3, [pc, #208]	@ (8003cbc <HAL_ETH_MspInit+0x178>)
 8003bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	4b30      	ldr	r3, [pc, #192]	@ (8003cbc <HAL_ETH_MspInit+0x178>)
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfc:	4a2f      	ldr	r2, [pc, #188]	@ (8003cbc <HAL_ETH_MspInit+0x178>)
 8003bfe:	f043 0302 	orr.w	r3, r3, #2
 8003c02:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c04:	4b2d      	ldr	r3, [pc, #180]	@ (8003cbc <HAL_ETH_MspInit+0x178>)
 8003c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c10:	2300      	movs	r3, #0
 8003c12:	60bb      	str	r3, [r7, #8]
 8003c14:	4b29      	ldr	r3, [pc, #164]	@ (8003cbc <HAL_ETH_MspInit+0x178>)
 8003c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c18:	4a28      	ldr	r2, [pc, #160]	@ (8003cbc <HAL_ETH_MspInit+0x178>)
 8003c1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c20:	4b26      	ldr	r3, [pc, #152]	@ (8003cbc <HAL_ETH_MspInit+0x178>)
 8003c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003c2c:	2332      	movs	r3, #50	@ 0x32
 8003c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c30:	2302      	movs	r3, #2
 8003c32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c34:	2300      	movs	r3, #0
 8003c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003c3c:	230b      	movs	r3, #11
 8003c3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c44:	4619      	mov	r1, r3
 8003c46:	481e      	ldr	r0, [pc, #120]	@ (8003cc0 <HAL_ETH_MspInit+0x17c>)
 8003c48:	f000 ffde 	bl	8004c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003c4c:	2386      	movs	r3, #134	@ 0x86
 8003c4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c50:	2302      	movs	r3, #2
 8003c52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c54:	2300      	movs	r3, #0
 8003c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003c5c:	230b      	movs	r3, #11
 8003c5e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c64:	4619      	mov	r1, r3
 8003c66:	4817      	ldr	r0, [pc, #92]	@ (8003cc4 <HAL_ETH_MspInit+0x180>)
 8003c68:	f000 ffce 	bl	8004c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003c6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c72:	2302      	movs	r3, #2
 8003c74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003c7e:	230b      	movs	r3, #11
 8003c80:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003c82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c86:	4619      	mov	r1, r3
 8003c88:	480f      	ldr	r0, [pc, #60]	@ (8003cc8 <HAL_ETH_MspInit+0x184>)
 8003c8a:	f000 ffbd 	bl	8004c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003c8e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8003c92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c94:	2302      	movs	r3, #2
 8003c96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ca0:	230b      	movs	r3, #11
 8003ca2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003ca4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4808      	ldr	r0, [pc, #32]	@ (8003ccc <HAL_ETH_MspInit+0x188>)
 8003cac:	f000 ffac 	bl	8004c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8003cb0:	bf00      	nop
 8003cb2:	3738      	adds	r7, #56	@ 0x38
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40028000 	.word	0x40028000
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	40020800 	.word	0x40020800
 8003cc4:	40020000 	.word	0x40020000
 8003cc8:	40020400 	.word	0x40020400
 8003ccc:	40021800 	.word	0x40021800

08003cd0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8003d0c <HAL_RNG_MspInit+0x3c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d10d      	bne.n	8003cfe <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8003d10 <HAL_RNG_MspInit+0x40>)
 8003ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cea:	4a09      	ldr	r2, [pc, #36]	@ (8003d10 <HAL_RNG_MspInit+0x40>)
 8003cec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cf0:	6353      	str	r3, [r2, #52]	@ 0x34
 8003cf2:	4b07      	ldr	r3, [pc, #28]	@ (8003d10 <HAL_RNG_MspInit+0x40>)
 8003cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8003cfe:	bf00      	nop
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	50060800 	.word	0x50060800
 8003d10:	40023800 	.word	0x40023800

08003d14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d24:	d10d      	bne.n	8003d42 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	4b09      	ldr	r3, [pc, #36]	@ (8003d50 <HAL_TIM_Base_MspInit+0x3c>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2e:	4a08      	ldr	r2, [pc, #32]	@ (8003d50 <HAL_TIM_Base_MspInit+0x3c>)
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d36:	4b06      	ldr	r3, [pc, #24]	@ (8003d50 <HAL_TIM_Base_MspInit+0x3c>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40023800 	.word	0x40023800

08003d54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08c      	sub	sp, #48	@ 0x30
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d5c:	f107 031c 	add.w	r3, r7, #28
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	605a      	str	r2, [r3, #4]
 8003d66:	609a      	str	r2, [r3, #8]
 8003d68:	60da      	str	r2, [r3, #12]
 8003d6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a46      	ldr	r2, [pc, #280]	@ (8003e8c <HAL_UART_MspInit+0x138>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d153      	bne.n	8003e1e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003d76:	2300      	movs	r3, #0
 8003d78:	61bb      	str	r3, [r7, #24]
 8003d7a:	4b45      	ldr	r3, [pc, #276]	@ (8003e90 <HAL_UART_MspInit+0x13c>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7e:	4a44      	ldr	r2, [pc, #272]	@ (8003e90 <HAL_UART_MspInit+0x13c>)
 8003d80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d86:	4b42      	ldr	r3, [pc, #264]	@ (8003e90 <HAL_UART_MspInit+0x13c>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d8e:	61bb      	str	r3, [r7, #24]
 8003d90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]
 8003d96:	4b3e      	ldr	r3, [pc, #248]	@ (8003e90 <HAL_UART_MspInit+0x13c>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9a:	4a3d      	ldr	r2, [pc, #244]	@ (8003e90 <HAL_UART_MspInit+0x13c>)
 8003d9c:	f043 0304 	orr.w	r3, r3, #4
 8003da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003da2:	4b3b      	ldr	r3, [pc, #236]	@ (8003e90 <HAL_UART_MspInit+0x13c>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	4b37      	ldr	r3, [pc, #220]	@ (8003e90 <HAL_UART_MspInit+0x13c>)
 8003db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db6:	4a36      	ldr	r2, [pc, #216]	@ (8003e90 <HAL_UART_MspInit+0x13c>)
 8003db8:	f043 0308 	orr.w	r3, r3, #8
 8003dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dbe:	4b34      	ldr	r3, [pc, #208]	@ (8003e90 <HAL_UART_MspInit+0x13c>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003dca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003ddc:	2308      	movs	r3, #8
 8003dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003de0:	f107 031c 	add.w	r3, r7, #28
 8003de4:	4619      	mov	r1, r3
 8003de6:	482b      	ldr	r0, [pc, #172]	@ (8003e94 <HAL_UART_MspInit+0x140>)
 8003de8:	f000 ff0e 	bl	8004c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003dec:	2304      	movs	r3, #4
 8003dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df0:	2302      	movs	r3, #2
 8003df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df4:	2300      	movs	r3, #0
 8003df6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003dfc:	2308      	movs	r3, #8
 8003dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e00:	f107 031c 	add.w	r3, r7, #28
 8003e04:	4619      	mov	r1, r3
 8003e06:	4824      	ldr	r0, [pc, #144]	@ (8003e98 <HAL_UART_MspInit+0x144>)
 8003e08:	f000 fefe 	bl	8004c08 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	2100      	movs	r1, #0
 8003e10:	2035      	movs	r0, #53	@ 0x35
 8003e12:	f000 fafc 	bl	800440e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003e16:	2035      	movs	r0, #53	@ 0x35
 8003e18:	f000 fb15 	bl	8004446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003e1c:	e031      	b.n	8003e82 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART3)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a1e      	ldr	r2, [pc, #120]	@ (8003e9c <HAL_UART_MspInit+0x148>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d12c      	bne.n	8003e82 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	4b18      	ldr	r3, [pc, #96]	@ (8003e90 <HAL_UART_MspInit+0x13c>)
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e30:	4a17      	ldr	r2, [pc, #92]	@ (8003e90 <HAL_UART_MspInit+0x13c>)
 8003e32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e36:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e38:	4b15      	ldr	r3, [pc, #84]	@ (8003e90 <HAL_UART_MspInit+0x13c>)
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e44:	2300      	movs	r3, #0
 8003e46:	60bb      	str	r3, [r7, #8]
 8003e48:	4b11      	ldr	r3, [pc, #68]	@ (8003e90 <HAL_UART_MspInit+0x13c>)
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4c:	4a10      	ldr	r2, [pc, #64]	@ (8003e90 <HAL_UART_MspInit+0x13c>)
 8003e4e:	f043 0308 	orr.w	r3, r3, #8
 8003e52:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e54:	4b0e      	ldr	r3, [pc, #56]	@ (8003e90 <HAL_UART_MspInit+0x13c>)
 8003e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	60bb      	str	r3, [r7, #8]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003e60:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e66:	2302      	movs	r3, #2
 8003e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003e72:	2307      	movs	r3, #7
 8003e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e76:	f107 031c 	add.w	r3, r7, #28
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4806      	ldr	r0, [pc, #24]	@ (8003e98 <HAL_UART_MspInit+0x144>)
 8003e7e:	f000 fec3 	bl	8004c08 <HAL_GPIO_Init>
}
 8003e82:	bf00      	nop
 8003e84:	3730      	adds	r7, #48	@ 0x30
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40005000 	.word	0x40005000
 8003e90:	40023800 	.word	0x40023800
 8003e94:	40020800 	.word	0x40020800
 8003e98:	40020c00 	.word	0x40020c00
 8003e9c:	40004800 	.word	0x40004800

08003ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ea4:	bf00      	nop
 8003ea6:	e7fd      	b.n	8003ea4 <NMI_Handler+0x4>

08003ea8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003eac:	bf00      	nop
 8003eae:	e7fd      	b.n	8003eac <HardFault_Handler+0x4>

08003eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003eb4:	bf00      	nop
 8003eb6:	e7fd      	b.n	8003eb4 <MemManage_Handler+0x4>

08003eb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ebc:	bf00      	nop
 8003ebe:	e7fd      	b.n	8003ebc <BusFault_Handler+0x4>

08003ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ec4:	bf00      	nop
 8003ec6:	e7fd      	b.n	8003ec4 <UsageFault_Handler+0x4>

08003ec8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ecc:	bf00      	nop
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003eda:	bf00      	nop
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ee8:	bf00      	nop
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ef6:	f000 f96b 	bl	80041d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003efa:	bf00      	nop
 8003efc:	bd80      	pop	{r7, pc}
	...

08003f00 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003f04:	4802      	ldr	r0, [pc, #8]	@ (8003f10 <UART5_IRQHandler+0x10>)
 8003f06:	f003 feb3 	bl	8007c70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003f0a:	bf00      	nop
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	20001a58 	.word	0x20001a58

08003f14 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003f18:	4802      	ldr	r0, [pc, #8]	@ (8003f24 <OTG_FS_IRQHandler+0x10>)
 8003f1a:	f001 fabd 	bl	8005498 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003f1e:	bf00      	nop
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20001ecc 	.word	0x20001ecc

08003f28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  return 1;
 8003f2c:	2301      	movs	r3, #1
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <_kill>:

int _kill(int pid, int sig)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f42:	f00a f911 	bl	800e168 <__errno>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2216      	movs	r2, #22
 8003f4a:	601a      	str	r2, [r3, #0]
  return -1;
 8003f4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <_exit>:

void _exit (int status)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003f60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7ff ffe7 	bl	8003f38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003f6a:	bf00      	nop
 8003f6c:	e7fd      	b.n	8003f6a <_exit+0x12>

08003f6e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b086      	sub	sp, #24
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	60f8      	str	r0, [r7, #12]
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	e00a      	b.n	8003f96 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003f80:	f7fe fe98 	bl	8002cb4 <__io_getchar>
 8003f84:	4601      	mov	r1, r0
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	60ba      	str	r2, [r7, #8]
 8003f8c:	b2ca      	uxtb	r2, r1
 8003f8e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	3301      	adds	r3, #1
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	dbf0      	blt.n	8003f80 <_read+0x12>
  }

  return len;
 8003f9e:	687b      	ldr	r3, [r7, #4]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	e009      	b.n	8003fce <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	60ba      	str	r2, [r7, #8]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe fe5a 	bl	8002c7c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	617b      	str	r3, [r7, #20]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	dbf1      	blt.n	8003fba <_write+0x12>
  }
  return len;
 8003fd6:	687b      	ldr	r3, [r7, #4]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <_close>:

int _close(int file)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003fe8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004008:	605a      	str	r2, [r3, #4]
  return 0;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <_isatty>:

int _isatty(int file)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004020:	2301      	movs	r3, #1
}
 8004022:	4618      	mov	r0, r3
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800402e:	b480      	push	{r7}
 8004030:	b085      	sub	sp, #20
 8004032:	af00      	add	r7, sp, #0
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004050:	4a14      	ldr	r2, [pc, #80]	@ (80040a4 <_sbrk+0x5c>)
 8004052:	4b15      	ldr	r3, [pc, #84]	@ (80040a8 <_sbrk+0x60>)
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800405c:	4b13      	ldr	r3, [pc, #76]	@ (80040ac <_sbrk+0x64>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d102      	bne.n	800406a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004064:	4b11      	ldr	r3, [pc, #68]	@ (80040ac <_sbrk+0x64>)
 8004066:	4a12      	ldr	r2, [pc, #72]	@ (80040b0 <_sbrk+0x68>)
 8004068:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800406a:	4b10      	ldr	r3, [pc, #64]	@ (80040ac <_sbrk+0x64>)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4413      	add	r3, r2
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	429a      	cmp	r2, r3
 8004076:	d207      	bcs.n	8004088 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004078:	f00a f876 	bl	800e168 <__errno>
 800407c:	4603      	mov	r3, r0
 800407e:	220c      	movs	r2, #12
 8004080:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004082:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004086:	e009      	b.n	800409c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004088:	4b08      	ldr	r3, [pc, #32]	@ (80040ac <_sbrk+0x64>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800408e:	4b07      	ldr	r3, [pc, #28]	@ (80040ac <_sbrk+0x64>)
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4413      	add	r3, r2
 8004096:	4a05      	ldr	r2, [pc, #20]	@ (80040ac <_sbrk+0x64>)
 8004098:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800409a:	68fb      	ldr	r3, [r7, #12]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	20030000 	.word	0x20030000
 80040a8:	00000400 	.word	0x00000400
 80040ac:	20001ae8 	.word	0x20001ae8
 80040b0:	20002320 	.word	0x20002320

080040b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040b8:	4b06      	ldr	r3, [pc, #24]	@ (80040d4 <SystemInit+0x20>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040be:	4a05      	ldr	r2, [pc, #20]	@ (80040d4 <SystemInit+0x20>)
 80040c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80040c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040c8:	bf00      	nop
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	e000ed00 	.word	0xe000ed00

080040d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80040d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004110 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80040dc:	480d      	ldr	r0, [pc, #52]	@ (8004114 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80040de:	490e      	ldr	r1, [pc, #56]	@ (8004118 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80040e0:	4a0e      	ldr	r2, [pc, #56]	@ (800411c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80040e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040e4:	e002      	b.n	80040ec <LoopCopyDataInit>

080040e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040ea:	3304      	adds	r3, #4

080040ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040f0:	d3f9      	bcc.n	80040e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040f2:	4a0b      	ldr	r2, [pc, #44]	@ (8004120 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80040f4:	4c0b      	ldr	r4, [pc, #44]	@ (8004124 <LoopFillZerobss+0x26>)
  movs r3, #0
 80040f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040f8:	e001      	b.n	80040fe <LoopFillZerobss>

080040fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040fc:	3204      	adds	r2, #4

080040fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004100:	d3fb      	bcc.n	80040fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004102:	f7ff ffd7 	bl	80040b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004106:	f00a f835 	bl	800e174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800410a:	f7ff fa5f 	bl	80035cc <main>
  bx  lr    
 800410e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004110:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004118:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 800411c:	08012d00 	.word	0x08012d00
  ldr r2, =_sbss
 8004120:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8004124:	2000231c 	.word	0x2000231c

08004128 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004128:	e7fe      	b.n	8004128 <ADC_IRQHandler>
	...

0800412c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004130:	4b0e      	ldr	r3, [pc, #56]	@ (800416c <HAL_Init+0x40>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a0d      	ldr	r2, [pc, #52]	@ (800416c <HAL_Init+0x40>)
 8004136:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800413a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800413c:	4b0b      	ldr	r3, [pc, #44]	@ (800416c <HAL_Init+0x40>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a0a      	ldr	r2, [pc, #40]	@ (800416c <HAL_Init+0x40>)
 8004142:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004146:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004148:	4b08      	ldr	r3, [pc, #32]	@ (800416c <HAL_Init+0x40>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a07      	ldr	r2, [pc, #28]	@ (800416c <HAL_Init+0x40>)
 800414e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004154:	2003      	movs	r0, #3
 8004156:	f000 f94f 	bl	80043f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800415a:	2000      	movs	r0, #0
 800415c:	f000 f808 	bl	8004170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004160:	f7ff fcc8 	bl	8003af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40023c00 	.word	0x40023c00

08004170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004178:	4b12      	ldr	r3, [pc, #72]	@ (80041c4 <HAL_InitTick+0x54>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	4b12      	ldr	r3, [pc, #72]	@ (80041c8 <HAL_InitTick+0x58>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	4619      	mov	r1, r3
 8004182:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004186:	fbb3 f3f1 	udiv	r3, r3, r1
 800418a:	fbb2 f3f3 	udiv	r3, r2, r3
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f967 	bl	8004462 <HAL_SYSTICK_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e00e      	b.n	80041bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b0f      	cmp	r3, #15
 80041a2:	d80a      	bhi.n	80041ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041a4:	2200      	movs	r2, #0
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80041ac:	f000 f92f 	bl	800440e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041b0:	4a06      	ldr	r2, [pc, #24]	@ (80041cc <HAL_InitTick+0x5c>)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	e000      	b.n	80041bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	20000004 	.word	0x20000004
 80041c8:	2000000c 	.word	0x2000000c
 80041cc:	20000008 	.word	0x20000008

080041d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041d4:	4b06      	ldr	r3, [pc, #24]	@ (80041f0 <HAL_IncTick+0x20>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	4b06      	ldr	r3, [pc, #24]	@ (80041f4 <HAL_IncTick+0x24>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4413      	add	r3, r2
 80041e0:	4a04      	ldr	r2, [pc, #16]	@ (80041f4 <HAL_IncTick+0x24>)
 80041e2:	6013      	str	r3, [r2, #0]
}
 80041e4:	bf00      	nop
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	2000000c 	.word	0x2000000c
 80041f4:	20001aec 	.word	0x20001aec

080041f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  return uwTick;
 80041fc:	4b03      	ldr	r3, [pc, #12]	@ (800420c <HAL_GetTick+0x14>)
 80041fe:	681b      	ldr	r3, [r3, #0]
}
 8004200:	4618      	mov	r0, r3
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	20001aec 	.word	0x20001aec

08004210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004218:	f7ff ffee 	bl	80041f8 <HAL_GetTick>
 800421c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004228:	d005      	beq.n	8004236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800422a:	4b0a      	ldr	r3, [pc, #40]	@ (8004254 <HAL_Delay+0x44>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4413      	add	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004236:	bf00      	nop
 8004238:	f7ff ffde 	bl	80041f8 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	429a      	cmp	r2, r3
 8004246:	d8f7      	bhi.n	8004238 <HAL_Delay+0x28>
  {
  }
}
 8004248:	bf00      	nop
 800424a:	bf00      	nop
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	2000000c 	.word	0x2000000c

08004258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004268:	4b0c      	ldr	r3, [pc, #48]	@ (800429c <__NVIC_SetPriorityGrouping+0x44>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004274:	4013      	ands	r3, r2
 8004276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004280:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800428a:	4a04      	ldr	r2, [pc, #16]	@ (800429c <__NVIC_SetPriorityGrouping+0x44>)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	60d3      	str	r3, [r2, #12]
}
 8004290:	bf00      	nop
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	e000ed00 	.word	0xe000ed00

080042a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042a4:	4b04      	ldr	r3, [pc, #16]	@ (80042b8 <__NVIC_GetPriorityGrouping+0x18>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	0a1b      	lsrs	r3, r3, #8
 80042aa:	f003 0307 	and.w	r3, r3, #7
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	e000ed00 	.word	0xe000ed00

080042bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	db0b      	blt.n	80042e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	f003 021f 	and.w	r2, r3, #31
 80042d4:	4907      	ldr	r1, [pc, #28]	@ (80042f4 <__NVIC_EnableIRQ+0x38>)
 80042d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	2001      	movs	r0, #1
 80042de:	fa00 f202 	lsl.w	r2, r0, r2
 80042e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	e000e100 	.word	0xe000e100

080042f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	4603      	mov	r3, r0
 8004300:	6039      	str	r1, [r7, #0]
 8004302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004308:	2b00      	cmp	r3, #0
 800430a:	db0a      	blt.n	8004322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	b2da      	uxtb	r2, r3
 8004310:	490c      	ldr	r1, [pc, #48]	@ (8004344 <__NVIC_SetPriority+0x4c>)
 8004312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004316:	0112      	lsls	r2, r2, #4
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	440b      	add	r3, r1
 800431c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004320:	e00a      	b.n	8004338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	b2da      	uxtb	r2, r3
 8004326:	4908      	ldr	r1, [pc, #32]	@ (8004348 <__NVIC_SetPriority+0x50>)
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	3b04      	subs	r3, #4
 8004330:	0112      	lsls	r2, r2, #4
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	440b      	add	r3, r1
 8004336:	761a      	strb	r2, [r3, #24]
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	e000e100 	.word	0xe000e100
 8004348:	e000ed00 	.word	0xe000ed00

0800434c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800434c:	b480      	push	{r7}
 800434e:	b089      	sub	sp, #36	@ 0x24
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	f1c3 0307 	rsb	r3, r3, #7
 8004366:	2b04      	cmp	r3, #4
 8004368:	bf28      	it	cs
 800436a:	2304      	movcs	r3, #4
 800436c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	3304      	adds	r3, #4
 8004372:	2b06      	cmp	r3, #6
 8004374:	d902      	bls.n	800437c <NVIC_EncodePriority+0x30>
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	3b03      	subs	r3, #3
 800437a:	e000      	b.n	800437e <NVIC_EncodePriority+0x32>
 800437c:	2300      	movs	r3, #0
 800437e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004380:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	43da      	mvns	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	401a      	ands	r2, r3
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004394:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	fa01 f303 	lsl.w	r3, r1, r3
 800439e:	43d9      	mvns	r1, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043a4:	4313      	orrs	r3, r2
         );
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3724      	adds	r7, #36	@ 0x24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3b01      	subs	r3, #1
 80043c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043c4:	d301      	bcc.n	80043ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043c6:	2301      	movs	r3, #1
 80043c8:	e00f      	b.n	80043ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043ca:	4a0a      	ldr	r2, [pc, #40]	@ (80043f4 <SysTick_Config+0x40>)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043d2:	210f      	movs	r1, #15
 80043d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043d8:	f7ff ff8e 	bl	80042f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043dc:	4b05      	ldr	r3, [pc, #20]	@ (80043f4 <SysTick_Config+0x40>)
 80043de:	2200      	movs	r2, #0
 80043e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043e2:	4b04      	ldr	r3, [pc, #16]	@ (80043f4 <SysTick_Config+0x40>)
 80043e4:	2207      	movs	r2, #7
 80043e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	e000e010 	.word	0xe000e010

080043f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff ff29 	bl	8004258 <__NVIC_SetPriorityGrouping>
}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800440e:	b580      	push	{r7, lr}
 8004410:	b086      	sub	sp, #24
 8004412:	af00      	add	r7, sp, #0
 8004414:	4603      	mov	r3, r0
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	607a      	str	r2, [r7, #4]
 800441a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800441c:	2300      	movs	r3, #0
 800441e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004420:	f7ff ff3e 	bl	80042a0 <__NVIC_GetPriorityGrouping>
 8004424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	6978      	ldr	r0, [r7, #20]
 800442c:	f7ff ff8e 	bl	800434c <NVIC_EncodePriority>
 8004430:	4602      	mov	r2, r0
 8004432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004436:	4611      	mov	r1, r2
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff ff5d 	bl	80042f8 <__NVIC_SetPriority>
}
 800443e:	bf00      	nop
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b082      	sub	sp, #8
 800444a:	af00      	add	r7, sp, #0
 800444c:	4603      	mov	r3, r0
 800444e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff ff31 	bl	80042bc <__NVIC_EnableIRQ>
}
 800445a:	bf00      	nop
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7ff ffa2 	bl	80043b4 <SysTick_Config>
 8004470:	4603      	mov	r3, r0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b084      	sub	sp, #16
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004486:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004488:	f7ff feb6 	bl	80041f8 <HAL_GetTick>
 800448c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d008      	beq.n	80044ac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2280      	movs	r2, #128	@ 0x80
 800449e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e052      	b.n	8004552 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0216 	bic.w	r2, r2, #22
 80044ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695a      	ldr	r2, [r3, #20]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044ca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d103      	bne.n	80044dc <HAL_DMA_Abort+0x62>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d007      	beq.n	80044ec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0208 	bic.w	r2, r2, #8
 80044ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0201 	bic.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044fc:	e013      	b.n	8004526 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044fe:	f7ff fe7b 	bl	80041f8 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b05      	cmp	r3, #5
 800450a:	d90c      	bls.n	8004526 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2203      	movs	r2, #3
 8004516:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e015      	b.n	8004552 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e4      	bne.n	80044fe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004538:	223f      	movs	r2, #63	@ 0x3f
 800453a:	409a      	lsls	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d004      	beq.n	8004578 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2280      	movs	r2, #128	@ 0x80
 8004572:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e00c      	b.n	8004592 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2205      	movs	r2, #5
 800457c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0201 	bic.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
	...

080045b8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e06c      	b.n	80046a4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d106      	bne.n	80045e2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2223      	movs	r2, #35	@ 0x23
 80045d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f7ff fab1 	bl	8003b44 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045e2:	2300      	movs	r3, #0
 80045e4:	60bb      	str	r3, [r7, #8]
 80045e6:	4b31      	ldr	r3, [pc, #196]	@ (80046ac <HAL_ETH_Init+0xf4>)
 80045e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ea:	4a30      	ldr	r2, [pc, #192]	@ (80046ac <HAL_ETH_Init+0xf4>)
 80045ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80045f2:	4b2e      	ldr	r3, [pc, #184]	@ (80046ac <HAL_ETH_Init+0xf4>)
 80045f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045fa:	60bb      	str	r3, [r7, #8]
 80045fc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80045fe:	4b2c      	ldr	r3, [pc, #176]	@ (80046b0 <HAL_ETH_Init+0xf8>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	4a2b      	ldr	r2, [pc, #172]	@ (80046b0 <HAL_ETH_Init+0xf8>)
 8004604:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004608:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800460a:	4b29      	ldr	r3, [pc, #164]	@ (80046b0 <HAL_ETH_Init+0xf8>)
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	4927      	ldr	r1, [pc, #156]	@ (80046b0 <HAL_ETH_Init+0xf8>)
 8004614:	4313      	orrs	r3, r2
 8004616:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004618:	4b25      	ldr	r3, [pc, #148]	@ (80046b0 <HAL_ETH_Init+0xf8>)
 800461a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004632:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004634:	f7ff fde0 	bl	80041f8 <HAL_GetTick>
 8004638:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800463a:	e011      	b.n	8004660 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800463c:	f7ff fddc 	bl	80041f8 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800464a:	d909      	bls.n	8004660 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2204      	movs	r2, #4
 8004650:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	22e0      	movs	r2, #224	@ 0xe0
 8004658:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e021      	b.n	80046a4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1e4      	bne.n	800463c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f958 	bl	8004928 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f9ff 	bl	8004a7c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 fa55 	bl	8004b2e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	461a      	mov	r2, r3
 800468a:	2100      	movs	r1, #0
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f9bd 	bl	8004a0c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2210      	movs	r2, #16
 800469e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40023800 	.word	0x40023800
 80046b0:	40013800 	.word	0x40013800

080046b4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4b51      	ldr	r3, [pc, #324]	@ (8004810 <ETH_SetMACConfig+0x15c>)
 80046ca:	4013      	ands	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	7c1b      	ldrb	r3, [r3, #16]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d102      	bne.n	80046dc <ETH_SetMACConfig+0x28>
 80046d6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80046da:	e000      	b.n	80046de <ETH_SetMACConfig+0x2a>
 80046dc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	7c5b      	ldrb	r3, [r3, #17]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d102      	bne.n	80046ec <ETH_SetMACConfig+0x38>
 80046e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80046ea:	e000      	b.n	80046ee <ETH_SetMACConfig+0x3a>
 80046ec:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80046ee:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80046f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	7fdb      	ldrb	r3, [r3, #31]
 80046fa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80046fc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004702:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	7f92      	ldrb	r2, [r2, #30]
 8004708:	2a00      	cmp	r2, #0
 800470a:	d102      	bne.n	8004712 <ETH_SetMACConfig+0x5e>
 800470c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004710:	e000      	b.n	8004714 <ETH_SetMACConfig+0x60>
 8004712:	2200      	movs	r2, #0
                        macconf->Speed |
 8004714:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	7f1b      	ldrb	r3, [r3, #28]
 800471a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800471c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004722:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	791b      	ldrb	r3, [r3, #4]
 8004728:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800472a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004732:	2a00      	cmp	r2, #0
 8004734:	d102      	bne.n	800473c <ETH_SetMACConfig+0x88>
 8004736:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800473a:	e000      	b.n	800473e <ETH_SetMACConfig+0x8a>
 800473c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800473e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	7bdb      	ldrb	r3, [r3, #15]
 8004744:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004746:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800474c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004754:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004756:	4313      	orrs	r3, r2
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800476e:	2001      	movs	r0, #1
 8004770:	f7ff fd4e 	bl	8004210 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800478a:	4013      	ands	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004792:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800479a:	2a00      	cmp	r2, #0
 800479c:	d101      	bne.n	80047a2 <ETH_SetMACConfig+0xee>
 800479e:	2280      	movs	r2, #128	@ 0x80
 80047a0:	e000      	b.n	80047a4 <ETH_SetMACConfig+0xf0>
 80047a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80047a4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80047aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80047b2:	2a01      	cmp	r2, #1
 80047b4:	d101      	bne.n	80047ba <ETH_SetMACConfig+0x106>
 80047b6:	2208      	movs	r2, #8
 80047b8:	e000      	b.n	80047bc <ETH_SetMACConfig+0x108>
 80047ba:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80047bc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80047c4:	2a01      	cmp	r2, #1
 80047c6:	d101      	bne.n	80047cc <ETH_SetMACConfig+0x118>
 80047c8:	2204      	movs	r2, #4
 80047ca:	e000      	b.n	80047ce <ETH_SetMACConfig+0x11a>
 80047cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80047ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80047d6:	2a01      	cmp	r2, #1
 80047d8:	d101      	bne.n	80047de <ETH_SetMACConfig+0x12a>
 80047da:	2202      	movs	r2, #2
 80047dc:	e000      	b.n	80047e0 <ETH_SetMACConfig+0x12c>
 80047de:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80047e0:	4313      	orrs	r3, r2
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80047f8:	2001      	movs	r0, #1
 80047fa:	f7ff fd09 	bl	8004210 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	619a      	str	r2, [r3, #24]
}
 8004806:	bf00      	nop
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	ff20810f 	.word	0xff20810f

08004814 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	4b3d      	ldr	r3, [pc, #244]	@ (8004924 <ETH_SetDMAConfig+0x110>)
 800482e:	4013      	ands	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	7b1b      	ldrb	r3, [r3, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d102      	bne.n	8004840 <ETH_SetDMAConfig+0x2c>
 800483a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800483e:	e000      	b.n	8004842 <ETH_SetDMAConfig+0x2e>
 8004840:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	7b5b      	ldrb	r3, [r3, #13]
 8004846:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004848:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	7f52      	ldrb	r2, [r2, #29]
 800484e:	2a00      	cmp	r2, #0
 8004850:	d102      	bne.n	8004858 <ETH_SetDMAConfig+0x44>
 8004852:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004856:	e000      	b.n	800485a <ETH_SetDMAConfig+0x46>
 8004858:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800485a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	7b9b      	ldrb	r3, [r3, #14]
 8004860:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004862:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004868:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	7f1b      	ldrb	r3, [r3, #28]
 800486e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004870:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	7f9b      	ldrb	r3, [r3, #30]
 8004876:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004878:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800487e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004886:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004888:	4313      	orrs	r3, r2
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	4313      	orrs	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004898:	461a      	mov	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80048aa:	2001      	movs	r0, #1
 80048ac:	f7ff fcb0 	bl	8004210 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048b8:	461a      	mov	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	791b      	ldrb	r3, [r3, #4]
 80048c2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80048c8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80048ce:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80048d4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80048dc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80048de:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80048e6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80048ec:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6812      	ldr	r2, [r2, #0]
 80048f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80048f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80048fa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004908:	2001      	movs	r0, #1
 800490a:	f7ff fc81 	bl	8004210 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004916:	461a      	mov	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6013      	str	r3, [r2, #0]
}
 800491c:	bf00      	nop
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	f8de3f23 	.word	0xf8de3f23

08004928 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b0a6      	sub	sp, #152	@ 0x98
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004930:	2301      	movs	r3, #1
 8004932:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004936:	2301      	movs	r3, #1
 8004938:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800493c:	2300      	movs	r3, #0
 800493e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004940:	2300      	movs	r3, #0
 8004942:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004946:	2301      	movs	r3, #1
 8004948:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800494c:	2300      	movs	r3, #0
 800494e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004952:	2301      	movs	r3, #1
 8004954:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004958:	2300      	movs	r3, #0
 800495a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800495e:	2300      	movs	r3, #0
 8004960:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004964:	2300      	movs	r3, #0
 8004966:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004968:	2300      	movs	r3, #0
 800496a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800496e:	2300      	movs	r3, #0
 8004970:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004972:	2300      	movs	r3, #0
 8004974:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004978:	2300      	movs	r3, #0
 800497a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800497e:	2300      	movs	r3, #0
 8004980:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004984:	2300      	movs	r3, #0
 8004986:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800498a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800498e:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004990:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004994:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004996:	2300      	movs	r3, #0
 8004998:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800499c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80049a0:	4619      	mov	r1, r3
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7ff fe86 	bl	80046b4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80049a8:	2301      	movs	r3, #1
 80049aa:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80049ac:	2301      	movs	r3, #1
 80049ae:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80049b0:	2301      	movs	r3, #1
 80049b2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80049b6:	2301      	movs	r3, #1
 80049b8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80049ba:	2300      	movs	r3, #0
 80049bc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80049be:	2300      	movs	r3, #0
 80049c0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80049c4:	2300      	movs	r3, #0
 80049c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80049ca:	2300      	movs	r3, #0
 80049cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80049ce:	2301      	movs	r3, #1
 80049d0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80049d4:	2301      	movs	r3, #1
 80049d6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80049d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80049dc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80049de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80049e2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80049e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80049e8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80049f4:	2300      	movs	r3, #0
 80049f6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80049f8:	f107 0308 	add.w	r3, r7, #8
 80049fc:	4619      	mov	r1, r3
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7ff ff08 	bl	8004814 <ETH_SetDMAConfig>
}
 8004a04:	bf00      	nop
 8004a06:	3798      	adds	r7, #152	@ 0x98
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3305      	adds	r3, #5
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	021b      	lsls	r3, r3, #8
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	3204      	adds	r2, #4
 8004a24:	7812      	ldrb	r2, [r2, #0]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	4b11      	ldr	r3, [pc, #68]	@ (8004a74 <ETH_MACAddressConfig+0x68>)
 8004a2e:	4413      	add	r3, r2
 8004a30:	461a      	mov	r2, r3
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3303      	adds	r3, #3
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	061a      	lsls	r2, r3, #24
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3302      	adds	r3, #2
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	041b      	lsls	r3, r3, #16
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	021b      	lsls	r3, r3, #8
 8004a50:	4313      	orrs	r3, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	7812      	ldrb	r2, [r2, #0]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	4b06      	ldr	r3, [pc, #24]	@ (8004a78 <ETH_MACAddressConfig+0x6c>)
 8004a5e:	4413      	add	r3, r2
 8004a60:	461a      	mov	r2, r3
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	6013      	str	r3, [r2, #0]
}
 8004a66:	bf00      	nop
 8004a68:	371c      	adds	r7, #28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	40028040 	.word	0x40028040
 8004a78:	40028044 	.word	0x40028044

08004a7c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004a84:	2300      	movs	r3, #0
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	e03e      	b.n	8004b08 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68d9      	ldr	r1, [r3, #12]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	4613      	mov	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	440b      	add	r3, r1
 8004a9a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004ab4:	68b9      	ldr	r1, [r7, #8]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	3206      	adds	r2, #6
 8004abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d80c      	bhi.n	8004aec <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68d9      	ldr	r1, [r3, #12]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	4613      	mov	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	440b      	add	r3, r1
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	60da      	str	r2, [r3, #12]
 8004aea:	e004      	b.n	8004af6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	461a      	mov	r2, r3
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	3301      	adds	r3, #1
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2b03      	cmp	r3, #3
 8004b0c:	d9bd      	bls.n	8004a8a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b20:	611a      	str	r2, [r3, #16]
}
 8004b22:	bf00      	nop
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b085      	sub	sp, #20
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004b36:	2300      	movs	r3, #0
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	e046      	b.n	8004bca <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6919      	ldr	r1, [r3, #16]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4613      	mov	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	440b      	add	r3, r1
 8004b4c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2200      	movs	r2, #0
 8004b58:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2200      	movs	r2, #0
 8004b64:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004b78:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8004b80:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004b8e:	68b9      	ldr	r1, [r7, #8]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	3212      	adds	r2, #18
 8004b96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d80c      	bhi.n	8004bba <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6919      	ldr	r1, [r3, #16]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	440b      	add	r3, r1
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	60da      	str	r2, [r3, #12]
 8004bb8:	e004      	b.n	8004bc4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2b03      	cmp	r3, #3
 8004bce:	d9b5      	bls.n	8004b3c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691a      	ldr	r2, [r3, #16]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bfa:	60da      	str	r2, [r3, #12]
}
 8004bfc:	bf00      	nop
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b089      	sub	sp, #36	@ 0x24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c1e:	2300      	movs	r3, #0
 8004c20:	61fb      	str	r3, [r7, #28]
 8004c22:	e177      	b.n	8004f14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c24:	2201      	movs	r2, #1
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	4013      	ands	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	f040 8166 	bne.w	8004f0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d005      	beq.n	8004c5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d130      	bne.n	8004cbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	2203      	movs	r2, #3
 8004c66:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6a:	43db      	mvns	r3, r3
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c90:	2201      	movs	r2, #1
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	fa02 f303 	lsl.w	r3, r2, r3
 8004c98:	43db      	mvns	r3, r3
 8004c9a:	69ba      	ldr	r2, [r7, #24]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	091b      	lsrs	r3, r3, #4
 8004ca6:	f003 0201 	and.w	r2, r3, #1
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f003 0303 	and.w	r3, r3, #3
 8004cc4:	2b03      	cmp	r3, #3
 8004cc6:	d017      	beq.n	8004cf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	2203      	movs	r2, #3
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f003 0303 	and.w	r3, r3, #3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d123      	bne.n	8004d4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	08da      	lsrs	r2, r3, #3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3208      	adds	r2, #8
 8004d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	220f      	movs	r2, #15
 8004d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d20:	43db      	mvns	r3, r3
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	4013      	ands	r3, r2
 8004d26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	691a      	ldr	r2, [r3, #16]
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	fa02 f303 	lsl.w	r3, r2, r3
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	08da      	lsrs	r2, r3, #3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3208      	adds	r2, #8
 8004d46:	69b9      	ldr	r1, [r7, #24]
 8004d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	2203      	movs	r2, #3
 8004d58:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5c:	43db      	mvns	r3, r3
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	4013      	ands	r3, r2
 8004d62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f003 0203 	and.w	r2, r3, #3
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 80c0 	beq.w	8004f0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	4b66      	ldr	r3, [pc, #408]	@ (8004f2c <HAL_GPIO_Init+0x324>)
 8004d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d96:	4a65      	ldr	r2, [pc, #404]	@ (8004f2c <HAL_GPIO_Init+0x324>)
 8004d98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d9e:	4b63      	ldr	r3, [pc, #396]	@ (8004f2c <HAL_GPIO_Init+0x324>)
 8004da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004daa:	4a61      	ldr	r2, [pc, #388]	@ (8004f30 <HAL_GPIO_Init+0x328>)
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	089b      	lsrs	r3, r3, #2
 8004db0:	3302      	adds	r3, #2
 8004db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	220f      	movs	r2, #15
 8004dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc6:	43db      	mvns	r3, r3
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a58      	ldr	r2, [pc, #352]	@ (8004f34 <HAL_GPIO_Init+0x32c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d037      	beq.n	8004e46 <HAL_GPIO_Init+0x23e>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a57      	ldr	r2, [pc, #348]	@ (8004f38 <HAL_GPIO_Init+0x330>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d031      	beq.n	8004e42 <HAL_GPIO_Init+0x23a>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a56      	ldr	r2, [pc, #344]	@ (8004f3c <HAL_GPIO_Init+0x334>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d02b      	beq.n	8004e3e <HAL_GPIO_Init+0x236>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a55      	ldr	r2, [pc, #340]	@ (8004f40 <HAL_GPIO_Init+0x338>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d025      	beq.n	8004e3a <HAL_GPIO_Init+0x232>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a54      	ldr	r2, [pc, #336]	@ (8004f44 <HAL_GPIO_Init+0x33c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d01f      	beq.n	8004e36 <HAL_GPIO_Init+0x22e>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a53      	ldr	r2, [pc, #332]	@ (8004f48 <HAL_GPIO_Init+0x340>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d019      	beq.n	8004e32 <HAL_GPIO_Init+0x22a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a52      	ldr	r2, [pc, #328]	@ (8004f4c <HAL_GPIO_Init+0x344>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d013      	beq.n	8004e2e <HAL_GPIO_Init+0x226>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a51      	ldr	r2, [pc, #324]	@ (8004f50 <HAL_GPIO_Init+0x348>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d00d      	beq.n	8004e2a <HAL_GPIO_Init+0x222>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a50      	ldr	r2, [pc, #320]	@ (8004f54 <HAL_GPIO_Init+0x34c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d007      	beq.n	8004e26 <HAL_GPIO_Init+0x21e>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a4f      	ldr	r2, [pc, #316]	@ (8004f58 <HAL_GPIO_Init+0x350>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d101      	bne.n	8004e22 <HAL_GPIO_Init+0x21a>
 8004e1e:	2309      	movs	r3, #9
 8004e20:	e012      	b.n	8004e48 <HAL_GPIO_Init+0x240>
 8004e22:	230a      	movs	r3, #10
 8004e24:	e010      	b.n	8004e48 <HAL_GPIO_Init+0x240>
 8004e26:	2308      	movs	r3, #8
 8004e28:	e00e      	b.n	8004e48 <HAL_GPIO_Init+0x240>
 8004e2a:	2307      	movs	r3, #7
 8004e2c:	e00c      	b.n	8004e48 <HAL_GPIO_Init+0x240>
 8004e2e:	2306      	movs	r3, #6
 8004e30:	e00a      	b.n	8004e48 <HAL_GPIO_Init+0x240>
 8004e32:	2305      	movs	r3, #5
 8004e34:	e008      	b.n	8004e48 <HAL_GPIO_Init+0x240>
 8004e36:	2304      	movs	r3, #4
 8004e38:	e006      	b.n	8004e48 <HAL_GPIO_Init+0x240>
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e004      	b.n	8004e48 <HAL_GPIO_Init+0x240>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	e002      	b.n	8004e48 <HAL_GPIO_Init+0x240>
 8004e42:	2301      	movs	r3, #1
 8004e44:	e000      	b.n	8004e48 <HAL_GPIO_Init+0x240>
 8004e46:	2300      	movs	r3, #0
 8004e48:	69fa      	ldr	r2, [r7, #28]
 8004e4a:	f002 0203 	and.w	r2, r2, #3
 8004e4e:	0092      	lsls	r2, r2, #2
 8004e50:	4093      	lsls	r3, r2
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e58:	4935      	ldr	r1, [pc, #212]	@ (8004f30 <HAL_GPIO_Init+0x328>)
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	089b      	lsrs	r3, r3, #2
 8004e5e:	3302      	adds	r3, #2
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e66:	4b3d      	ldr	r3, [pc, #244]	@ (8004f5c <HAL_GPIO_Init+0x354>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	43db      	mvns	r3, r3
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	4013      	ands	r3, r2
 8004e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e8a:	4a34      	ldr	r2, [pc, #208]	@ (8004f5c <HAL_GPIO_Init+0x354>)
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e90:	4b32      	ldr	r3, [pc, #200]	@ (8004f5c <HAL_GPIO_Init+0x354>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004eb4:	4a29      	ldr	r2, [pc, #164]	@ (8004f5c <HAL_GPIO_Init+0x354>)
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004eba:	4b28      	ldr	r3, [pc, #160]	@ (8004f5c <HAL_GPIO_Init+0x354>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ede:	4a1f      	ldr	r2, [pc, #124]	@ (8004f5c <HAL_GPIO_Init+0x354>)
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8004f5c <HAL_GPIO_Init+0x354>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	43db      	mvns	r3, r3
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f08:	4a14      	ldr	r2, [pc, #80]	@ (8004f5c <HAL_GPIO_Init+0x354>)
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	3301      	adds	r3, #1
 8004f12:	61fb      	str	r3, [r7, #28]
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	2b0f      	cmp	r3, #15
 8004f18:	f67f ae84 	bls.w	8004c24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f1c:	bf00      	nop
 8004f1e:	bf00      	nop
 8004f20:	3724      	adds	r7, #36	@ 0x24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	40013800 	.word	0x40013800
 8004f34:	40020000 	.word	0x40020000
 8004f38:	40020400 	.word	0x40020400
 8004f3c:	40020800 	.word	0x40020800
 8004f40:	40020c00 	.word	0x40020c00
 8004f44:	40021000 	.word	0x40021000
 8004f48:	40021400 	.word	0x40021400
 8004f4c:	40021800 	.word	0x40021800
 8004f50:	40021c00 	.word	0x40021c00
 8004f54:	40022000 	.word	0x40022000
 8004f58:	40022400 	.word	0x40022400
 8004f5c:	40013c00 	.word	0x40013c00

08004f60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	460b      	mov	r3, r1
 8004f6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691a      	ldr	r2, [r3, #16]
 8004f70:	887b      	ldrh	r3, [r7, #2]
 8004f72:	4013      	ands	r3, r2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	73fb      	strb	r3, [r7, #15]
 8004f7c:	e001      	b.n	8004f82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	807b      	strh	r3, [r7, #2]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fa0:	787b      	ldrb	r3, [r7, #1]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fa6:	887a      	ldrh	r2, [r7, #2]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004fac:	e003      	b.n	8004fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004fae:	887b      	ldrh	r3, [r7, #2]
 8004fb0:	041a      	lsls	r2, r3, #16
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	619a      	str	r2, [r3, #24]
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004fc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fc4:	b08f      	sub	sp, #60	@ 0x3c
 8004fc6:	af0a      	add	r7, sp, #40	@ 0x28
 8004fc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e054      	b.n	800507e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 32f9 	ldrb.w	r3, [r3, #761]	@ 0x2f9
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d106      	bne.n	8004ff4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f006 fdc8 	bl	800bb84 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2203      	movs	r2, #3
 8004ff8:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005004:	2b00      	cmp	r3, #0
 8005006:	d102      	bne.n	800500e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4618      	mov	r0, r3
 8005014:	f003 fe06 	bl	8008c24 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	603b      	str	r3, [r7, #0]
 800501e:	687e      	ldr	r6, [r7, #4]
 8005020:	466d      	mov	r5, sp
 8005022:	f106 0410 	add.w	r4, r6, #16
 8005026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005028:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800502a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800502c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800502e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005032:	e885 0003 	stmia.w	r5, {r0, r1}
 8005036:	1d33      	adds	r3, r6, #4
 8005038:	cb0e      	ldmia	r3, {r1, r2, r3}
 800503a:	6838      	ldr	r0, [r7, #0]
 800503c:	f003 fd80 	bl	8008b40 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2101      	movs	r1, #1
 8005046:	4618      	mov	r0, r3
 8005048:	f003 fdfd 	bl	8008c46 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	603b      	str	r3, [r7, #0]
 8005052:	687e      	ldr	r6, [r7, #4]
 8005054:	466d      	mov	r5, sp
 8005056:	f106 0410 	add.w	r4, r6, #16
 800505a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800505c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800505e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005062:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005066:	e885 0003 	stmia.w	r5, {r0, r1}
 800506a:	1d33      	adds	r3, r6, #4
 800506c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800506e:	6838      	ldr	r0, [r7, #0]
 8005070:	f003 ff86 	bl	8008f80 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005086 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8005086:	b590      	push	{r4, r7, lr}
 8005088:	b089      	sub	sp, #36	@ 0x24
 800508a:	af04      	add	r7, sp, #16
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	4608      	mov	r0, r1
 8005090:	4611      	mov	r1, r2
 8005092:	461a      	mov	r2, r3
 8005094:	4603      	mov	r3, r0
 8005096:	70fb      	strb	r3, [r7, #3]
 8005098:	460b      	mov	r3, r1
 800509a:	70bb      	strb	r3, [r7, #2]
 800509c:	4613      	mov	r3, r2
 800509e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d101      	bne.n	80050ae <HAL_HCD_HC_Init+0x28>
 80050aa:	2302      	movs	r3, #2
 80050ac:	e076      	b.n	800519c <HAL_HCD_HC_Init+0x116>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80050b6:	78fb      	ldrb	r3, [r7, #3]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	212c      	movs	r1, #44	@ 0x2c
 80050bc:	fb01 f303 	mul.w	r3, r1, r3
 80050c0:	4413      	add	r3, r2
 80050c2:	333d      	adds	r3, #61	@ 0x3d
 80050c4:	2200      	movs	r2, #0
 80050c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80050c8:	78fb      	ldrb	r3, [r7, #3]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	212c      	movs	r1, #44	@ 0x2c
 80050ce:	fb01 f303 	mul.w	r3, r1, r3
 80050d2:	4413      	add	r3, r2
 80050d4:	3338      	adds	r3, #56	@ 0x38
 80050d6:	787a      	ldrb	r2, [r7, #1]
 80050d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80050da:	78fb      	ldrb	r3, [r7, #3]
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	212c      	movs	r1, #44	@ 0x2c
 80050e0:	fb01 f303 	mul.w	r3, r1, r3
 80050e4:	4413      	add	r3, r2
 80050e6:	3340      	adds	r3, #64	@ 0x40
 80050e8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80050ea:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80050ec:	78fb      	ldrb	r3, [r7, #3]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	212c      	movs	r1, #44	@ 0x2c
 80050f2:	fb01 f303 	mul.w	r3, r1, r3
 80050f6:	4413      	add	r3, r2
 80050f8:	3339      	adds	r3, #57	@ 0x39
 80050fa:	78fa      	ldrb	r2, [r7, #3]
 80050fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80050fe:	78fb      	ldrb	r3, [r7, #3]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	212c      	movs	r1, #44	@ 0x2c
 8005104:	fb01 f303 	mul.w	r3, r1, r3
 8005108:	4413      	add	r3, r2
 800510a:	333f      	adds	r3, #63	@ 0x3f
 800510c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005110:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005112:	78fb      	ldrb	r3, [r7, #3]
 8005114:	78ba      	ldrb	r2, [r7, #2]
 8005116:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800511a:	b2d0      	uxtb	r0, r2
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	212c      	movs	r1, #44	@ 0x2c
 8005120:	fb01 f303 	mul.w	r3, r1, r3
 8005124:	4413      	add	r3, r2
 8005126:	333a      	adds	r3, #58	@ 0x3a
 8005128:	4602      	mov	r2, r0
 800512a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800512c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005130:	2b00      	cmp	r3, #0
 8005132:	da09      	bge.n	8005148 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	212c      	movs	r1, #44	@ 0x2c
 800513a:	fb01 f303 	mul.w	r3, r1, r3
 800513e:	4413      	add	r3, r2
 8005140:	333b      	adds	r3, #59	@ 0x3b
 8005142:	2201      	movs	r2, #1
 8005144:	701a      	strb	r2, [r3, #0]
 8005146:	e008      	b.n	800515a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005148:	78fb      	ldrb	r3, [r7, #3]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	212c      	movs	r1, #44	@ 0x2c
 800514e:	fb01 f303 	mul.w	r3, r1, r3
 8005152:	4413      	add	r3, r2
 8005154:	333b      	adds	r3, #59	@ 0x3b
 8005156:	2200      	movs	r2, #0
 8005158:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800515a:	78fb      	ldrb	r3, [r7, #3]
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	212c      	movs	r1, #44	@ 0x2c
 8005160:	fb01 f303 	mul.w	r3, r1, r3
 8005164:	4413      	add	r3, r2
 8005166:	333c      	adds	r3, #60	@ 0x3c
 8005168:	f897 2020 	ldrb.w	r2, [r7, #32]
 800516c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6818      	ldr	r0, [r3, #0]
 8005172:	787c      	ldrb	r4, [r7, #1]
 8005174:	78ba      	ldrb	r2, [r7, #2]
 8005176:	78f9      	ldrb	r1, [r7, #3]
 8005178:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800517a:	9302      	str	r3, [sp, #8]
 800517c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005180:	9301      	str	r3, [sp, #4]
 8005182:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	4623      	mov	r3, r4
 800518a:	f004 f87f 	bl	800928c <USB_HC_Init>
 800518e:	4603      	mov	r3, r0
 8005190:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 800519a:	7bfb      	ldrb	r3, [r7, #15]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3714      	adds	r7, #20
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd90      	pop	{r4, r7, pc}

080051a4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	460b      	mov	r3, r1
 80051ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80051b0:	2300      	movs	r3, #0
 80051b2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d101      	bne.n	80051c2 <HAL_HCD_HC_Halt+0x1e>
 80051be:	2302      	movs	r3, #2
 80051c0:	e00f      	b.n	80051e2 <HAL_HCD_HC_Halt+0x3e>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	78fa      	ldrb	r2, [r7, #3]
 80051d0:	4611      	mov	r1, r2
 80051d2:	4618      	mov	r0, r3
 80051d4:	f004 facf 	bl	8009776 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
	...

080051ec <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	4608      	mov	r0, r1
 80051f6:	4611      	mov	r1, r2
 80051f8:	461a      	mov	r2, r3
 80051fa:	4603      	mov	r3, r0
 80051fc:	70fb      	strb	r3, [r7, #3]
 80051fe:	460b      	mov	r3, r1
 8005200:	70bb      	strb	r3, [r7, #2]
 8005202:	4613      	mov	r3, r2
 8005204:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005206:	78fb      	ldrb	r3, [r7, #3]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	212c      	movs	r1, #44	@ 0x2c
 800520c:	fb01 f303 	mul.w	r3, r1, r3
 8005210:	4413      	add	r3, r2
 8005212:	333b      	adds	r3, #59	@ 0x3b
 8005214:	78ba      	ldrb	r2, [r7, #2]
 8005216:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005218:	78fb      	ldrb	r3, [r7, #3]
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	212c      	movs	r1, #44	@ 0x2c
 800521e:	fb01 f303 	mul.w	r3, r1, r3
 8005222:	4413      	add	r3, r2
 8005224:	333f      	adds	r3, #63	@ 0x3f
 8005226:	787a      	ldrb	r2, [r7, #1]
 8005228:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800522a:	7c3b      	ldrb	r3, [r7, #16]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d112      	bne.n	8005256 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005230:	78fb      	ldrb	r3, [r7, #3]
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	212c      	movs	r1, #44	@ 0x2c
 8005236:	fb01 f303 	mul.w	r3, r1, r3
 800523a:	4413      	add	r3, r2
 800523c:	3342      	adds	r3, #66	@ 0x42
 800523e:	2203      	movs	r2, #3
 8005240:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005242:	78fb      	ldrb	r3, [r7, #3]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	212c      	movs	r1, #44	@ 0x2c
 8005248:	fb01 f303 	mul.w	r3, r1, r3
 800524c:	4413      	add	r3, r2
 800524e:	333d      	adds	r3, #61	@ 0x3d
 8005250:	7f3a      	ldrb	r2, [r7, #28]
 8005252:	701a      	strb	r2, [r3, #0]
 8005254:	e008      	b.n	8005268 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005256:	78fb      	ldrb	r3, [r7, #3]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	212c      	movs	r1, #44	@ 0x2c
 800525c:	fb01 f303 	mul.w	r3, r1, r3
 8005260:	4413      	add	r3, r2
 8005262:	3342      	adds	r3, #66	@ 0x42
 8005264:	2202      	movs	r2, #2
 8005266:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005268:	787b      	ldrb	r3, [r7, #1]
 800526a:	2b03      	cmp	r3, #3
 800526c:	f200 80c6 	bhi.w	80053fc <HAL_HCD_HC_SubmitRequest+0x210>
 8005270:	a201      	add	r2, pc, #4	@ (adr r2, 8005278 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8005272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005276:	bf00      	nop
 8005278:	08005289 	.word	0x08005289
 800527c:	080053e9 	.word	0x080053e9
 8005280:	080052ed 	.word	0x080052ed
 8005284:	0800536b 	.word	0x0800536b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005288:	7c3b      	ldrb	r3, [r7, #16]
 800528a:	2b01      	cmp	r3, #1
 800528c:	f040 80b8 	bne.w	8005400 <HAL_HCD_HC_SubmitRequest+0x214>
 8005290:	78bb      	ldrb	r3, [r7, #2]
 8005292:	2b00      	cmp	r3, #0
 8005294:	f040 80b4 	bne.w	8005400 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8005298:	8b3b      	ldrh	r3, [r7, #24]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d108      	bne.n	80052b0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800529e:	78fb      	ldrb	r3, [r7, #3]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	212c      	movs	r1, #44	@ 0x2c
 80052a4:	fb01 f303 	mul.w	r3, r1, r3
 80052a8:	4413      	add	r3, r2
 80052aa:	3355      	adds	r3, #85	@ 0x55
 80052ac:	2201      	movs	r2, #1
 80052ae:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80052b0:	78fb      	ldrb	r3, [r7, #3]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	212c      	movs	r1, #44	@ 0x2c
 80052b6:	fb01 f303 	mul.w	r3, r1, r3
 80052ba:	4413      	add	r3, r2
 80052bc:	3355      	adds	r3, #85	@ 0x55
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d109      	bne.n	80052d8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80052c4:	78fb      	ldrb	r3, [r7, #3]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	212c      	movs	r1, #44	@ 0x2c
 80052ca:	fb01 f303 	mul.w	r3, r1, r3
 80052ce:	4413      	add	r3, r2
 80052d0:	3342      	adds	r3, #66	@ 0x42
 80052d2:	2200      	movs	r2, #0
 80052d4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80052d6:	e093      	b.n	8005400 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80052d8:	78fb      	ldrb	r3, [r7, #3]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	212c      	movs	r1, #44	@ 0x2c
 80052de:	fb01 f303 	mul.w	r3, r1, r3
 80052e2:	4413      	add	r3, r2
 80052e4:	3342      	adds	r3, #66	@ 0x42
 80052e6:	2202      	movs	r2, #2
 80052e8:	701a      	strb	r2, [r3, #0]
      break;
 80052ea:	e089      	b.n	8005400 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80052ec:	78bb      	ldrb	r3, [r7, #2]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d11d      	bne.n	800532e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80052f2:	78fb      	ldrb	r3, [r7, #3]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	212c      	movs	r1, #44	@ 0x2c
 80052f8:	fb01 f303 	mul.w	r3, r1, r3
 80052fc:	4413      	add	r3, r2
 80052fe:	3355      	adds	r3, #85	@ 0x55
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005306:	78fb      	ldrb	r3, [r7, #3]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	212c      	movs	r1, #44	@ 0x2c
 800530c:	fb01 f303 	mul.w	r3, r1, r3
 8005310:	4413      	add	r3, r2
 8005312:	3342      	adds	r3, #66	@ 0x42
 8005314:	2200      	movs	r2, #0
 8005316:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005318:	e073      	b.n	8005402 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800531a:	78fb      	ldrb	r3, [r7, #3]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	212c      	movs	r1, #44	@ 0x2c
 8005320:	fb01 f303 	mul.w	r3, r1, r3
 8005324:	4413      	add	r3, r2
 8005326:	3342      	adds	r3, #66	@ 0x42
 8005328:	2202      	movs	r2, #2
 800532a:	701a      	strb	r2, [r3, #0]
      break;
 800532c:	e069      	b.n	8005402 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800532e:	78fb      	ldrb	r3, [r7, #3]
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	212c      	movs	r1, #44	@ 0x2c
 8005334:	fb01 f303 	mul.w	r3, r1, r3
 8005338:	4413      	add	r3, r2
 800533a:	3354      	adds	r3, #84	@ 0x54
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d109      	bne.n	8005356 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005342:	78fb      	ldrb	r3, [r7, #3]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	212c      	movs	r1, #44	@ 0x2c
 8005348:	fb01 f303 	mul.w	r3, r1, r3
 800534c:	4413      	add	r3, r2
 800534e:	3342      	adds	r3, #66	@ 0x42
 8005350:	2200      	movs	r2, #0
 8005352:	701a      	strb	r2, [r3, #0]
      break;
 8005354:	e055      	b.n	8005402 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005356:	78fb      	ldrb	r3, [r7, #3]
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	212c      	movs	r1, #44	@ 0x2c
 800535c:	fb01 f303 	mul.w	r3, r1, r3
 8005360:	4413      	add	r3, r2
 8005362:	3342      	adds	r3, #66	@ 0x42
 8005364:	2202      	movs	r2, #2
 8005366:	701a      	strb	r2, [r3, #0]
      break;
 8005368:	e04b      	b.n	8005402 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800536a:	78bb      	ldrb	r3, [r7, #2]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d11d      	bne.n	80053ac <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	212c      	movs	r1, #44	@ 0x2c
 8005376:	fb01 f303 	mul.w	r3, r1, r3
 800537a:	4413      	add	r3, r2
 800537c:	3355      	adds	r3, #85	@ 0x55
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d109      	bne.n	8005398 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005384:	78fb      	ldrb	r3, [r7, #3]
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	212c      	movs	r1, #44	@ 0x2c
 800538a:	fb01 f303 	mul.w	r3, r1, r3
 800538e:	4413      	add	r3, r2
 8005390:	3342      	adds	r3, #66	@ 0x42
 8005392:	2200      	movs	r2, #0
 8005394:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005396:	e034      	b.n	8005402 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005398:	78fb      	ldrb	r3, [r7, #3]
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	212c      	movs	r1, #44	@ 0x2c
 800539e:	fb01 f303 	mul.w	r3, r1, r3
 80053a2:	4413      	add	r3, r2
 80053a4:	3342      	adds	r3, #66	@ 0x42
 80053a6:	2202      	movs	r2, #2
 80053a8:	701a      	strb	r2, [r3, #0]
      break;
 80053aa:	e02a      	b.n	8005402 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80053ac:	78fb      	ldrb	r3, [r7, #3]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	212c      	movs	r1, #44	@ 0x2c
 80053b2:	fb01 f303 	mul.w	r3, r1, r3
 80053b6:	4413      	add	r3, r2
 80053b8:	3354      	adds	r3, #84	@ 0x54
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d109      	bne.n	80053d4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80053c0:	78fb      	ldrb	r3, [r7, #3]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	212c      	movs	r1, #44	@ 0x2c
 80053c6:	fb01 f303 	mul.w	r3, r1, r3
 80053ca:	4413      	add	r3, r2
 80053cc:	3342      	adds	r3, #66	@ 0x42
 80053ce:	2200      	movs	r2, #0
 80053d0:	701a      	strb	r2, [r3, #0]
      break;
 80053d2:	e016      	b.n	8005402 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	212c      	movs	r1, #44	@ 0x2c
 80053da:	fb01 f303 	mul.w	r3, r1, r3
 80053de:	4413      	add	r3, r2
 80053e0:	3342      	adds	r3, #66	@ 0x42
 80053e2:	2202      	movs	r2, #2
 80053e4:	701a      	strb	r2, [r3, #0]
      break;
 80053e6:	e00c      	b.n	8005402 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80053e8:	78fb      	ldrb	r3, [r7, #3]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	212c      	movs	r1, #44	@ 0x2c
 80053ee:	fb01 f303 	mul.w	r3, r1, r3
 80053f2:	4413      	add	r3, r2
 80053f4:	3342      	adds	r3, #66	@ 0x42
 80053f6:	2200      	movs	r2, #0
 80053f8:	701a      	strb	r2, [r3, #0]
      break;
 80053fa:	e002      	b.n	8005402 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80053fc:	bf00      	nop
 80053fe:	e000      	b.n	8005402 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8005400:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005402:	78fb      	ldrb	r3, [r7, #3]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	212c      	movs	r1, #44	@ 0x2c
 8005408:	fb01 f303 	mul.w	r3, r1, r3
 800540c:	4413      	add	r3, r2
 800540e:	3344      	adds	r3, #68	@ 0x44
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005414:	78fb      	ldrb	r3, [r7, #3]
 8005416:	8b3a      	ldrh	r2, [r7, #24]
 8005418:	6879      	ldr	r1, [r7, #4]
 800541a:	202c      	movs	r0, #44	@ 0x2c
 800541c:	fb00 f303 	mul.w	r3, r0, r3
 8005420:	440b      	add	r3, r1
 8005422:	334c      	adds	r3, #76	@ 0x4c
 8005424:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005426:	78fb      	ldrb	r3, [r7, #3]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	212c      	movs	r1, #44	@ 0x2c
 800542c:	fb01 f303 	mul.w	r3, r1, r3
 8005430:	4413      	add	r3, r2
 8005432:	3360      	adds	r3, #96	@ 0x60
 8005434:	2200      	movs	r2, #0
 8005436:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005438:	78fb      	ldrb	r3, [r7, #3]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	212c      	movs	r1, #44	@ 0x2c
 800543e:	fb01 f303 	mul.w	r3, r1, r3
 8005442:	4413      	add	r3, r2
 8005444:	3350      	adds	r3, #80	@ 0x50
 8005446:	2200      	movs	r2, #0
 8005448:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800544a:	78fb      	ldrb	r3, [r7, #3]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	212c      	movs	r1, #44	@ 0x2c
 8005450:	fb01 f303 	mul.w	r3, r1, r3
 8005454:	4413      	add	r3, r2
 8005456:	3339      	adds	r3, #57	@ 0x39
 8005458:	78fa      	ldrb	r2, [r7, #3]
 800545a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800545c:	78fb      	ldrb	r3, [r7, #3]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	212c      	movs	r1, #44	@ 0x2c
 8005462:	fb01 f303 	mul.w	r3, r1, r3
 8005466:	4413      	add	r3, r2
 8005468:	3361      	adds	r3, #97	@ 0x61
 800546a:	2200      	movs	r2, #0
 800546c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6818      	ldr	r0, [r3, #0]
 8005472:	78fb      	ldrb	r3, [r7, #3]
 8005474:	222c      	movs	r2, #44	@ 0x2c
 8005476:	fb02 f303 	mul.w	r3, r2, r3
 800547a:	3338      	adds	r3, #56	@ 0x38
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	18d1      	adds	r1, r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	461a      	mov	r2, r3
 8005488:	f004 f822 	bl	80094d0 <USB_HC_StartXfer>
 800548c:	4603      	mov	r3, r0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop

08005498 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f003 fd23 	bl	8008efa <USB_GetMode>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	f040 80f6 	bne.w	80056a8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f003 fd07 	bl	8008ed4 <USB_ReadInterrupts>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 80ec 	beq.w	80056a6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f003 fcfe 	bl	8008ed4 <USB_ReadInterrupts>
 80054d8:	4603      	mov	r3, r0
 80054da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054e2:	d104      	bne.n	80054ee <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80054ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f003 fcee 	bl	8008ed4 <USB_ReadInterrupts>
 80054f8:	4603      	mov	r3, r0
 80054fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005502:	d104      	bne.n	800550e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800550c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4618      	mov	r0, r3
 8005514:	f003 fcde 	bl	8008ed4 <USB_ReadInterrupts>
 8005518:	4603      	mov	r3, r0
 800551a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800551e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005522:	d104      	bne.n	800552e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800552c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4618      	mov	r0, r3
 8005534:	f003 fcce 	bl	8008ed4 <USB_ReadInterrupts>
 8005538:	4603      	mov	r3, r0
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b02      	cmp	r3, #2
 8005540:	d103      	bne.n	800554a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2202      	movs	r2, #2
 8005548:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4618      	mov	r0, r3
 8005550:	f003 fcc0 	bl	8008ed4 <USB_ReadInterrupts>
 8005554:	4603      	mov	r3, r0
 8005556:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800555a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800555e:	d11c      	bne.n	800559a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005568:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10f      	bne.n	800559a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800557a:	2110      	movs	r1, #16
 800557c:	6938      	ldr	r0, [r7, #16]
 800557e:	f003 fbaf 	bl	8008ce0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8005582:	6938      	ldr	r0, [r7, #16]
 8005584:	f003 fbe0 	bl	8008d48 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2101      	movs	r1, #1
 800558e:	4618      	mov	r0, r3
 8005590:	f003 fdb6 	bl	8009100 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f006 fb73 	bl	800bc80 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4618      	mov	r0, r3
 80055a0:	f003 fc98 	bl	8008ed4 <USB_ReadInterrupts>
 80055a4:	4603      	mov	r3, r0
 80055a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055ae:	d102      	bne.n	80055b6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f001 f89e 	bl	80066f2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f003 fc8a 	bl	8008ed4 <USB_ReadInterrupts>
 80055c0:	4603      	mov	r3, r0
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b08      	cmp	r3, #8
 80055c8:	d106      	bne.n	80055d8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f006 fb3c 	bl	800bc48 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2208      	movs	r2, #8
 80055d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4618      	mov	r0, r3
 80055de:	f003 fc79 	bl	8008ed4 <USB_ReadInterrupts>
 80055e2:	4603      	mov	r3, r0
 80055e4:	f003 0310 	and.w	r3, r3, #16
 80055e8:	2b10      	cmp	r3, #16
 80055ea:	d101      	bne.n	80055f0 <HAL_HCD_IRQHandler+0x158>
 80055ec:	2301      	movs	r3, #1
 80055ee:	e000      	b.n	80055f2 <HAL_HCD_IRQHandler+0x15a>
 80055f0:	2300      	movs	r3, #0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d012      	beq.n	800561c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	699a      	ldr	r2, [r3, #24]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0210 	bic.w	r2, r2, #16
 8005604:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 ffa1 	bl	800654e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699a      	ldr	r2, [r3, #24]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0210 	orr.w	r2, r2, #16
 800561a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4618      	mov	r0, r3
 8005622:	f003 fc57 	bl	8008ed4 <USB_ReadInterrupts>
 8005626:	4603      	mov	r3, r0
 8005628:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800562c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005630:	d13a      	bne.n	80056a8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4618      	mov	r0, r3
 8005638:	f004 f88c 	bl	8009754 <USB_HC_ReadInterrupt>
 800563c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800563e:	2300      	movs	r3, #0
 8005640:	617b      	str	r3, [r7, #20]
 8005642:	e025      	b.n	8005690 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	fa22 f303 	lsr.w	r3, r2, r3
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d018      	beq.n	800568a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4413      	add	r3, r2
 8005660:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800566a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800566e:	d106      	bne.n	800567e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	b2db      	uxtb	r3, r3
 8005674:	4619      	mov	r1, r3
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f8ab 	bl	80057d2 <HCD_HC_IN_IRQHandler>
 800567c:	e005      	b.n	800568a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	b2db      	uxtb	r3, r3
 8005682:	4619      	mov	r1, r3
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 fbf9 	bl	8005e7c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	3301      	adds	r3, #1
 800568e:	617b      	str	r3, [r7, #20]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	429a      	cmp	r2, r3
 8005698:	d3d4      	bcc.n	8005644 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80056a2:	615a      	str	r2, [r3, #20]
 80056a4:	e000      	b.n	80056a8 <HAL_HCD_IRQHandler+0x210>
      return;
 80056a6:	bf00      	nop
    }
  }
}
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b082      	sub	sp, #8
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d101      	bne.n	80056c4 <HAL_HCD_Start+0x16>
 80056c0:	2302      	movs	r3, #2
 80056c2:	e013      	b.n	80056ec <HAL_HCD_Start+0x3e>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2101      	movs	r1, #1
 80056d2:	4618      	mov	r0, r3
 80056d4:	f003 fd78 	bl	80091c8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4618      	mov	r0, r3
 80056de:	f003 fa90 	bl	8008c02 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8005702:	2b01      	cmp	r3, #1
 8005704:	d101      	bne.n	800570a <HAL_HCD_Stop+0x16>
 8005706:	2302      	movs	r3, #2
 8005708:	e00d      	b.n	8005726 <HAL_HCD_Stop+0x32>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4618      	mov	r0, r3
 8005718:	f004 f966 	bl	80099e8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b082      	sub	sp, #8
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4618      	mov	r0, r3
 800573c:	f003 fd1a 	bl	8009174 <USB_ResetPort>
 8005740:	4603      	mov	r3, r0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	460b      	mov	r3, r1
 8005754:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005756:	78fb      	ldrb	r3, [r7, #3]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	212c      	movs	r1, #44	@ 0x2c
 800575c:	fb01 f303 	mul.w	r3, r1, r3
 8005760:	4413      	add	r3, r2
 8005762:	3360      	adds	r3, #96	@ 0x60
 8005764:	781b      	ldrb	r3, [r3, #0]
}
 8005766:	4618      	mov	r0, r3
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	460b      	mov	r3, r1
 800577c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800577e:	78fb      	ldrb	r3, [r7, #3]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	212c      	movs	r1, #44	@ 0x2c
 8005784:	fb01 f303 	mul.w	r3, r1, r3
 8005788:	4413      	add	r3, r2
 800578a:	3350      	adds	r3, #80	@ 0x50
 800578c:	681b      	ldr	r3, [r3, #0]
}
 800578e:	4618      	mov	r0, r3
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b082      	sub	sp, #8
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f003 fd5e 	bl	8009268 <USB_GetCurrentFrame>
 80057ac:	4603      	mov	r3, r0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b082      	sub	sp, #8
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f003 fd39 	bl	800923a <USB_GetHostSpeed>
 80057c8:	4603      	mov	r3, r0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b086      	sub	sp, #24
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	460b      	mov	r3, r1
 80057dc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80057e8:	78fb      	ldrb	r3, [r7, #3]
 80057ea:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 0304 	and.w	r3, r3, #4
 80057fe:	2b04      	cmp	r3, #4
 8005800:	d11a      	bne.n	8005838 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	4413      	add	r3, r2
 800580a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800580e:	461a      	mov	r2, r3
 8005810:	2304      	movs	r3, #4
 8005812:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	212c      	movs	r1, #44	@ 0x2c
 800581a:	fb01 f303 	mul.w	r3, r1, r3
 800581e:	4413      	add	r3, r2
 8005820:	3361      	adds	r3, #97	@ 0x61
 8005822:	2206      	movs	r2, #6
 8005824:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	b2d2      	uxtb	r2, r2
 800582e:	4611      	mov	r1, r2
 8005830:	4618      	mov	r0, r3
 8005832:	f003 ffa0 	bl	8009776 <USB_HC_Halt>
 8005836:	e0af      	b.n	8005998 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	4413      	add	r3, r2
 8005840:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800584a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800584e:	d11b      	bne.n	8005888 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	4413      	add	r3, r2
 8005858:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800585c:	461a      	mov	r2, r3
 800585e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005862:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	212c      	movs	r1, #44	@ 0x2c
 800586a:	fb01 f303 	mul.w	r3, r1, r3
 800586e:	4413      	add	r3, r2
 8005870:	3361      	adds	r3, #97	@ 0x61
 8005872:	2207      	movs	r2, #7
 8005874:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	b2d2      	uxtb	r2, r2
 800587e:	4611      	mov	r1, r2
 8005880:	4618      	mov	r0, r3
 8005882:	f003 ff78 	bl	8009776 <USB_HC_Halt>
 8005886:	e087      	b.n	8005998 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	4413      	add	r3, r2
 8005890:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 0320 	and.w	r3, r3, #32
 800589a:	2b20      	cmp	r3, #32
 800589c:	d109      	bne.n	80058b2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058aa:	461a      	mov	r2, r3
 80058ac:	2320      	movs	r3, #32
 80058ae:	6093      	str	r3, [r2, #8]
 80058b0:	e072      	b.n	8005998 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f003 0308 	and.w	r3, r3, #8
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	d11a      	bne.n	80058fe <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058d4:	461a      	mov	r2, r3
 80058d6:	2308      	movs	r3, #8
 80058d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	212c      	movs	r1, #44	@ 0x2c
 80058e0:	fb01 f303 	mul.w	r3, r1, r3
 80058e4:	4413      	add	r3, r2
 80058e6:	3361      	adds	r3, #97	@ 0x61
 80058e8:	2205      	movs	r2, #5
 80058ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	4611      	mov	r1, r2
 80058f6:	4618      	mov	r0, r3
 80058f8:	f003 ff3d 	bl	8009776 <USB_HC_Halt>
 80058fc:	e04c      	b.n	8005998 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	4413      	add	r3, r2
 8005906:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005910:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005914:	d11b      	bne.n	800594e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	4413      	add	r3, r2
 800591e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005922:	461a      	mov	r2, r3
 8005924:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005928:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	212c      	movs	r1, #44	@ 0x2c
 8005930:	fb01 f303 	mul.w	r3, r1, r3
 8005934:	4413      	add	r3, r2
 8005936:	3361      	adds	r3, #97	@ 0x61
 8005938:	2208      	movs	r2, #8
 800593a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	b2d2      	uxtb	r2, r2
 8005944:	4611      	mov	r1, r2
 8005946:	4618      	mov	r0, r3
 8005948:	f003 ff15 	bl	8009776 <USB_HC_Halt>
 800594c:	e024      	b.n	8005998 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	4413      	add	r3, r2
 8005956:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005960:	2b80      	cmp	r3, #128	@ 0x80
 8005962:	d119      	bne.n	8005998 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	4413      	add	r3, r2
 800596c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005970:	461a      	mov	r2, r3
 8005972:	2380      	movs	r3, #128	@ 0x80
 8005974:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	212c      	movs	r1, #44	@ 0x2c
 800597c:	fb01 f303 	mul.w	r3, r1, r3
 8005980:	4413      	add	r3, r2
 8005982:	3361      	adds	r3, #97	@ 0x61
 8005984:	2206      	movs	r2, #6
 8005986:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	b2d2      	uxtb	r2, r2
 8005990:	4611      	mov	r1, r2
 8005992:	4618      	mov	r0, r3
 8005994:	f003 feef 	bl	8009776 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059ae:	d112      	bne.n	80059d6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	b2d2      	uxtb	r2, r2
 80059b8:	4611      	mov	r1, r2
 80059ba:	4618      	mov	r0, r3
 80059bc:	f003 fedb 	bl	8009776 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059cc:	461a      	mov	r2, r3
 80059ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80059d2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80059d4:	e24e      	b.n	8005e74 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	f040 80df 	bne.w	8005bac <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d019      	beq.n	8005a2a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	212c      	movs	r1, #44	@ 0x2c
 80059fc:	fb01 f303 	mul.w	r3, r1, r3
 8005a00:	4413      	add	r3, r2
 8005a02:	3348      	adds	r3, #72	@ 0x48
 8005a04:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	0159      	lsls	r1, r3, #5
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	440b      	add	r3, r1
 8005a0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005a18:	1ad2      	subs	r2, r2, r3
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	202c      	movs	r0, #44	@ 0x2c
 8005a20:	fb00 f303 	mul.w	r3, r0, r3
 8005a24:	440b      	add	r3, r1
 8005a26:	3350      	adds	r3, #80	@ 0x50
 8005a28:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	212c      	movs	r1, #44	@ 0x2c
 8005a30:	fb01 f303 	mul.w	r3, r1, r3
 8005a34:	4413      	add	r3, r2
 8005a36:	3361      	adds	r3, #97	@ 0x61
 8005a38:	2201      	movs	r2, #1
 8005a3a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	212c      	movs	r1, #44	@ 0x2c
 8005a42:	fb01 f303 	mul.w	r3, r1, r3
 8005a46:	4413      	add	r3, r2
 8005a48:	335c      	adds	r3, #92	@ 0x5c
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	212c      	movs	r1, #44	@ 0x2c
 8005a66:	fb01 f303 	mul.w	r3, r1, r3
 8005a6a:	4413      	add	r3, r2
 8005a6c:	333f      	adds	r3, #63	@ 0x3f
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d009      	beq.n	8005a88 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	212c      	movs	r1, #44	@ 0x2c
 8005a7a:	fb01 f303 	mul.w	r3, r1, r3
 8005a7e:	4413      	add	r3, r2
 8005a80:	333f      	adds	r3, #63	@ 0x3f
 8005a82:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d111      	bne.n	8005aac <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	4611      	mov	r1, r2
 8005a92:	4618      	mov	r0, r3
 8005a94:	f003 fe6f 	bl	8009776 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	2310      	movs	r3, #16
 8005aa8:	6093      	str	r3, [r2, #8]
 8005aaa:	e03a      	b.n	8005b22 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	212c      	movs	r1, #44	@ 0x2c
 8005ab2:	fb01 f303 	mul.w	r3, r1, r3
 8005ab6:	4413      	add	r3, r2
 8005ab8:	333f      	adds	r3, #63	@ 0x3f
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	2b03      	cmp	r3, #3
 8005abe:	d009      	beq.n	8005ad4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	212c      	movs	r1, #44	@ 0x2c
 8005ac6:	fb01 f303 	mul.w	r3, r1, r3
 8005aca:	4413      	add	r3, r2
 8005acc:	333f      	adds	r3, #63	@ 0x3f
 8005ace:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d126      	bne.n	8005b22 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	0151      	lsls	r1, r2, #5
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	440a      	add	r2, r1
 8005aea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005aee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005af2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	212c      	movs	r1, #44	@ 0x2c
 8005afa:	fb01 f303 	mul.w	r3, r1, r3
 8005afe:	4413      	add	r3, r2
 8005b00:	3360      	adds	r3, #96	@ 0x60
 8005b02:	2201      	movs	r2, #1
 8005b04:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	b2d9      	uxtb	r1, r3
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	202c      	movs	r0, #44	@ 0x2c
 8005b10:	fb00 f303 	mul.w	r3, r0, r3
 8005b14:	4413      	add	r3, r2
 8005b16:	3360      	adds	r3, #96	@ 0x60
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f006 f8bd 	bl	800bc9c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d12b      	bne.n	8005b82 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	212c      	movs	r1, #44	@ 0x2c
 8005b30:	fb01 f303 	mul.w	r3, r1, r3
 8005b34:	4413      	add	r3, r2
 8005b36:	3348      	adds	r3, #72	@ 0x48
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6879      	ldr	r1, [r7, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	202c      	movs	r0, #44	@ 0x2c
 8005b40:	fb00 f202 	mul.w	r2, r0, r2
 8005b44:	440a      	add	r2, r1
 8005b46:	3240      	adds	r2, #64	@ 0x40
 8005b48:	8812      	ldrh	r2, [r2, #0]
 8005b4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 818e 	beq.w	8005e74 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	212c      	movs	r1, #44	@ 0x2c
 8005b5e:	fb01 f303 	mul.w	r3, r1, r3
 8005b62:	4413      	add	r3, r2
 8005b64:	3354      	adds	r3, #84	@ 0x54
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	f083 0301 	eor.w	r3, r3, #1
 8005b6c:	b2d8      	uxtb	r0, r3
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	212c      	movs	r1, #44	@ 0x2c
 8005b74:	fb01 f303 	mul.w	r3, r1, r3
 8005b78:	4413      	add	r3, r2
 8005b7a:	3354      	adds	r3, #84	@ 0x54
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	701a      	strb	r2, [r3, #0]
}
 8005b80:	e178      	b.n	8005e74 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	212c      	movs	r1, #44	@ 0x2c
 8005b88:	fb01 f303 	mul.w	r3, r1, r3
 8005b8c:	4413      	add	r3, r2
 8005b8e:	3354      	adds	r3, #84	@ 0x54
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	f083 0301 	eor.w	r3, r3, #1
 8005b96:	b2d8      	uxtb	r0, r3
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	212c      	movs	r1, #44	@ 0x2c
 8005b9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ba2:	4413      	add	r3, r2
 8005ba4:	3354      	adds	r3, #84	@ 0x54
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	701a      	strb	r2, [r3, #0]
}
 8005baa:	e163      	b.n	8005e74 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	f040 80f6 	bne.w	8005db0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	212c      	movs	r1, #44	@ 0x2c
 8005bca:	fb01 f303 	mul.w	r3, r1, r3
 8005bce:	4413      	add	r3, r2
 8005bd0:	3361      	adds	r3, #97	@ 0x61
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d109      	bne.n	8005bec <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	212c      	movs	r1, #44	@ 0x2c
 8005bde:	fb01 f303 	mul.w	r3, r1, r3
 8005be2:	4413      	add	r3, r2
 8005be4:	3360      	adds	r3, #96	@ 0x60
 8005be6:	2201      	movs	r2, #1
 8005be8:	701a      	strb	r2, [r3, #0]
 8005bea:	e0c9      	b.n	8005d80 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	212c      	movs	r1, #44	@ 0x2c
 8005bf2:	fb01 f303 	mul.w	r3, r1, r3
 8005bf6:	4413      	add	r3, r2
 8005bf8:	3361      	adds	r3, #97	@ 0x61
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	2b05      	cmp	r3, #5
 8005bfe:	d109      	bne.n	8005c14 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	212c      	movs	r1, #44	@ 0x2c
 8005c06:	fb01 f303 	mul.w	r3, r1, r3
 8005c0a:	4413      	add	r3, r2
 8005c0c:	3360      	adds	r3, #96	@ 0x60
 8005c0e:	2205      	movs	r2, #5
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	e0b5      	b.n	8005d80 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	212c      	movs	r1, #44	@ 0x2c
 8005c1a:	fb01 f303 	mul.w	r3, r1, r3
 8005c1e:	4413      	add	r3, r2
 8005c20:	3361      	adds	r3, #97	@ 0x61
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b06      	cmp	r3, #6
 8005c26:	d009      	beq.n	8005c3c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	212c      	movs	r1, #44	@ 0x2c
 8005c2e:	fb01 f303 	mul.w	r3, r1, r3
 8005c32:	4413      	add	r3, r2
 8005c34:	3361      	adds	r3, #97	@ 0x61
 8005c36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	d150      	bne.n	8005cde <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	212c      	movs	r1, #44	@ 0x2c
 8005c42:	fb01 f303 	mul.w	r3, r1, r3
 8005c46:	4413      	add	r3, r2
 8005c48:	335c      	adds	r3, #92	@ 0x5c
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	1c5a      	adds	r2, r3, #1
 8005c4e:	6879      	ldr	r1, [r7, #4]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	202c      	movs	r0, #44	@ 0x2c
 8005c54:	fb00 f303 	mul.w	r3, r0, r3
 8005c58:	440b      	add	r3, r1
 8005c5a:	335c      	adds	r3, #92	@ 0x5c
 8005c5c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	212c      	movs	r1, #44	@ 0x2c
 8005c64:	fb01 f303 	mul.w	r3, r1, r3
 8005c68:	4413      	add	r3, r2
 8005c6a:	335c      	adds	r3, #92	@ 0x5c
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d912      	bls.n	8005c98 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	212c      	movs	r1, #44	@ 0x2c
 8005c78:	fb01 f303 	mul.w	r3, r1, r3
 8005c7c:	4413      	add	r3, r2
 8005c7e:	335c      	adds	r3, #92	@ 0x5c
 8005c80:	2200      	movs	r2, #0
 8005c82:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	212c      	movs	r1, #44	@ 0x2c
 8005c8a:	fb01 f303 	mul.w	r3, r1, r3
 8005c8e:	4413      	add	r3, r2
 8005c90:	3360      	adds	r3, #96	@ 0x60
 8005c92:	2204      	movs	r2, #4
 8005c94:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005c96:	e073      	b.n	8005d80 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	212c      	movs	r1, #44	@ 0x2c
 8005c9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ca2:	4413      	add	r3, r2
 8005ca4:	3360      	adds	r3, #96	@ 0x60
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005cc0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005cc8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005cdc:	e050      	b.n	8005d80 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	212c      	movs	r1, #44	@ 0x2c
 8005ce4:	fb01 f303 	mul.w	r3, r1, r3
 8005ce8:	4413      	add	r3, r2
 8005cea:	3361      	adds	r3, #97	@ 0x61
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d122      	bne.n	8005d38 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	212c      	movs	r1, #44	@ 0x2c
 8005cf8:	fb01 f303 	mul.w	r3, r1, r3
 8005cfc:	4413      	add	r3, r2
 8005cfe:	3360      	adds	r3, #96	@ 0x60
 8005d00:	2202      	movs	r2, #2
 8005d02:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d1a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d22:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d30:	461a      	mov	r2, r3
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	6013      	str	r3, [r2, #0]
 8005d36:	e023      	b.n	8005d80 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	212c      	movs	r1, #44	@ 0x2c
 8005d3e:	fb01 f303 	mul.w	r3, r1, r3
 8005d42:	4413      	add	r3, r2
 8005d44:	3361      	adds	r3, #97	@ 0x61
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	2b07      	cmp	r3, #7
 8005d4a:	d119      	bne.n	8005d80 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	212c      	movs	r1, #44	@ 0x2c
 8005d52:	fb01 f303 	mul.w	r3, r1, r3
 8005d56:	4413      	add	r3, r2
 8005d58:	335c      	adds	r3, #92	@ 0x5c
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	1c5a      	adds	r2, r3, #1
 8005d5e:	6879      	ldr	r1, [r7, #4]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	202c      	movs	r0, #44	@ 0x2c
 8005d64:	fb00 f303 	mul.w	r3, r0, r3
 8005d68:	440b      	add	r3, r1
 8005d6a:	335c      	adds	r3, #92	@ 0x5c
 8005d6c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	212c      	movs	r1, #44	@ 0x2c
 8005d74:	fb01 f303 	mul.w	r3, r1, r3
 8005d78:	4413      	add	r3, r2
 8005d7a:	3360      	adds	r3, #96	@ 0x60
 8005d7c:	2204      	movs	r2, #4
 8005d7e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	2302      	movs	r3, #2
 8005d90:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	b2d9      	uxtb	r1, r3
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	202c      	movs	r0, #44	@ 0x2c
 8005d9c:	fb00 f303 	mul.w	r3, r0, r3
 8005da0:	4413      	add	r3, r2
 8005da2:	3360      	adds	r3, #96	@ 0x60
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f005 ff77 	bl	800bc9c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005dae:	e061      	b.n	8005e74 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f003 0310 	and.w	r3, r3, #16
 8005dc2:	2b10      	cmp	r3, #16
 8005dc4:	d156      	bne.n	8005e74 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	212c      	movs	r1, #44	@ 0x2c
 8005dcc:	fb01 f303 	mul.w	r3, r1, r3
 8005dd0:	4413      	add	r3, r2
 8005dd2:	333f      	adds	r3, #63	@ 0x3f
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	d111      	bne.n	8005dfe <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	212c      	movs	r1, #44	@ 0x2c
 8005de0:	fb01 f303 	mul.w	r3, r1, r3
 8005de4:	4413      	add	r3, r2
 8005de6:	335c      	adds	r3, #92	@ 0x5c
 8005de8:	2200      	movs	r2, #0
 8005dea:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	4611      	mov	r1, r2
 8005df6:	4618      	mov	r0, r3
 8005df8:	f003 fcbd 	bl	8009776 <USB_HC_Halt>
 8005dfc:	e031      	b.n	8005e62 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	212c      	movs	r1, #44	@ 0x2c
 8005e04:	fb01 f303 	mul.w	r3, r1, r3
 8005e08:	4413      	add	r3, r2
 8005e0a:	333f      	adds	r3, #63	@ 0x3f
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d009      	beq.n	8005e26 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	212c      	movs	r1, #44	@ 0x2c
 8005e18:	fb01 f303 	mul.w	r3, r1, r3
 8005e1c:	4413      	add	r3, r2
 8005e1e:	333f      	adds	r3, #63	@ 0x3f
 8005e20:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d11d      	bne.n	8005e62 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	212c      	movs	r1, #44	@ 0x2c
 8005e2c:	fb01 f303 	mul.w	r3, r1, r3
 8005e30:	4413      	add	r3, r2
 8005e32:	335c      	adds	r3, #92	@ 0x5c
 8005e34:	2200      	movs	r2, #0
 8005e36:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d110      	bne.n	8005e62 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	212c      	movs	r1, #44	@ 0x2c
 8005e46:	fb01 f303 	mul.w	r3, r1, r3
 8005e4a:	4413      	add	r3, r2
 8005e4c:	3361      	adds	r3, #97	@ 0x61
 8005e4e:	2203      	movs	r2, #3
 8005e50:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	b2d2      	uxtb	r2, r2
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f003 fc8a 	bl	8009776 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e6e:	461a      	mov	r2, r3
 8005e70:	2310      	movs	r3, #16
 8005e72:	6093      	str	r3, [r2, #8]
}
 8005e74:	bf00      	nop
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b088      	sub	sp, #32
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	460b      	mov	r3, r1
 8005e86:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005e92:	78fb      	ldrb	r3, [r7, #3]
 8005e94:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b04      	cmp	r3, #4
 8005eaa:	d11a      	bne.n	8005ee2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eb8:	461a      	mov	r2, r3
 8005eba:	2304      	movs	r3, #4
 8005ebc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	212c      	movs	r1, #44	@ 0x2c
 8005ec4:	fb01 f303 	mul.w	r3, r1, r3
 8005ec8:	4413      	add	r3, r2
 8005eca:	3361      	adds	r3, #97	@ 0x61
 8005ecc:	2206      	movs	r2, #6
 8005ece:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	4611      	mov	r1, r2
 8005eda:	4618      	mov	r0, r3
 8005edc:	f003 fc4b 	bl	8009776 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8005ee0:	e331      	b.n	8006546 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f003 0320 	and.w	r3, r3, #32
 8005ef4:	2b20      	cmp	r3, #32
 8005ef6:	d12e      	bne.n	8005f56 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f04:	461a      	mov	r2, r3
 8005f06:	2320      	movs	r3, #32
 8005f08:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	212c      	movs	r1, #44	@ 0x2c
 8005f10:	fb01 f303 	mul.w	r3, r1, r3
 8005f14:	4413      	add	r3, r2
 8005f16:	333d      	adds	r3, #61	@ 0x3d
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	f040 8313 	bne.w	8006546 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	212c      	movs	r1, #44	@ 0x2c
 8005f26:	fb01 f303 	mul.w	r3, r1, r3
 8005f2a:	4413      	add	r3, r2
 8005f2c:	333d      	adds	r3, #61	@ 0x3d
 8005f2e:	2200      	movs	r2, #0
 8005f30:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	212c      	movs	r1, #44	@ 0x2c
 8005f38:	fb01 f303 	mul.w	r3, r1, r3
 8005f3c:	4413      	add	r3, r2
 8005f3e:	3360      	adds	r3, #96	@ 0x60
 8005f40:	2202      	movs	r2, #2
 8005f42:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	4611      	mov	r1, r2
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f003 fc11 	bl	8009776 <USB_HC_Halt>
}
 8005f54:	e2f7      	b.n	8006546 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f6c:	d112      	bne.n	8005f94 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f80:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	b2d2      	uxtb	r2, r2
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f003 fbf2 	bl	8009776 <USB_HC_Halt>
}
 8005f92:	e2d8      	b.n	8006546 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d140      	bne.n	800602c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	212c      	movs	r1, #44	@ 0x2c
 8005fb0:	fb01 f303 	mul.w	r3, r1, r3
 8005fb4:	4413      	add	r3, r2
 8005fb6:	335c      	adds	r3, #92	@ 0x5c
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fce:	2b40      	cmp	r3, #64	@ 0x40
 8005fd0:	d111      	bne.n	8005ff6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	212c      	movs	r1, #44	@ 0x2c
 8005fd8:	fb01 f303 	mul.w	r3, r1, r3
 8005fdc:	4413      	add	r3, r2
 8005fde:	333d      	adds	r3, #61	@ 0x3d
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	2340      	movs	r3, #64	@ 0x40
 8005ff4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006002:	461a      	mov	r2, r3
 8006004:	2301      	movs	r3, #1
 8006006:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	212c      	movs	r1, #44	@ 0x2c
 800600e:	fb01 f303 	mul.w	r3, r1, r3
 8006012:	4413      	add	r3, r2
 8006014:	3361      	adds	r3, #97	@ 0x61
 8006016:	2201      	movs	r2, #1
 8006018:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	b2d2      	uxtb	r2, r2
 8006022:	4611      	mov	r1, r2
 8006024:	4618      	mov	r0, r3
 8006026:	f003 fba6 	bl	8009776 <USB_HC_Halt>
}
 800602a:	e28c      	b.n	8006546 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	4413      	add	r3, r2
 8006034:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800603e:	2b40      	cmp	r3, #64	@ 0x40
 8006040:	d12c      	bne.n	800609c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	212c      	movs	r1, #44	@ 0x2c
 8006048:	fb01 f303 	mul.w	r3, r1, r3
 800604c:	4413      	add	r3, r2
 800604e:	3361      	adds	r3, #97	@ 0x61
 8006050:	2204      	movs	r2, #4
 8006052:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	212c      	movs	r1, #44	@ 0x2c
 800605a:	fb01 f303 	mul.w	r3, r1, r3
 800605e:	4413      	add	r3, r2
 8006060:	333d      	adds	r3, #61	@ 0x3d
 8006062:	2201      	movs	r2, #1
 8006064:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	212c      	movs	r1, #44	@ 0x2c
 800606c:	fb01 f303 	mul.w	r3, r1, r3
 8006070:	4413      	add	r3, r2
 8006072:	335c      	adds	r3, #92	@ 0x5c
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	b2d2      	uxtb	r2, r2
 8006080:	4611      	mov	r1, r2
 8006082:	4618      	mov	r0, r3
 8006084:	f003 fb77 	bl	8009776 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	4413      	add	r3, r2
 8006090:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006094:	461a      	mov	r2, r3
 8006096:	2340      	movs	r3, #64	@ 0x40
 8006098:	6093      	str	r3, [r2, #8]
}
 800609a:	e254      	b.n	8006546 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 0308 	and.w	r3, r3, #8
 80060ae:	2b08      	cmp	r3, #8
 80060b0:	d11a      	bne.n	80060e8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060be:	461a      	mov	r2, r3
 80060c0:	2308      	movs	r3, #8
 80060c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	212c      	movs	r1, #44	@ 0x2c
 80060ca:	fb01 f303 	mul.w	r3, r1, r3
 80060ce:	4413      	add	r3, r2
 80060d0:	3361      	adds	r3, #97	@ 0x61
 80060d2:	2205      	movs	r2, #5
 80060d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	4611      	mov	r1, r2
 80060e0:	4618      	mov	r0, r3
 80060e2:	f003 fb48 	bl	8009776 <USB_HC_Halt>
}
 80060e6:	e22e      	b.n	8006546 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f003 0310 	and.w	r3, r3, #16
 80060fa:	2b10      	cmp	r3, #16
 80060fc:	d140      	bne.n	8006180 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	212c      	movs	r1, #44	@ 0x2c
 8006104:	fb01 f303 	mul.w	r3, r1, r3
 8006108:	4413      	add	r3, r2
 800610a:	335c      	adds	r3, #92	@ 0x5c
 800610c:	2200      	movs	r2, #0
 800610e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	212c      	movs	r1, #44	@ 0x2c
 8006116:	fb01 f303 	mul.w	r3, r1, r3
 800611a:	4413      	add	r3, r2
 800611c:	3361      	adds	r3, #97	@ 0x61
 800611e:	2203      	movs	r2, #3
 8006120:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	212c      	movs	r1, #44	@ 0x2c
 8006128:	fb01 f303 	mul.w	r3, r1, r3
 800612c:	4413      	add	r3, r2
 800612e:	333d      	adds	r3, #61	@ 0x3d
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d112      	bne.n	800615c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	212c      	movs	r1, #44	@ 0x2c
 800613c:	fb01 f303 	mul.w	r3, r1, r3
 8006140:	4413      	add	r3, r2
 8006142:	333c      	adds	r3, #60	@ 0x3c
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d108      	bne.n	800615c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	212c      	movs	r1, #44	@ 0x2c
 8006150:	fb01 f303 	mul.w	r3, r1, r3
 8006154:	4413      	add	r3, r2
 8006156:	333d      	adds	r3, #61	@ 0x3d
 8006158:	2201      	movs	r2, #1
 800615a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	b2d2      	uxtb	r2, r2
 8006164:	4611      	mov	r1, r2
 8006166:	4618      	mov	r0, r3
 8006168:	f003 fb05 	bl	8009776 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	4413      	add	r3, r2
 8006174:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006178:	461a      	mov	r2, r3
 800617a:	2310      	movs	r3, #16
 800617c:	6093      	str	r3, [r2, #8]
}
 800617e:	e1e2      	b.n	8006546 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	4413      	add	r3, r2
 8006188:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006192:	2b80      	cmp	r3, #128	@ 0x80
 8006194:	d164      	bne.n	8006260 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d111      	bne.n	80061c2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	212c      	movs	r1, #44	@ 0x2c
 80061a4:	fb01 f303 	mul.w	r3, r1, r3
 80061a8:	4413      	add	r3, r2
 80061aa:	3361      	adds	r3, #97	@ 0x61
 80061ac:	2206      	movs	r2, #6
 80061ae:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	4611      	mov	r1, r2
 80061ba:	4618      	mov	r0, r3
 80061bc:	f003 fadb 	bl	8009776 <USB_HC_Halt>
 80061c0:	e044      	b.n	800624c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	212c      	movs	r1, #44	@ 0x2c
 80061c8:	fb01 f303 	mul.w	r3, r1, r3
 80061cc:	4413      	add	r3, r2
 80061ce:	335c      	adds	r3, #92	@ 0x5c
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	6879      	ldr	r1, [r7, #4]
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	202c      	movs	r0, #44	@ 0x2c
 80061da:	fb00 f303 	mul.w	r3, r0, r3
 80061de:	440b      	add	r3, r1
 80061e0:	335c      	adds	r3, #92	@ 0x5c
 80061e2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	212c      	movs	r1, #44	@ 0x2c
 80061ea:	fb01 f303 	mul.w	r3, r1, r3
 80061ee:	4413      	add	r3, r2
 80061f0:	335c      	adds	r3, #92	@ 0x5c
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d920      	bls.n	800623a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	212c      	movs	r1, #44	@ 0x2c
 80061fe:	fb01 f303 	mul.w	r3, r1, r3
 8006202:	4413      	add	r3, r2
 8006204:	335c      	adds	r3, #92	@ 0x5c
 8006206:	2200      	movs	r2, #0
 8006208:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	212c      	movs	r1, #44	@ 0x2c
 8006210:	fb01 f303 	mul.w	r3, r1, r3
 8006214:	4413      	add	r3, r2
 8006216:	3360      	adds	r3, #96	@ 0x60
 8006218:	2204      	movs	r2, #4
 800621a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	b2d9      	uxtb	r1, r3
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	202c      	movs	r0, #44	@ 0x2c
 8006226:	fb00 f303 	mul.w	r3, r0, r3
 800622a:	4413      	add	r3, r2
 800622c:	3360      	adds	r3, #96	@ 0x60
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	461a      	mov	r2, r3
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f005 fd32 	bl	800bc9c <HAL_HCD_HC_NotifyURBChange_Callback>
 8006238:	e008      	b.n	800624c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	212c      	movs	r1, #44	@ 0x2c
 8006240:	fb01 f303 	mul.w	r3, r1, r3
 8006244:	4413      	add	r3, r2
 8006246:	3360      	adds	r3, #96	@ 0x60
 8006248:	2202      	movs	r2, #2
 800624a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	4413      	add	r3, r2
 8006254:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006258:	461a      	mov	r2, r3
 800625a:	2380      	movs	r3, #128	@ 0x80
 800625c:	6093      	str	r3, [r2, #8]
}
 800625e:	e172      	b.n	8006546 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	4413      	add	r3, r2
 8006268:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006276:	d11b      	bne.n	80062b0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	212c      	movs	r1, #44	@ 0x2c
 800627e:	fb01 f303 	mul.w	r3, r1, r3
 8006282:	4413      	add	r3, r2
 8006284:	3361      	adds	r3, #97	@ 0x61
 8006286:	2208      	movs	r2, #8
 8006288:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	4611      	mov	r1, r2
 8006294:	4618      	mov	r0, r3
 8006296:	f003 fa6e 	bl	8009776 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062a6:	461a      	mov	r2, r3
 80062a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062ac:	6093      	str	r3, [r2, #8]
}
 80062ae:	e14a      	b.n	8006546 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	015a      	lsls	r2, r3, #5
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	f040 813f 	bne.w	8006546 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	212c      	movs	r1, #44	@ 0x2c
 80062ce:	fb01 f303 	mul.w	r3, r1, r3
 80062d2:	4413      	add	r3, r2
 80062d4:	3361      	adds	r3, #97	@ 0x61
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d17d      	bne.n	80063d8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	212c      	movs	r1, #44	@ 0x2c
 80062e2:	fb01 f303 	mul.w	r3, r1, r3
 80062e6:	4413      	add	r3, r2
 80062e8:	3360      	adds	r3, #96	@ 0x60
 80062ea:	2201      	movs	r2, #1
 80062ec:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	212c      	movs	r1, #44	@ 0x2c
 80062f4:	fb01 f303 	mul.w	r3, r1, r3
 80062f8:	4413      	add	r3, r2
 80062fa:	333f      	adds	r3, #63	@ 0x3f
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d00a      	beq.n	8006318 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	212c      	movs	r1, #44	@ 0x2c
 8006308:	fb01 f303 	mul.w	r3, r1, r3
 800630c:	4413      	add	r3, r2
 800630e:	333f      	adds	r3, #63	@ 0x3f
 8006310:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006312:	2b03      	cmp	r3, #3
 8006314:	f040 8100 	bne.w	8006518 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d113      	bne.n	8006348 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	212c      	movs	r1, #44	@ 0x2c
 8006326:	fb01 f303 	mul.w	r3, r1, r3
 800632a:	4413      	add	r3, r2
 800632c:	3355      	adds	r3, #85	@ 0x55
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	f083 0301 	eor.w	r3, r3, #1
 8006334:	b2d8      	uxtb	r0, r3
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	212c      	movs	r1, #44	@ 0x2c
 800633c:	fb01 f303 	mul.w	r3, r1, r3
 8006340:	4413      	add	r3, r2
 8006342:	3355      	adds	r3, #85	@ 0x55
 8006344:	4602      	mov	r2, r0
 8006346:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	2b01      	cmp	r3, #1
 800634e:	f040 80e3 	bne.w	8006518 <HCD_HC_OUT_IRQHandler+0x69c>
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	212c      	movs	r1, #44	@ 0x2c
 8006358:	fb01 f303 	mul.w	r3, r1, r3
 800635c:	4413      	add	r3, r2
 800635e:	334c      	adds	r3, #76	@ 0x4c
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	f000 80d8 	beq.w	8006518 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	212c      	movs	r1, #44	@ 0x2c
 800636e:	fb01 f303 	mul.w	r3, r1, r3
 8006372:	4413      	add	r3, r2
 8006374:	334c      	adds	r3, #76	@ 0x4c
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6879      	ldr	r1, [r7, #4]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	202c      	movs	r0, #44	@ 0x2c
 800637e:	fb00 f202 	mul.w	r2, r0, r2
 8006382:	440a      	add	r2, r1
 8006384:	3240      	adds	r2, #64	@ 0x40
 8006386:	8812      	ldrh	r2, [r2, #0]
 8006388:	4413      	add	r3, r2
 800638a:	3b01      	subs	r3, #1
 800638c:	6879      	ldr	r1, [r7, #4]
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	202c      	movs	r0, #44	@ 0x2c
 8006392:	fb00 f202 	mul.w	r2, r0, r2
 8006396:	440a      	add	r2, r1
 8006398:	3240      	adds	r2, #64	@ 0x40
 800639a:	8812      	ldrh	r2, [r2, #0]
 800639c:	fbb3 f3f2 	udiv	r3, r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 80b5 	beq.w	8006518 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	212c      	movs	r1, #44	@ 0x2c
 80063b4:	fb01 f303 	mul.w	r3, r1, r3
 80063b8:	4413      	add	r3, r2
 80063ba:	3355      	adds	r3, #85	@ 0x55
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	f083 0301 	eor.w	r3, r3, #1
 80063c2:	b2d8      	uxtb	r0, r3
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	212c      	movs	r1, #44	@ 0x2c
 80063ca:	fb01 f303 	mul.w	r3, r1, r3
 80063ce:	4413      	add	r3, r2
 80063d0:	3355      	adds	r3, #85	@ 0x55
 80063d2:	4602      	mov	r2, r0
 80063d4:	701a      	strb	r2, [r3, #0]
 80063d6:	e09f      	b.n	8006518 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	212c      	movs	r1, #44	@ 0x2c
 80063de:	fb01 f303 	mul.w	r3, r1, r3
 80063e2:	4413      	add	r3, r2
 80063e4:	3361      	adds	r3, #97	@ 0x61
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	2b03      	cmp	r3, #3
 80063ea:	d109      	bne.n	8006400 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	212c      	movs	r1, #44	@ 0x2c
 80063f2:	fb01 f303 	mul.w	r3, r1, r3
 80063f6:	4413      	add	r3, r2
 80063f8:	3360      	adds	r3, #96	@ 0x60
 80063fa:	2202      	movs	r2, #2
 80063fc:	701a      	strb	r2, [r3, #0]
 80063fe:	e08b      	b.n	8006518 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	212c      	movs	r1, #44	@ 0x2c
 8006406:	fb01 f303 	mul.w	r3, r1, r3
 800640a:	4413      	add	r3, r2
 800640c:	3361      	adds	r3, #97	@ 0x61
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2b04      	cmp	r3, #4
 8006412:	d109      	bne.n	8006428 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	212c      	movs	r1, #44	@ 0x2c
 800641a:	fb01 f303 	mul.w	r3, r1, r3
 800641e:	4413      	add	r3, r2
 8006420:	3360      	adds	r3, #96	@ 0x60
 8006422:	2202      	movs	r2, #2
 8006424:	701a      	strb	r2, [r3, #0]
 8006426:	e077      	b.n	8006518 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	212c      	movs	r1, #44	@ 0x2c
 800642e:	fb01 f303 	mul.w	r3, r1, r3
 8006432:	4413      	add	r3, r2
 8006434:	3361      	adds	r3, #97	@ 0x61
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b05      	cmp	r3, #5
 800643a:	d109      	bne.n	8006450 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	212c      	movs	r1, #44	@ 0x2c
 8006442:	fb01 f303 	mul.w	r3, r1, r3
 8006446:	4413      	add	r3, r2
 8006448:	3360      	adds	r3, #96	@ 0x60
 800644a:	2205      	movs	r2, #5
 800644c:	701a      	strb	r2, [r3, #0]
 800644e:	e063      	b.n	8006518 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	212c      	movs	r1, #44	@ 0x2c
 8006456:	fb01 f303 	mul.w	r3, r1, r3
 800645a:	4413      	add	r3, r2
 800645c:	3361      	adds	r3, #97	@ 0x61
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b06      	cmp	r3, #6
 8006462:	d009      	beq.n	8006478 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	212c      	movs	r1, #44	@ 0x2c
 800646a:	fb01 f303 	mul.w	r3, r1, r3
 800646e:	4413      	add	r3, r2
 8006470:	3361      	adds	r3, #97	@ 0x61
 8006472:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006474:	2b08      	cmp	r3, #8
 8006476:	d14f      	bne.n	8006518 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	212c      	movs	r1, #44	@ 0x2c
 800647e:	fb01 f303 	mul.w	r3, r1, r3
 8006482:	4413      	add	r3, r2
 8006484:	335c      	adds	r3, #92	@ 0x5c
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	1c5a      	adds	r2, r3, #1
 800648a:	6879      	ldr	r1, [r7, #4]
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	202c      	movs	r0, #44	@ 0x2c
 8006490:	fb00 f303 	mul.w	r3, r0, r3
 8006494:	440b      	add	r3, r1
 8006496:	335c      	adds	r3, #92	@ 0x5c
 8006498:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	212c      	movs	r1, #44	@ 0x2c
 80064a0:	fb01 f303 	mul.w	r3, r1, r3
 80064a4:	4413      	add	r3, r2
 80064a6:	335c      	adds	r3, #92	@ 0x5c
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d912      	bls.n	80064d4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	212c      	movs	r1, #44	@ 0x2c
 80064b4:	fb01 f303 	mul.w	r3, r1, r3
 80064b8:	4413      	add	r3, r2
 80064ba:	335c      	adds	r3, #92	@ 0x5c
 80064bc:	2200      	movs	r2, #0
 80064be:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	212c      	movs	r1, #44	@ 0x2c
 80064c6:	fb01 f303 	mul.w	r3, r1, r3
 80064ca:	4413      	add	r3, r2
 80064cc:	3360      	adds	r3, #96	@ 0x60
 80064ce:	2204      	movs	r2, #4
 80064d0:	701a      	strb	r2, [r3, #0]
 80064d2:	e021      	b.n	8006518 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	212c      	movs	r1, #44	@ 0x2c
 80064da:	fb01 f303 	mul.w	r3, r1, r3
 80064de:	4413      	add	r3, r2
 80064e0:	3360      	adds	r3, #96	@ 0x60
 80064e2:	2202      	movs	r2, #2
 80064e4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80064fc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006504:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	4413      	add	r3, r2
 800650e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006512:	461a      	mov	r2, r3
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	4413      	add	r3, r2
 8006520:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006524:	461a      	mov	r2, r3
 8006526:	2302      	movs	r3, #2
 8006528:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	b2d9      	uxtb	r1, r3
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	202c      	movs	r0, #44	@ 0x2c
 8006534:	fb00 f303 	mul.w	r3, r0, r3
 8006538:	4413      	add	r3, r2
 800653a:	3360      	adds	r3, #96	@ 0x60
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	461a      	mov	r2, r3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f005 fbab 	bl	800bc9c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006546:	bf00      	nop
 8006548:	3720      	adds	r7, #32
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b08a      	sub	sp, #40	@ 0x28
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800655c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	f003 030f 	and.w	r3, r3, #15
 800656e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	0c5b      	lsrs	r3, r3, #17
 8006574:	f003 030f 	and.w	r3, r3, #15
 8006578:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	091b      	lsrs	r3, r3, #4
 800657e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006582:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	2b02      	cmp	r3, #2
 8006588:	d004      	beq.n	8006594 <HCD_RXQLVL_IRQHandler+0x46>
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2b05      	cmp	r3, #5
 800658e:	f000 80a9 	beq.w	80066e4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006592:	e0aa      	b.n	80066ea <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 80a6 	beq.w	80066e8 <HCD_RXQLVL_IRQHandler+0x19a>
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	212c      	movs	r1, #44	@ 0x2c
 80065a2:	fb01 f303 	mul.w	r3, r1, r3
 80065a6:	4413      	add	r3, r2
 80065a8:	3344      	adds	r3, #68	@ 0x44
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 809b 	beq.w	80066e8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	212c      	movs	r1, #44	@ 0x2c
 80065b8:	fb01 f303 	mul.w	r3, r1, r3
 80065bc:	4413      	add	r3, r2
 80065be:	3350      	adds	r3, #80	@ 0x50
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	441a      	add	r2, r3
 80065c6:	6879      	ldr	r1, [r7, #4]
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	202c      	movs	r0, #44	@ 0x2c
 80065cc:	fb00 f303 	mul.w	r3, r0, r3
 80065d0:	440b      	add	r3, r1
 80065d2:	334c      	adds	r3, #76	@ 0x4c
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d87a      	bhi.n	80066d0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6818      	ldr	r0, [r3, #0]
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	212c      	movs	r1, #44	@ 0x2c
 80065e4:	fb01 f303 	mul.w	r3, r1, r3
 80065e8:	4413      	add	r3, r2
 80065ea:	3344      	adds	r3, #68	@ 0x44
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	b292      	uxth	r2, r2
 80065f2:	4619      	mov	r1, r3
 80065f4:	f002 fc16 	bl	8008e24 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	212c      	movs	r1, #44	@ 0x2c
 80065fe:	fb01 f303 	mul.w	r3, r1, r3
 8006602:	4413      	add	r3, r2
 8006604:	3344      	adds	r3, #68	@ 0x44
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	441a      	add	r2, r3
 800660c:	6879      	ldr	r1, [r7, #4]
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	202c      	movs	r0, #44	@ 0x2c
 8006612:	fb00 f303 	mul.w	r3, r0, r3
 8006616:	440b      	add	r3, r1
 8006618:	3344      	adds	r3, #68	@ 0x44
 800661a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	212c      	movs	r1, #44	@ 0x2c
 8006622:	fb01 f303 	mul.w	r3, r1, r3
 8006626:	4413      	add	r3, r2
 8006628:	3350      	adds	r3, #80	@ 0x50
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	441a      	add	r2, r3
 8006630:	6879      	ldr	r1, [r7, #4]
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	202c      	movs	r0, #44	@ 0x2c
 8006636:	fb00 f303 	mul.w	r3, r0, r3
 800663a:	440b      	add	r3, r1
 800663c:	3350      	adds	r3, #80	@ 0x50
 800663e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	4413      	add	r3, r2
 8006648:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	0cdb      	lsrs	r3, r3, #19
 8006650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006654:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	212c      	movs	r1, #44	@ 0x2c
 800665c:	fb01 f303 	mul.w	r3, r1, r3
 8006660:	4413      	add	r3, r2
 8006662:	3340      	adds	r3, #64	@ 0x40
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	4293      	cmp	r3, r2
 800666c:	d13c      	bne.n	80066e8 <HCD_RXQLVL_IRQHandler+0x19a>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d039      	beq.n	80066e8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	4413      	add	r3, r2
 800667c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800668a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006692:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	4413      	add	r3, r2
 800669c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066a0:	461a      	mov	r2, r3
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	212c      	movs	r1, #44	@ 0x2c
 80066ac:	fb01 f303 	mul.w	r3, r1, r3
 80066b0:	4413      	add	r3, r2
 80066b2:	3354      	adds	r3, #84	@ 0x54
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	f083 0301 	eor.w	r3, r3, #1
 80066ba:	b2d8      	uxtb	r0, r3
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	212c      	movs	r1, #44	@ 0x2c
 80066c2:	fb01 f303 	mul.w	r3, r1, r3
 80066c6:	4413      	add	r3, r2
 80066c8:	3354      	adds	r3, #84	@ 0x54
 80066ca:	4602      	mov	r2, r0
 80066cc:	701a      	strb	r2, [r3, #0]
      break;
 80066ce:	e00b      	b.n	80066e8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	212c      	movs	r1, #44	@ 0x2c
 80066d6:	fb01 f303 	mul.w	r3, r1, r3
 80066da:	4413      	add	r3, r2
 80066dc:	3360      	adds	r3, #96	@ 0x60
 80066de:	2204      	movs	r2, #4
 80066e0:	701a      	strb	r2, [r3, #0]
      break;
 80066e2:	e001      	b.n	80066e8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80066e4:	bf00      	nop
 80066e6:	e000      	b.n	80066ea <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80066e8:	bf00      	nop
  }
}
 80066ea:	bf00      	nop
 80066ec:	3728      	adds	r7, #40	@ 0x28
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b086      	sub	sp, #24
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800671e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b02      	cmp	r3, #2
 8006728:	d10b      	bne.n	8006742 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b01      	cmp	r3, #1
 8006732:	d102      	bne.n	800673a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f005 fa95 	bl	800bc64 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	f043 0302 	orr.w	r3, r3, #2
 8006740:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f003 0308 	and.w	r3, r3, #8
 8006748:	2b08      	cmp	r3, #8
 800674a:	d132      	bne.n	80067b2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f043 0308 	orr.w	r3, r3, #8
 8006752:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f003 0304 	and.w	r3, r3, #4
 800675a:	2b04      	cmp	r3, #4
 800675c:	d126      	bne.n	80067ac <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	2b02      	cmp	r3, #2
 8006764:	d113      	bne.n	800678e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800676c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006770:	d106      	bne.n	8006780 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2102      	movs	r1, #2
 8006778:	4618      	mov	r0, r3
 800677a:	f002 fcc1 	bl	8009100 <USB_InitFSLSPClkSel>
 800677e:	e011      	b.n	80067a4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2101      	movs	r1, #1
 8006786:	4618      	mov	r0, r3
 8006788:	f002 fcba 	bl	8009100 <USB_InitFSLSPClkSel>
 800678c:	e00a      	b.n	80067a4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d106      	bne.n	80067a4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800679c:	461a      	mov	r2, r3
 800679e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80067a2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f005 fa87 	bl	800bcb8 <HAL_HCD_PortEnabled_Callback>
 80067aa:	e002      	b.n	80067b2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f005 fa91 	bl	800bcd4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f003 0320 	and.w	r3, r3, #32
 80067b8:	2b20      	cmp	r3, #32
 80067ba:	d103      	bne.n	80067c4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	f043 0320 	orr.w	r3, r3, #32
 80067c2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80067ca:	461a      	mov	r2, r3
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	6013      	str	r3, [r2, #0]
}
 80067d0:	bf00      	nop
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e267      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d075      	beq.n	80068e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067f6:	4b88      	ldr	r3, [pc, #544]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f003 030c 	and.w	r3, r3, #12
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d00c      	beq.n	800681c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006802:	4b85      	ldr	r3, [pc, #532]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800680a:	2b08      	cmp	r3, #8
 800680c:	d112      	bne.n	8006834 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800680e:	4b82      	ldr	r3, [pc, #520]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006816:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800681a:	d10b      	bne.n	8006834 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800681c:	4b7e      	ldr	r3, [pc, #504]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d05b      	beq.n	80068e0 <HAL_RCC_OscConfig+0x108>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d157      	bne.n	80068e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e242      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800683c:	d106      	bne.n	800684c <HAL_RCC_OscConfig+0x74>
 800683e:	4b76      	ldr	r3, [pc, #472]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a75      	ldr	r2, [pc, #468]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006848:	6013      	str	r3, [r2, #0]
 800684a:	e01d      	b.n	8006888 <HAL_RCC_OscConfig+0xb0>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006854:	d10c      	bne.n	8006870 <HAL_RCC_OscConfig+0x98>
 8006856:	4b70      	ldr	r3, [pc, #448]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a6f      	ldr	r2, [pc, #444]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 800685c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006860:	6013      	str	r3, [r2, #0]
 8006862:	4b6d      	ldr	r3, [pc, #436]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a6c      	ldr	r2, [pc, #432]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006868:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	e00b      	b.n	8006888 <HAL_RCC_OscConfig+0xb0>
 8006870:	4b69      	ldr	r3, [pc, #420]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a68      	ldr	r2, [pc, #416]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006876:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800687a:	6013      	str	r3, [r2, #0]
 800687c:	4b66      	ldr	r3, [pc, #408]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a65      	ldr	r2, [pc, #404]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006882:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d013      	beq.n	80068b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006890:	f7fd fcb2 	bl	80041f8 <HAL_GetTick>
 8006894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006896:	e008      	b.n	80068aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006898:	f7fd fcae 	bl	80041f8 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	2b64      	cmp	r3, #100	@ 0x64
 80068a4:	d901      	bls.n	80068aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e207      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068aa:	4b5b      	ldr	r3, [pc, #364]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d0f0      	beq.n	8006898 <HAL_RCC_OscConfig+0xc0>
 80068b6:	e014      	b.n	80068e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068b8:	f7fd fc9e 	bl	80041f8 <HAL_GetTick>
 80068bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068c0:	f7fd fc9a 	bl	80041f8 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b64      	cmp	r3, #100	@ 0x64
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e1f3      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068d2:	4b51      	ldr	r3, [pc, #324]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1f0      	bne.n	80068c0 <HAL_RCC_OscConfig+0xe8>
 80068de:	e000      	b.n	80068e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d063      	beq.n	80069b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068ee:	4b4a      	ldr	r3, [pc, #296]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f003 030c 	and.w	r3, r3, #12
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00b      	beq.n	8006912 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068fa:	4b47      	ldr	r3, [pc, #284]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006902:	2b08      	cmp	r3, #8
 8006904:	d11c      	bne.n	8006940 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006906:	4b44      	ldr	r3, [pc, #272]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d116      	bne.n	8006940 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006912:	4b41      	ldr	r3, [pc, #260]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d005      	beq.n	800692a <HAL_RCC_OscConfig+0x152>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d001      	beq.n	800692a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e1c7      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800692a:	4b3b      	ldr	r3, [pc, #236]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	00db      	lsls	r3, r3, #3
 8006938:	4937      	ldr	r1, [pc, #220]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 800693a:	4313      	orrs	r3, r2
 800693c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800693e:	e03a      	b.n	80069b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d020      	beq.n	800698a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006948:	4b34      	ldr	r3, [pc, #208]	@ (8006a1c <HAL_RCC_OscConfig+0x244>)
 800694a:	2201      	movs	r2, #1
 800694c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694e:	f7fd fc53 	bl	80041f8 <HAL_GetTick>
 8006952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006954:	e008      	b.n	8006968 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006956:	f7fd fc4f 	bl	80041f8 <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	2b02      	cmp	r3, #2
 8006962:	d901      	bls.n	8006968 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e1a8      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006968:	4b2b      	ldr	r3, [pc, #172]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d0f0      	beq.n	8006956 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006974:	4b28      	ldr	r3, [pc, #160]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	00db      	lsls	r3, r3, #3
 8006982:	4925      	ldr	r1, [pc, #148]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006984:	4313      	orrs	r3, r2
 8006986:	600b      	str	r3, [r1, #0]
 8006988:	e015      	b.n	80069b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800698a:	4b24      	ldr	r3, [pc, #144]	@ (8006a1c <HAL_RCC_OscConfig+0x244>)
 800698c:	2200      	movs	r2, #0
 800698e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006990:	f7fd fc32 	bl	80041f8 <HAL_GetTick>
 8006994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006996:	e008      	b.n	80069aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006998:	f7fd fc2e 	bl	80041f8 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e187      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069aa:	4b1b      	ldr	r3, [pc, #108]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1f0      	bne.n	8006998 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0308 	and.w	r3, r3, #8
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d036      	beq.n	8006a30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d016      	beq.n	80069f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069ca:	4b15      	ldr	r3, [pc, #84]	@ (8006a20 <HAL_RCC_OscConfig+0x248>)
 80069cc:	2201      	movs	r2, #1
 80069ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d0:	f7fd fc12 	bl	80041f8 <HAL_GetTick>
 80069d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069d6:	e008      	b.n	80069ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069d8:	f7fd fc0e 	bl	80041f8 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d901      	bls.n	80069ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e167      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 80069ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0f0      	beq.n	80069d8 <HAL_RCC_OscConfig+0x200>
 80069f6:	e01b      	b.n	8006a30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069f8:	4b09      	ldr	r3, [pc, #36]	@ (8006a20 <HAL_RCC_OscConfig+0x248>)
 80069fa:	2200      	movs	r2, #0
 80069fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069fe:	f7fd fbfb 	bl	80041f8 <HAL_GetTick>
 8006a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a04:	e00e      	b.n	8006a24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a06:	f7fd fbf7 	bl	80041f8 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d907      	bls.n	8006a24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e150      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
 8006a18:	40023800 	.word	0x40023800
 8006a1c:	42470000 	.word	0x42470000
 8006a20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a24:	4b88      	ldr	r3, [pc, #544]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a28:	f003 0302 	and.w	r3, r3, #2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1ea      	bne.n	8006a06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0304 	and.w	r3, r3, #4
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 8097 	beq.w	8006b6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a42:	4b81      	ldr	r3, [pc, #516]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10f      	bne.n	8006a6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60bb      	str	r3, [r7, #8]
 8006a52:	4b7d      	ldr	r3, [pc, #500]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a56:	4a7c      	ldr	r2, [pc, #496]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a5e:	4b7a      	ldr	r3, [pc, #488]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a66:	60bb      	str	r3, [r7, #8]
 8006a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a6e:	4b77      	ldr	r3, [pc, #476]	@ (8006c4c <HAL_RCC_OscConfig+0x474>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d118      	bne.n	8006aac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a7a:	4b74      	ldr	r3, [pc, #464]	@ (8006c4c <HAL_RCC_OscConfig+0x474>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a73      	ldr	r2, [pc, #460]	@ (8006c4c <HAL_RCC_OscConfig+0x474>)
 8006a80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a86:	f7fd fbb7 	bl	80041f8 <HAL_GetTick>
 8006a8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a8c:	e008      	b.n	8006aa0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a8e:	f7fd fbb3 	bl	80041f8 <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d901      	bls.n	8006aa0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e10c      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aa0:	4b6a      	ldr	r3, [pc, #424]	@ (8006c4c <HAL_RCC_OscConfig+0x474>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d0f0      	beq.n	8006a8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d106      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x2ea>
 8006ab4:	4b64      	ldr	r3, [pc, #400]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ab8:	4a63      	ldr	r2, [pc, #396]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006aba:	f043 0301 	orr.w	r3, r3, #1
 8006abe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ac0:	e01c      	b.n	8006afc <HAL_RCC_OscConfig+0x324>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	2b05      	cmp	r3, #5
 8006ac8:	d10c      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x30c>
 8006aca:	4b5f      	ldr	r3, [pc, #380]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ace:	4a5e      	ldr	r2, [pc, #376]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006ad0:	f043 0304 	orr.w	r3, r3, #4
 8006ad4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ad6:	4b5c      	ldr	r3, [pc, #368]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ada:	4a5b      	ldr	r2, [pc, #364]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006adc:	f043 0301 	orr.w	r3, r3, #1
 8006ae0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ae2:	e00b      	b.n	8006afc <HAL_RCC_OscConfig+0x324>
 8006ae4:	4b58      	ldr	r3, [pc, #352]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ae8:	4a57      	ldr	r2, [pc, #348]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006aea:	f023 0301 	bic.w	r3, r3, #1
 8006aee:	6713      	str	r3, [r2, #112]	@ 0x70
 8006af0:	4b55      	ldr	r3, [pc, #340]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006af4:	4a54      	ldr	r2, [pc, #336]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006af6:	f023 0304 	bic.w	r3, r3, #4
 8006afa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d015      	beq.n	8006b30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b04:	f7fd fb78 	bl	80041f8 <HAL_GetTick>
 8006b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b0a:	e00a      	b.n	8006b22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b0c:	f7fd fb74 	bl	80041f8 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d901      	bls.n	8006b22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e0cb      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b22:	4b49      	ldr	r3, [pc, #292]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b26:	f003 0302 	and.w	r3, r3, #2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0ee      	beq.n	8006b0c <HAL_RCC_OscConfig+0x334>
 8006b2e:	e014      	b.n	8006b5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b30:	f7fd fb62 	bl	80041f8 <HAL_GetTick>
 8006b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b36:	e00a      	b.n	8006b4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b38:	f7fd fb5e 	bl	80041f8 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e0b5      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1ee      	bne.n	8006b38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b5a:	7dfb      	ldrb	r3, [r7, #23]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d105      	bne.n	8006b6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b60:	4b39      	ldr	r3, [pc, #228]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b64:	4a38      	ldr	r2, [pc, #224]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006b66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f000 80a1 	beq.w	8006cb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b76:	4b34      	ldr	r3, [pc, #208]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f003 030c 	and.w	r3, r3, #12
 8006b7e:	2b08      	cmp	r3, #8
 8006b80:	d05c      	beq.n	8006c3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d141      	bne.n	8006c0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b8a:	4b31      	ldr	r3, [pc, #196]	@ (8006c50 <HAL_RCC_OscConfig+0x478>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b90:	f7fd fb32 	bl	80041f8 <HAL_GetTick>
 8006b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b96:	e008      	b.n	8006baa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b98:	f7fd fb2e 	bl	80041f8 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d901      	bls.n	8006baa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e087      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006baa:	4b27      	ldr	r3, [pc, #156]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1f0      	bne.n	8006b98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	69da      	ldr	r2, [r3, #28]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc4:	019b      	lsls	r3, r3, #6
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bcc:	085b      	lsrs	r3, r3, #1
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	041b      	lsls	r3, r3, #16
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd8:	061b      	lsls	r3, r3, #24
 8006bda:	491b      	ldr	r1, [pc, #108]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006be0:	4b1b      	ldr	r3, [pc, #108]	@ (8006c50 <HAL_RCC_OscConfig+0x478>)
 8006be2:	2201      	movs	r2, #1
 8006be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006be6:	f7fd fb07 	bl	80041f8 <HAL_GetTick>
 8006bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bec:	e008      	b.n	8006c00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bee:	f7fd fb03 	bl	80041f8 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d901      	bls.n	8006c00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e05c      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c00:	4b11      	ldr	r3, [pc, #68]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d0f0      	beq.n	8006bee <HAL_RCC_OscConfig+0x416>
 8006c0c:	e054      	b.n	8006cb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c0e:	4b10      	ldr	r3, [pc, #64]	@ (8006c50 <HAL_RCC_OscConfig+0x478>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c14:	f7fd faf0 	bl	80041f8 <HAL_GetTick>
 8006c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c1a:	e008      	b.n	8006c2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c1c:	f7fd faec 	bl	80041f8 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e045      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c2e:	4b06      	ldr	r3, [pc, #24]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1f0      	bne.n	8006c1c <HAL_RCC_OscConfig+0x444>
 8006c3a:	e03d      	b.n	8006cb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d107      	bne.n	8006c54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e038      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
 8006c48:	40023800 	.word	0x40023800
 8006c4c:	40007000 	.word	0x40007000
 8006c50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c54:	4b1b      	ldr	r3, [pc, #108]	@ (8006cc4 <HAL_RCC_OscConfig+0x4ec>)
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d028      	beq.n	8006cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d121      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d11a      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006c84:	4013      	ands	r3, r2
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006c8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d111      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c9a:	085b      	lsrs	r3, r3, #1
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d107      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d001      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e000      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3718      	adds	r7, #24
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	40023800 	.word	0x40023800

08006cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e0cc      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006cdc:	4b68      	ldr	r3, [pc, #416]	@ (8006e80 <HAL_RCC_ClockConfig+0x1b8>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 030f 	and.w	r3, r3, #15
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d90c      	bls.n	8006d04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cea:	4b65      	ldr	r3, [pc, #404]	@ (8006e80 <HAL_RCC_ClockConfig+0x1b8>)
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	b2d2      	uxtb	r2, r2
 8006cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cf2:	4b63      	ldr	r3, [pc, #396]	@ (8006e80 <HAL_RCC_ClockConfig+0x1b8>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 030f 	and.w	r3, r3, #15
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d001      	beq.n	8006d04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e0b8      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d020      	beq.n	8006d52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d005      	beq.n	8006d28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d1c:	4b59      	ldr	r3, [pc, #356]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	4a58      	ldr	r2, [pc, #352]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006d26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0308 	and.w	r3, r3, #8
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d005      	beq.n	8006d40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d34:	4b53      	ldr	r3, [pc, #332]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	4a52      	ldr	r2, [pc, #328]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006d3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d40:	4b50      	ldr	r3, [pc, #320]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	494d      	ldr	r1, [pc, #308]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d044      	beq.n	8006de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d107      	bne.n	8006d76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d66:	4b47      	ldr	r3, [pc, #284]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d119      	bne.n	8006da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e07f      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d003      	beq.n	8006d86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	d107      	bne.n	8006d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d86:	4b3f      	ldr	r3, [pc, #252]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d109      	bne.n	8006da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e06f      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d96:	4b3b      	ldr	r3, [pc, #236]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e067      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006da6:	4b37      	ldr	r3, [pc, #220]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f023 0203 	bic.w	r2, r3, #3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	4934      	ldr	r1, [pc, #208]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006db8:	f7fd fa1e 	bl	80041f8 <HAL_GetTick>
 8006dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dbe:	e00a      	b.n	8006dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dc0:	f7fd fa1a 	bl	80041f8 <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d901      	bls.n	8006dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e04f      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dd6:	4b2b      	ldr	r3, [pc, #172]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f003 020c 	and.w	r2, r3, #12
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d1eb      	bne.n	8006dc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006de8:	4b25      	ldr	r3, [pc, #148]	@ (8006e80 <HAL_RCC_ClockConfig+0x1b8>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 030f 	and.w	r3, r3, #15
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d20c      	bcs.n	8006e10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006df6:	4b22      	ldr	r3, [pc, #136]	@ (8006e80 <HAL_RCC_ClockConfig+0x1b8>)
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	b2d2      	uxtb	r2, r2
 8006dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dfe:	4b20      	ldr	r3, [pc, #128]	@ (8006e80 <HAL_RCC_ClockConfig+0x1b8>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 030f 	and.w	r3, r3, #15
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d001      	beq.n	8006e10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e032      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0304 	and.w	r3, r3, #4
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d008      	beq.n	8006e2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e1c:	4b19      	ldr	r3, [pc, #100]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	4916      	ldr	r1, [pc, #88]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0308 	and.w	r3, r3, #8
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d009      	beq.n	8006e4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e3a:	4b12      	ldr	r3, [pc, #72]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	00db      	lsls	r3, r3, #3
 8006e48:	490e      	ldr	r1, [pc, #56]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e4e:	f000 f821 	bl	8006e94 <HAL_RCC_GetSysClockFreq>
 8006e52:	4602      	mov	r2, r0
 8006e54:	4b0b      	ldr	r3, [pc, #44]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	091b      	lsrs	r3, r3, #4
 8006e5a:	f003 030f 	and.w	r3, r3, #15
 8006e5e:	490a      	ldr	r1, [pc, #40]	@ (8006e88 <HAL_RCC_ClockConfig+0x1c0>)
 8006e60:	5ccb      	ldrb	r3, [r1, r3]
 8006e62:	fa22 f303 	lsr.w	r3, r2, r3
 8006e66:	4a09      	ldr	r2, [pc, #36]	@ (8006e8c <HAL_RCC_ClockConfig+0x1c4>)
 8006e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e6a:	4b09      	ldr	r3, [pc, #36]	@ (8006e90 <HAL_RCC_ClockConfig+0x1c8>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fd f97e 	bl	8004170 <HAL_InitTick>

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	40023c00 	.word	0x40023c00
 8006e84:	40023800 	.word	0x40023800
 8006e88:	08012890 	.word	0x08012890
 8006e8c:	20000004 	.word	0x20000004
 8006e90:	20000008 	.word	0x20000008

08006e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e98:	b094      	sub	sp, #80	@ 0x50
 8006e9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006eac:	4b79      	ldr	r3, [pc, #484]	@ (8007094 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f003 030c 	and.w	r3, r3, #12
 8006eb4:	2b08      	cmp	r3, #8
 8006eb6:	d00d      	beq.n	8006ed4 <HAL_RCC_GetSysClockFreq+0x40>
 8006eb8:	2b08      	cmp	r3, #8
 8006eba:	f200 80e1 	bhi.w	8007080 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d002      	beq.n	8006ec8 <HAL_RCC_GetSysClockFreq+0x34>
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	d003      	beq.n	8006ece <HAL_RCC_GetSysClockFreq+0x3a>
 8006ec6:	e0db      	b.n	8007080 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ec8:	4b73      	ldr	r3, [pc, #460]	@ (8007098 <HAL_RCC_GetSysClockFreq+0x204>)
 8006eca:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006ecc:	e0db      	b.n	8007086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ece:	4b73      	ldr	r3, [pc, #460]	@ (800709c <HAL_RCC_GetSysClockFreq+0x208>)
 8006ed0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ed2:	e0d8      	b.n	8007086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ed4:	4b6f      	ldr	r3, [pc, #444]	@ (8007094 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006edc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ede:	4b6d      	ldr	r3, [pc, #436]	@ (8007094 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d063      	beq.n	8006fb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006eea:	4b6a      	ldr	r3, [pc, #424]	@ (8007094 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	099b      	lsrs	r3, r3, #6
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ef4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006efc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006efe:	2300      	movs	r3, #0
 8006f00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006f06:	4622      	mov	r2, r4
 8006f08:	462b      	mov	r3, r5
 8006f0a:	f04f 0000 	mov.w	r0, #0
 8006f0e:	f04f 0100 	mov.w	r1, #0
 8006f12:	0159      	lsls	r1, r3, #5
 8006f14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f18:	0150      	lsls	r0, r2, #5
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	4621      	mov	r1, r4
 8006f20:	1a51      	subs	r1, r2, r1
 8006f22:	6139      	str	r1, [r7, #16]
 8006f24:	4629      	mov	r1, r5
 8006f26:	eb63 0301 	sbc.w	r3, r3, r1
 8006f2a:	617b      	str	r3, [r7, #20]
 8006f2c:	f04f 0200 	mov.w	r2, #0
 8006f30:	f04f 0300 	mov.w	r3, #0
 8006f34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f38:	4659      	mov	r1, fp
 8006f3a:	018b      	lsls	r3, r1, #6
 8006f3c:	4651      	mov	r1, sl
 8006f3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f42:	4651      	mov	r1, sl
 8006f44:	018a      	lsls	r2, r1, #6
 8006f46:	4651      	mov	r1, sl
 8006f48:	ebb2 0801 	subs.w	r8, r2, r1
 8006f4c:	4659      	mov	r1, fp
 8006f4e:	eb63 0901 	sbc.w	r9, r3, r1
 8006f52:	f04f 0200 	mov.w	r2, #0
 8006f56:	f04f 0300 	mov.w	r3, #0
 8006f5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f66:	4690      	mov	r8, r2
 8006f68:	4699      	mov	r9, r3
 8006f6a:	4623      	mov	r3, r4
 8006f6c:	eb18 0303 	adds.w	r3, r8, r3
 8006f70:	60bb      	str	r3, [r7, #8]
 8006f72:	462b      	mov	r3, r5
 8006f74:	eb49 0303 	adc.w	r3, r9, r3
 8006f78:	60fb      	str	r3, [r7, #12]
 8006f7a:	f04f 0200 	mov.w	r2, #0
 8006f7e:	f04f 0300 	mov.w	r3, #0
 8006f82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f86:	4629      	mov	r1, r5
 8006f88:	024b      	lsls	r3, r1, #9
 8006f8a:	4621      	mov	r1, r4
 8006f8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f90:	4621      	mov	r1, r4
 8006f92:	024a      	lsls	r2, r1, #9
 8006f94:	4610      	mov	r0, r2
 8006f96:	4619      	mov	r1, r3
 8006f98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fa0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006fa4:	f7f9 fe90 	bl	8000cc8 <__aeabi_uldivmod>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	4613      	mov	r3, r2
 8006fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fb0:	e058      	b.n	8007064 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fb2:	4b38      	ldr	r3, [pc, #224]	@ (8007094 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	099b      	lsrs	r3, r3, #6
 8006fb8:	2200      	movs	r2, #0
 8006fba:	4618      	mov	r0, r3
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006fc2:	623b      	str	r3, [r7, #32]
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006fcc:	4642      	mov	r2, r8
 8006fce:	464b      	mov	r3, r9
 8006fd0:	f04f 0000 	mov.w	r0, #0
 8006fd4:	f04f 0100 	mov.w	r1, #0
 8006fd8:	0159      	lsls	r1, r3, #5
 8006fda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fde:	0150      	lsls	r0, r2, #5
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	4641      	mov	r1, r8
 8006fe6:	ebb2 0a01 	subs.w	sl, r2, r1
 8006fea:	4649      	mov	r1, r9
 8006fec:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ff0:	f04f 0200 	mov.w	r2, #0
 8006ff4:	f04f 0300 	mov.w	r3, #0
 8006ff8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006ffc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007000:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007004:	ebb2 040a 	subs.w	r4, r2, sl
 8007008:	eb63 050b 	sbc.w	r5, r3, fp
 800700c:	f04f 0200 	mov.w	r2, #0
 8007010:	f04f 0300 	mov.w	r3, #0
 8007014:	00eb      	lsls	r3, r5, #3
 8007016:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800701a:	00e2      	lsls	r2, r4, #3
 800701c:	4614      	mov	r4, r2
 800701e:	461d      	mov	r5, r3
 8007020:	4643      	mov	r3, r8
 8007022:	18e3      	adds	r3, r4, r3
 8007024:	603b      	str	r3, [r7, #0]
 8007026:	464b      	mov	r3, r9
 8007028:	eb45 0303 	adc.w	r3, r5, r3
 800702c:	607b      	str	r3, [r7, #4]
 800702e:	f04f 0200 	mov.w	r2, #0
 8007032:	f04f 0300 	mov.w	r3, #0
 8007036:	e9d7 4500 	ldrd	r4, r5, [r7]
 800703a:	4629      	mov	r1, r5
 800703c:	028b      	lsls	r3, r1, #10
 800703e:	4621      	mov	r1, r4
 8007040:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007044:	4621      	mov	r1, r4
 8007046:	028a      	lsls	r2, r1, #10
 8007048:	4610      	mov	r0, r2
 800704a:	4619      	mov	r1, r3
 800704c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800704e:	2200      	movs	r2, #0
 8007050:	61bb      	str	r3, [r7, #24]
 8007052:	61fa      	str	r2, [r7, #28]
 8007054:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007058:	f7f9 fe36 	bl	8000cc8 <__aeabi_uldivmod>
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	4613      	mov	r3, r2
 8007062:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007064:	4b0b      	ldr	r3, [pc, #44]	@ (8007094 <HAL_RCC_GetSysClockFreq+0x200>)
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	0c1b      	lsrs	r3, r3, #16
 800706a:	f003 0303 	and.w	r3, r3, #3
 800706e:	3301      	adds	r3, #1
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007074:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007078:	fbb2 f3f3 	udiv	r3, r2, r3
 800707c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800707e:	e002      	b.n	8007086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007080:	4b05      	ldr	r3, [pc, #20]	@ (8007098 <HAL_RCC_GetSysClockFreq+0x204>)
 8007082:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007084:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007088:	4618      	mov	r0, r3
 800708a:	3750      	adds	r7, #80	@ 0x50
 800708c:	46bd      	mov	sp, r7
 800708e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007092:	bf00      	nop
 8007094:	40023800 	.word	0x40023800
 8007098:	00f42400 	.word	0x00f42400
 800709c:	007a1200 	.word	0x007a1200

080070a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070a0:	b480      	push	{r7}
 80070a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070a4:	4b03      	ldr	r3, [pc, #12]	@ (80070b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80070a6:	681b      	ldr	r3, [r3, #0]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	20000004 	.word	0x20000004

080070b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070bc:	f7ff fff0 	bl	80070a0 <HAL_RCC_GetHCLKFreq>
 80070c0:	4602      	mov	r2, r0
 80070c2:	4b05      	ldr	r3, [pc, #20]	@ (80070d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	0a9b      	lsrs	r3, r3, #10
 80070c8:	f003 0307 	and.w	r3, r3, #7
 80070cc:	4903      	ldr	r1, [pc, #12]	@ (80070dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80070ce:	5ccb      	ldrb	r3, [r1, r3]
 80070d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	40023800 	.word	0x40023800
 80070dc:	080128a0 	.word	0x080128a0

080070e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80070e4:	f7ff ffdc 	bl	80070a0 <HAL_RCC_GetHCLKFreq>
 80070e8:	4602      	mov	r2, r0
 80070ea:	4b05      	ldr	r3, [pc, #20]	@ (8007100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	0b5b      	lsrs	r3, r3, #13
 80070f0:	f003 0307 	and.w	r3, r3, #7
 80070f4:	4903      	ldr	r1, [pc, #12]	@ (8007104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070f6:	5ccb      	ldrb	r3, [r1, r3]
 80070f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	40023800 	.word	0x40023800
 8007104:	080128a0 	.word	0x080128a0

08007108 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e01c      	b.n	8007154 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	795b      	ldrb	r3, [r3, #5]
 800711e:	b2db      	uxtb	r3, r3
 8007120:	2b00      	cmp	r3, #0
 8007122:	d105      	bne.n	8007130 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7fc fdd0 	bl	8003cd0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2202      	movs	r2, #2
 8007134:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f042 0204 	orr.w	r2, r2, #4
 8007144:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2201      	movs	r2, #1
 800714a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e041      	b.n	80071f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d106      	bne.n	8007188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7fc fdc6 	bl	8003d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2202      	movs	r2, #2
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	3304      	adds	r3, #4
 8007198:	4619      	mov	r1, r3
 800719a:	4610      	mov	r0, r2
 800719c:	f000 f95e 	bl	800745c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
	...

080071fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b01      	cmp	r3, #1
 800720e:	d001      	beq.n	8007214 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e046      	b.n	80072a2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2202      	movs	r2, #2
 8007218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a23      	ldr	r2, [pc, #140]	@ (80072b0 <HAL_TIM_Base_Start+0xb4>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d022      	beq.n	800726c <HAL_TIM_Base_Start+0x70>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800722e:	d01d      	beq.n	800726c <HAL_TIM_Base_Start+0x70>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a1f      	ldr	r2, [pc, #124]	@ (80072b4 <HAL_TIM_Base_Start+0xb8>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d018      	beq.n	800726c <HAL_TIM_Base_Start+0x70>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a1e      	ldr	r2, [pc, #120]	@ (80072b8 <HAL_TIM_Base_Start+0xbc>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d013      	beq.n	800726c <HAL_TIM_Base_Start+0x70>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a1c      	ldr	r2, [pc, #112]	@ (80072bc <HAL_TIM_Base_Start+0xc0>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d00e      	beq.n	800726c <HAL_TIM_Base_Start+0x70>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a1b      	ldr	r2, [pc, #108]	@ (80072c0 <HAL_TIM_Base_Start+0xc4>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d009      	beq.n	800726c <HAL_TIM_Base_Start+0x70>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a19      	ldr	r2, [pc, #100]	@ (80072c4 <HAL_TIM_Base_Start+0xc8>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d004      	beq.n	800726c <HAL_TIM_Base_Start+0x70>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a18      	ldr	r2, [pc, #96]	@ (80072c8 <HAL_TIM_Base_Start+0xcc>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d111      	bne.n	8007290 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f003 0307 	and.w	r3, r3, #7
 8007276:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2b06      	cmp	r3, #6
 800727c:	d010      	beq.n	80072a0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f042 0201 	orr.w	r2, r2, #1
 800728c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800728e:	e007      	b.n	80072a0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f042 0201 	orr.w	r2, r2, #1
 800729e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	40010000 	.word	0x40010000
 80072b4:	40000400 	.word	0x40000400
 80072b8:	40000800 	.word	0x40000800
 80072bc:	40000c00 	.word	0x40000c00
 80072c0:	40010400 	.word	0x40010400
 80072c4:	40014000 	.word	0x40014000
 80072c8:	40001800 	.word	0x40001800

080072cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d101      	bne.n	80072e8 <HAL_TIM_ConfigClockSource+0x1c>
 80072e4:	2302      	movs	r3, #2
 80072e6:	e0b4      	b.n	8007452 <HAL_TIM_ConfigClockSource+0x186>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007306:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800730e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007320:	d03e      	beq.n	80073a0 <HAL_TIM_ConfigClockSource+0xd4>
 8007322:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007326:	f200 8087 	bhi.w	8007438 <HAL_TIM_ConfigClockSource+0x16c>
 800732a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800732e:	f000 8086 	beq.w	800743e <HAL_TIM_ConfigClockSource+0x172>
 8007332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007336:	d87f      	bhi.n	8007438 <HAL_TIM_ConfigClockSource+0x16c>
 8007338:	2b70      	cmp	r3, #112	@ 0x70
 800733a:	d01a      	beq.n	8007372 <HAL_TIM_ConfigClockSource+0xa6>
 800733c:	2b70      	cmp	r3, #112	@ 0x70
 800733e:	d87b      	bhi.n	8007438 <HAL_TIM_ConfigClockSource+0x16c>
 8007340:	2b60      	cmp	r3, #96	@ 0x60
 8007342:	d050      	beq.n	80073e6 <HAL_TIM_ConfigClockSource+0x11a>
 8007344:	2b60      	cmp	r3, #96	@ 0x60
 8007346:	d877      	bhi.n	8007438 <HAL_TIM_ConfigClockSource+0x16c>
 8007348:	2b50      	cmp	r3, #80	@ 0x50
 800734a:	d03c      	beq.n	80073c6 <HAL_TIM_ConfigClockSource+0xfa>
 800734c:	2b50      	cmp	r3, #80	@ 0x50
 800734e:	d873      	bhi.n	8007438 <HAL_TIM_ConfigClockSource+0x16c>
 8007350:	2b40      	cmp	r3, #64	@ 0x40
 8007352:	d058      	beq.n	8007406 <HAL_TIM_ConfigClockSource+0x13a>
 8007354:	2b40      	cmp	r3, #64	@ 0x40
 8007356:	d86f      	bhi.n	8007438 <HAL_TIM_ConfigClockSource+0x16c>
 8007358:	2b30      	cmp	r3, #48	@ 0x30
 800735a:	d064      	beq.n	8007426 <HAL_TIM_ConfigClockSource+0x15a>
 800735c:	2b30      	cmp	r3, #48	@ 0x30
 800735e:	d86b      	bhi.n	8007438 <HAL_TIM_ConfigClockSource+0x16c>
 8007360:	2b20      	cmp	r3, #32
 8007362:	d060      	beq.n	8007426 <HAL_TIM_ConfigClockSource+0x15a>
 8007364:	2b20      	cmp	r3, #32
 8007366:	d867      	bhi.n	8007438 <HAL_TIM_ConfigClockSource+0x16c>
 8007368:	2b00      	cmp	r3, #0
 800736a:	d05c      	beq.n	8007426 <HAL_TIM_ConfigClockSource+0x15a>
 800736c:	2b10      	cmp	r3, #16
 800736e:	d05a      	beq.n	8007426 <HAL_TIM_ConfigClockSource+0x15a>
 8007370:	e062      	b.n	8007438 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6818      	ldr	r0, [r3, #0]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	6899      	ldr	r1, [r3, #8]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	f000 f985 	bl	8007690 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007394:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	609a      	str	r2, [r3, #8]
      break;
 800739e:	e04f      	b.n	8007440 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6818      	ldr	r0, [r3, #0]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	6899      	ldr	r1, [r3, #8]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	685a      	ldr	r2, [r3, #4]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	f000 f96e 	bl	8007690 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	689a      	ldr	r2, [r3, #8]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80073c2:	609a      	str	r2, [r3, #8]
      break;
 80073c4:	e03c      	b.n	8007440 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6818      	ldr	r0, [r3, #0]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	6859      	ldr	r1, [r3, #4]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	461a      	mov	r2, r3
 80073d4:	f000 f8e2 	bl	800759c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2150      	movs	r1, #80	@ 0x50
 80073de:	4618      	mov	r0, r3
 80073e0:	f000 f93b 	bl	800765a <TIM_ITRx_SetConfig>
      break;
 80073e4:	e02c      	b.n	8007440 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6818      	ldr	r0, [r3, #0]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	6859      	ldr	r1, [r3, #4]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	461a      	mov	r2, r3
 80073f4:	f000 f901 	bl	80075fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2160      	movs	r1, #96	@ 0x60
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 f92b 	bl	800765a <TIM_ITRx_SetConfig>
      break;
 8007404:	e01c      	b.n	8007440 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6818      	ldr	r0, [r3, #0]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	6859      	ldr	r1, [r3, #4]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	461a      	mov	r2, r3
 8007414:	f000 f8c2 	bl	800759c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2140      	movs	r1, #64	@ 0x40
 800741e:	4618      	mov	r0, r3
 8007420:	f000 f91b 	bl	800765a <TIM_ITRx_SetConfig>
      break;
 8007424:	e00c      	b.n	8007440 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4619      	mov	r1, r3
 8007430:	4610      	mov	r0, r2
 8007432:	f000 f912 	bl	800765a <TIM_ITRx_SetConfig>
      break;
 8007436:	e003      	b.n	8007440 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	73fb      	strb	r3, [r7, #15]
      break;
 800743c:	e000      	b.n	8007440 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800743e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007450:	7bfb      	ldrb	r3, [r7, #15]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
	...

0800745c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a40      	ldr	r2, [pc, #256]	@ (8007570 <TIM_Base_SetConfig+0x114>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d013      	beq.n	800749c <TIM_Base_SetConfig+0x40>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800747a:	d00f      	beq.n	800749c <TIM_Base_SetConfig+0x40>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a3d      	ldr	r2, [pc, #244]	@ (8007574 <TIM_Base_SetConfig+0x118>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d00b      	beq.n	800749c <TIM_Base_SetConfig+0x40>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a3c      	ldr	r2, [pc, #240]	@ (8007578 <TIM_Base_SetConfig+0x11c>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d007      	beq.n	800749c <TIM_Base_SetConfig+0x40>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a3b      	ldr	r2, [pc, #236]	@ (800757c <TIM_Base_SetConfig+0x120>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d003      	beq.n	800749c <TIM_Base_SetConfig+0x40>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a3a      	ldr	r2, [pc, #232]	@ (8007580 <TIM_Base_SetConfig+0x124>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d108      	bne.n	80074ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a2f      	ldr	r2, [pc, #188]	@ (8007570 <TIM_Base_SetConfig+0x114>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d02b      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074bc:	d027      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a2c      	ldr	r2, [pc, #176]	@ (8007574 <TIM_Base_SetConfig+0x118>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d023      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a2b      	ldr	r2, [pc, #172]	@ (8007578 <TIM_Base_SetConfig+0x11c>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d01f      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a2a      	ldr	r2, [pc, #168]	@ (800757c <TIM_Base_SetConfig+0x120>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d01b      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a29      	ldr	r2, [pc, #164]	@ (8007580 <TIM_Base_SetConfig+0x124>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d017      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a28      	ldr	r2, [pc, #160]	@ (8007584 <TIM_Base_SetConfig+0x128>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d013      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a27      	ldr	r2, [pc, #156]	@ (8007588 <TIM_Base_SetConfig+0x12c>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d00f      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a26      	ldr	r2, [pc, #152]	@ (800758c <TIM_Base_SetConfig+0x130>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d00b      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a25      	ldr	r2, [pc, #148]	@ (8007590 <TIM_Base_SetConfig+0x134>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d007      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a24      	ldr	r2, [pc, #144]	@ (8007594 <TIM_Base_SetConfig+0x138>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d003      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a23      	ldr	r2, [pc, #140]	@ (8007598 <TIM_Base_SetConfig+0x13c>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d108      	bne.n	8007520 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	4313      	orrs	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	689a      	ldr	r2, [r3, #8]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a0a      	ldr	r2, [pc, #40]	@ (8007570 <TIM_Base_SetConfig+0x114>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d003      	beq.n	8007554 <TIM_Base_SetConfig+0xf8>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a0c      	ldr	r2, [pc, #48]	@ (8007580 <TIM_Base_SetConfig+0x124>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d103      	bne.n	800755c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	691a      	ldr	r2, [r3, #16]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	615a      	str	r2, [r3, #20]
}
 8007562:	bf00      	nop
 8007564:	3714      	adds	r7, #20
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	40010000 	.word	0x40010000
 8007574:	40000400 	.word	0x40000400
 8007578:	40000800 	.word	0x40000800
 800757c:	40000c00 	.word	0x40000c00
 8007580:	40010400 	.word	0x40010400
 8007584:	40014000 	.word	0x40014000
 8007588:	40014400 	.word	0x40014400
 800758c:	40014800 	.word	0x40014800
 8007590:	40001800 	.word	0x40001800
 8007594:	40001c00 	.word	0x40001c00
 8007598:	40002000 	.word	0x40002000

0800759c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800759c:	b480      	push	{r7}
 800759e:	b087      	sub	sp, #28
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6a1b      	ldr	r3, [r3, #32]
 80075ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	f023 0201 	bic.w	r2, r3, #1
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	011b      	lsls	r3, r3, #4
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	f023 030a 	bic.w	r3, r3, #10
 80075d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	4313      	orrs	r3, r2
 80075e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	693a      	ldr	r2, [r7, #16]
 80075e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	621a      	str	r2, [r3, #32]
}
 80075ee:	bf00      	nop
 80075f0:	371c      	adds	r7, #28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b087      	sub	sp, #28
 80075fe:	af00      	add	r7, sp, #0
 8007600:	60f8      	str	r0, [r7, #12]
 8007602:	60b9      	str	r1, [r7, #8]
 8007604:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	f023 0210 	bic.w	r2, r3, #16
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007624:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	031b      	lsls	r3, r3, #12
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	4313      	orrs	r3, r2
 800762e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007636:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	011b      	lsls	r3, r3, #4
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	4313      	orrs	r3, r2
 8007640:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	693a      	ldr	r2, [r7, #16]
 800764c:	621a      	str	r2, [r3, #32]
}
 800764e:	bf00      	nop
 8007650:	371c      	adds	r7, #28
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800765a:	b480      	push	{r7}
 800765c:	b085      	sub	sp, #20
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007670:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007672:	683a      	ldr	r2, [r7, #0]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	4313      	orrs	r3, r2
 8007678:	f043 0307 	orr.w	r3, r3, #7
 800767c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	609a      	str	r2, [r3, #8]
}
 8007684:	bf00      	nop
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007690:	b480      	push	{r7}
 8007692:	b087      	sub	sp, #28
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
 800769c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80076aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	021a      	lsls	r2, r3, #8
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	431a      	orrs	r2, r3
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	697a      	ldr	r2, [r7, #20]
 80076c2:	609a      	str	r2, [r3, #8]
}
 80076c4:	bf00      	nop
 80076c6:	371c      	adds	r7, #28
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d101      	bne.n	80076e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076e4:	2302      	movs	r3, #2
 80076e6:	e05a      	b.n	800779e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2202      	movs	r2, #2
 80076f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800770e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	4313      	orrs	r3, r2
 8007718:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a21      	ldr	r2, [pc, #132]	@ (80077ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d022      	beq.n	8007772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007734:	d01d      	beq.n	8007772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a1d      	ldr	r2, [pc, #116]	@ (80077b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d018      	beq.n	8007772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a1b      	ldr	r2, [pc, #108]	@ (80077b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d013      	beq.n	8007772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a1a      	ldr	r2, [pc, #104]	@ (80077b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d00e      	beq.n	8007772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a18      	ldr	r2, [pc, #96]	@ (80077bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d009      	beq.n	8007772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a17      	ldr	r2, [pc, #92]	@ (80077c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d004      	beq.n	8007772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a15      	ldr	r2, [pc, #84]	@ (80077c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d10c      	bne.n	800778c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007778:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	4313      	orrs	r3, r2
 8007782:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	40010000 	.word	0x40010000
 80077b0:	40000400 	.word	0x40000400
 80077b4:	40000800 	.word	0x40000800
 80077b8:	40000c00 	.word	0x40000c00
 80077bc:	40010400 	.word	0x40010400
 80077c0:	40014000 	.word	0x40014000
 80077c4:	40001800 	.word	0x40001800

080077c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d101      	bne.n	80077da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e03f      	b.n	800785a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d106      	bne.n	80077f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7fc fab0 	bl	8003d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2224      	movs	r2, #36	@ 0x24
 80077f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68da      	ldr	r2, [r3, #12]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800780a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 ff23 	bl	8008658 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	691a      	ldr	r2, [r3, #16]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007820:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	695a      	ldr	r2, [r3, #20]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007830:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68da      	ldr	r2, [r3, #12]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007840:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2220      	movs	r2, #32
 800784c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2220      	movs	r2, #32
 8007854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b08a      	sub	sp, #40	@ 0x28
 8007866:	af02      	add	r7, sp, #8
 8007868:	60f8      	str	r0, [r7, #12]
 800786a:	60b9      	str	r1, [r7, #8]
 800786c:	603b      	str	r3, [r7, #0]
 800786e:	4613      	mov	r3, r2
 8007870:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007872:	2300      	movs	r3, #0
 8007874:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b20      	cmp	r3, #32
 8007880:	d17c      	bne.n	800797c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d002      	beq.n	800788e <HAL_UART_Transmit+0x2c>
 8007888:	88fb      	ldrh	r3, [r7, #6]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d101      	bne.n	8007892 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e075      	b.n	800797e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007898:	2b01      	cmp	r3, #1
 800789a:	d101      	bne.n	80078a0 <HAL_UART_Transmit+0x3e>
 800789c:	2302      	movs	r3, #2
 800789e:	e06e      	b.n	800797e <HAL_UART_Transmit+0x11c>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2221      	movs	r2, #33	@ 0x21
 80078b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078b6:	f7fc fc9f 	bl	80041f8 <HAL_GetTick>
 80078ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	88fa      	ldrh	r2, [r7, #6]
 80078c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	88fa      	ldrh	r2, [r7, #6]
 80078c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078d0:	d108      	bne.n	80078e4 <HAL_UART_Transmit+0x82>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d104      	bne.n	80078e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80078da:	2300      	movs	r3, #0
 80078dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	61bb      	str	r3, [r7, #24]
 80078e2:	e003      	b.n	80078ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078e8:	2300      	movs	r3, #0
 80078ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80078f4:	e02a      	b.n	800794c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	2200      	movs	r2, #0
 80078fe:	2180      	movs	r1, #128	@ 0x80
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 fc63 	bl	80081cc <UART_WaitOnFlagUntilTimeout>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d001      	beq.n	8007910 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e036      	b.n	800797e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10b      	bne.n	800792e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	881b      	ldrh	r3, [r3, #0]
 800791a:	461a      	mov	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007924:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	3302      	adds	r3, #2
 800792a:	61bb      	str	r3, [r7, #24]
 800792c:	e007      	b.n	800793e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	781a      	ldrb	r2, [r3, #0]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	3301      	adds	r3, #1
 800793c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007942:	b29b      	uxth	r3, r3
 8007944:	3b01      	subs	r3, #1
 8007946:	b29a      	uxth	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007950:	b29b      	uxth	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1cf      	bne.n	80078f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	2200      	movs	r2, #0
 800795e:	2140      	movs	r1, #64	@ 0x40
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 fc33 	bl	80081cc <UART_WaitOnFlagUntilTimeout>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	e006      	b.n	800797e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2220      	movs	r2, #32
 8007974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007978:	2300      	movs	r3, #0
 800797a:	e000      	b.n	800797e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800797c:	2302      	movs	r3, #2
  }
}
 800797e:	4618      	mov	r0, r3
 8007980:	3720      	adds	r7, #32
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b08a      	sub	sp, #40	@ 0x28
 800798a:	af02      	add	r7, sp, #8
 800798c:	60f8      	str	r0, [r7, #12]
 800798e:	60b9      	str	r1, [r7, #8]
 8007990:	603b      	str	r3, [r7, #0]
 8007992:	4613      	mov	r3, r2
 8007994:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007996:	2300      	movs	r3, #0
 8007998:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b20      	cmp	r3, #32
 80079a4:	f040 808c 	bne.w	8007ac0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d002      	beq.n	80079b4 <HAL_UART_Receive+0x2e>
 80079ae:	88fb      	ldrh	r3, [r7, #6]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d101      	bne.n	80079b8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e084      	b.n	8007ac2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d101      	bne.n	80079c6 <HAL_UART_Receive+0x40>
 80079c2:	2302      	movs	r3, #2
 80079c4:	e07d      	b.n	8007ac2 <HAL_UART_Receive+0x13c>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2222      	movs	r2, #34	@ 0x22
 80079d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2200      	movs	r2, #0
 80079e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079e2:	f7fc fc09 	bl	80041f8 <HAL_GetTick>
 80079e6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	88fa      	ldrh	r2, [r7, #6]
 80079ec:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	88fa      	ldrh	r2, [r7, #6]
 80079f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079fc:	d108      	bne.n	8007a10 <HAL_UART_Receive+0x8a>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d104      	bne.n	8007a10 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007a06:	2300      	movs	r3, #0
 8007a08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	61bb      	str	r3, [r7, #24]
 8007a0e:	e003      	b.n	8007a18 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a14:	2300      	movs	r3, #0
 8007a16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007a20:	e043      	b.n	8007aaa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	2120      	movs	r1, #32
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 fbcd 	bl	80081cc <UART_WaitOnFlagUntilTimeout>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d001      	beq.n	8007a3c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e042      	b.n	8007ac2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10c      	bne.n	8007a5c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	3302      	adds	r3, #2
 8007a58:	61bb      	str	r3, [r7, #24]
 8007a5a:	e01f      	b.n	8007a9c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a64:	d007      	beq.n	8007a76 <HAL_UART_Receive+0xf0>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10a      	bne.n	8007a84 <HAL_UART_Receive+0xfe>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d106      	bne.n	8007a84 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	b2da      	uxtb	r2, r3
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	701a      	strb	r2, [r3, #0]
 8007a82:	e008      	b.n	8007a96 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a90:	b2da      	uxtb	r2, r3
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1b6      	bne.n	8007a22 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2220      	movs	r2, #32
 8007ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    return HAL_OK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	e000      	b.n	8007ac2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007ac0:	2302      	movs	r3, #2
  }
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3720      	adds	r7, #32
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b084      	sub	sp, #16
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	60f8      	str	r0, [r7, #12]
 8007ad2:	60b9      	str	r1, [r7, #8]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	2b20      	cmp	r3, #32
 8007ae2:	d11d      	bne.n	8007b20 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d002      	beq.n	8007af0 <HAL_UART_Receive_IT+0x26>
 8007aea:	88fb      	ldrh	r3, [r7, #6]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d101      	bne.n	8007af4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e016      	b.n	8007b22 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d101      	bne.n	8007b02 <HAL_UART_Receive_IT+0x38>
 8007afe:	2302      	movs	r3, #2
 8007b00:	e00f      	b.n	8007b22 <HAL_UART_Receive_IT+0x58>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007b10:	88fb      	ldrh	r3, [r7, #6]
 8007b12:	461a      	mov	r2, r3
 8007b14:	68b9      	ldr	r1, [r7, #8]
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f000 fbc6 	bl	80082a8 <UART_Start_Receive_IT>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	e000      	b.n	8007b22 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007b20:	2302      	movs	r3, #2
  }
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b09a      	sub	sp, #104	@ 0x68
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	330c      	adds	r3, #12
 8007b38:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b3c:	e853 3f00 	ldrex	r3, [r3]
 8007b40:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007b42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b48:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	330c      	adds	r3, #12
 8007b50:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007b52:	657a      	str	r2, [r7, #84]	@ 0x54
 8007b54:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b56:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007b58:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007b5a:	e841 2300 	strex	r3, r2, [r1]
 8007b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007b60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1e5      	bne.n	8007b32 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3314      	adds	r3, #20
 8007b6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b70:	e853 3f00 	ldrex	r3, [r3]
 8007b74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b78:	f023 0301 	bic.w	r3, r3, #1
 8007b7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3314      	adds	r3, #20
 8007b84:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007b86:	643a      	str	r2, [r7, #64]	@ 0x40
 8007b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e5      	bne.n	8007b66 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d119      	bne.n	8007bd6 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	330c      	adds	r3, #12
 8007ba8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007baa:	6a3b      	ldr	r3, [r7, #32]
 8007bac:	e853 3f00 	ldrex	r3, [r3]
 8007bb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	f023 0310 	bic.w	r3, r3, #16
 8007bb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	330c      	adds	r3, #12
 8007bc0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007bc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bca:	e841 2300 	strex	r3, r2, [r1]
 8007bce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1e5      	bne.n	8007ba2 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	695b      	ldr	r3, [r3, #20]
 8007bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007be0:	2b40      	cmp	r3, #64	@ 0x40
 8007be2:	d136      	bne.n	8007c52 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	3314      	adds	r3, #20
 8007bea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	e853 3f00 	ldrex	r3, [r3]
 8007bf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bfa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	3314      	adds	r3, #20
 8007c02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c04:	61ba      	str	r2, [r7, #24]
 8007c06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c08:	6979      	ldr	r1, [r7, #20]
 8007c0a:	69ba      	ldr	r2, [r7, #24]
 8007c0c:	e841 2300 	strex	r3, r2, [r1]
 8007c10:	613b      	str	r3, [r7, #16]
   return(result);
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1e5      	bne.n	8007be4 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d018      	beq.n	8007c52 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c24:	2200      	movs	r2, #0
 8007c26:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7fc fc24 	bl	800447a <HAL_DMA_Abort>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00c      	beq.n	8007c52 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fc fcae 	bl	800459e <HAL_DMA_GetError>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b20      	cmp	r3, #32
 8007c46:	d104      	bne.n	8007c52 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2210      	movs	r2, #16
 8007c4c:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e00a      	b.n	8007c68 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2220      	movs	r2, #32
 8007c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3768      	adds	r7, #104	@ 0x68
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b0ba      	sub	sp, #232	@ 0xe8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007c96:	2300      	movs	r3, #0
 8007c98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ca6:	f003 030f 	and.w	r3, r3, #15
 8007caa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007cae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10f      	bne.n	8007cd6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cba:	f003 0320 	and.w	r3, r3, #32
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d009      	beq.n	8007cd6 <HAL_UART_IRQHandler+0x66>
 8007cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cc6:	f003 0320 	and.w	r3, r3, #32
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fc07 	bl	80084e2 <UART_Receive_IT>
      return;
 8007cd4:	e256      	b.n	8008184 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007cd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f000 80de 	beq.w	8007e9c <HAL_UART_IRQHandler+0x22c>
 8007ce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ce4:	f003 0301 	and.w	r3, r3, #1
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d106      	bne.n	8007cfa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cf0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f000 80d1 	beq.w	8007e9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00b      	beq.n	8007d1e <HAL_UART_IRQHandler+0xae>
 8007d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d005      	beq.n	8007d1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d16:	f043 0201 	orr.w	r2, r3, #1
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d22:	f003 0304 	and.w	r3, r3, #4
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00b      	beq.n	8007d42 <HAL_UART_IRQHandler+0xd2>
 8007d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d2e:	f003 0301 	and.w	r3, r3, #1
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d005      	beq.n	8007d42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d3a:	f043 0202 	orr.w	r2, r3, #2
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d46:	f003 0302 	and.w	r3, r3, #2
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00b      	beq.n	8007d66 <HAL_UART_IRQHandler+0xf6>
 8007d4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d005      	beq.n	8007d66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d5e:	f043 0204 	orr.w	r2, r3, #4
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d6a:	f003 0308 	and.w	r3, r3, #8
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d011      	beq.n	8007d96 <HAL_UART_IRQHandler+0x126>
 8007d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d76:	f003 0320 	and.w	r3, r3, #32
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d105      	bne.n	8007d8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d82:	f003 0301 	and.w	r3, r3, #1
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d005      	beq.n	8007d96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d8e:	f043 0208 	orr.w	r2, r3, #8
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f000 81ed 	beq.w	800817a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007da4:	f003 0320 	and.w	r3, r3, #32
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d008      	beq.n	8007dbe <HAL_UART_IRQHandler+0x14e>
 8007dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007db0:	f003 0320 	and.w	r3, r3, #32
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d002      	beq.n	8007dbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fb92 	bl	80084e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	695b      	ldr	r3, [r3, #20]
 8007dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dc8:	2b40      	cmp	r3, #64	@ 0x40
 8007dca:	bf0c      	ite	eq
 8007dcc:	2301      	moveq	r3, #1
 8007dce:	2300      	movne	r3, #0
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dda:	f003 0308 	and.w	r3, r3, #8
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d103      	bne.n	8007dea <HAL_UART_IRQHandler+0x17a>
 8007de2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d04f      	beq.n	8007e8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fa9a 	bl	8008324 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dfa:	2b40      	cmp	r3, #64	@ 0x40
 8007dfc:	d141      	bne.n	8007e82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3314      	adds	r3, #20
 8007e04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e0c:	e853 3f00 	ldrex	r3, [r3]
 8007e10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007e14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3314      	adds	r3, #20
 8007e26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007e2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007e2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007e36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007e3a:	e841 2300 	strex	r3, r2, [r1]
 8007e3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007e42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1d9      	bne.n	8007dfe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d013      	beq.n	8007e7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e56:	4a7d      	ldr	r2, [pc, #500]	@ (800804c <HAL_UART_IRQHandler+0x3dc>)
 8007e58:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fc fb7b 	bl	800455a <HAL_DMA_Abort_IT>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d016      	beq.n	8007e98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007e74:	4610      	mov	r0, r2
 8007e76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e78:	e00e      	b.n	8007e98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f990 	bl	80081a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e80:	e00a      	b.n	8007e98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f98c 	bl	80081a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e88:	e006      	b.n	8007e98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f988 	bl	80081a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8007e96:	e170      	b.n	800817a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e98:	bf00      	nop
    return;
 8007e9a:	e16e      	b.n	800817a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	f040 814a 	bne.w	800813a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eaa:	f003 0310 	and.w	r3, r3, #16
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f000 8143 	beq.w	800813a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eb8:	f003 0310 	and.w	r3, r3, #16
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f000 813c 	beq.w	800813a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	60bb      	str	r3, [r7, #8]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	60bb      	str	r3, [r7, #8]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	60bb      	str	r3, [r7, #8]
 8007ed6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ee2:	2b40      	cmp	r3, #64	@ 0x40
 8007ee4:	f040 80b4 	bne.w	8008050 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ef4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f000 8140 	beq.w	800817e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007f02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f06:	429a      	cmp	r2, r3
 8007f08:	f080 8139 	bcs.w	800817e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f12:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f18:	69db      	ldr	r3, [r3, #28]
 8007f1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f1e:	f000 8088 	beq.w	8008032 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	330c      	adds	r3, #12
 8007f28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f30:	e853 3f00 	ldrex	r3, [r3]
 8007f34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007f38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	330c      	adds	r3, #12
 8007f4a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007f4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007f52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007f5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007f5e:	e841 2300 	strex	r3, r2, [r1]
 8007f62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1d9      	bne.n	8007f22 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	3314      	adds	r3, #20
 8007f74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f78:	e853 3f00 	ldrex	r3, [r3]
 8007f7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007f7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f80:	f023 0301 	bic.w	r3, r3, #1
 8007f84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	3314      	adds	r3, #20
 8007f8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007f92:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007f96:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007f9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007f9e:	e841 2300 	strex	r3, r2, [r1]
 8007fa2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007fa4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1e1      	bne.n	8007f6e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	3314      	adds	r3, #20
 8007fb0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007fb4:	e853 3f00 	ldrex	r3, [r3]
 8007fb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007fba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	3314      	adds	r3, #20
 8007fca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007fce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007fd0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007fd4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007fd6:	e841 2300 	strex	r3, r2, [r1]
 8007fda:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007fdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1e3      	bne.n	8007faa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2220      	movs	r2, #32
 8007fe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	330c      	adds	r3, #12
 8007ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ffa:	e853 3f00 	ldrex	r3, [r3]
 8007ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008000:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008002:	f023 0310 	bic.w	r3, r3, #16
 8008006:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	330c      	adds	r3, #12
 8008010:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008014:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008016:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008018:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800801a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800801c:	e841 2300 	strex	r3, r2, [r1]
 8008020:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008022:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1e3      	bne.n	8007ff0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800802c:	4618      	mov	r0, r3
 800802e:	f7fc fa24 	bl	800447a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800803a:	b29b      	uxth	r3, r3
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	b29b      	uxth	r3, r3
 8008040:	4619      	mov	r1, r3
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f8b6 	bl	80081b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008048:	e099      	b.n	800817e <HAL_UART_IRQHandler+0x50e>
 800804a:	bf00      	nop
 800804c:	080083eb 	.word	0x080083eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008058:	b29b      	uxth	r3, r3
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008064:	b29b      	uxth	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	f000 808b 	beq.w	8008182 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800806c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008070:	2b00      	cmp	r3, #0
 8008072:	f000 8086 	beq.w	8008182 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	330c      	adds	r3, #12
 800807c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008080:	e853 3f00 	ldrex	r3, [r3]
 8008084:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008088:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800808c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	330c      	adds	r3, #12
 8008096:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800809a:	647a      	str	r2, [r7, #68]	@ 0x44
 800809c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080a2:	e841 2300 	strex	r3, r2, [r1]
 80080a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1e3      	bne.n	8008076 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3314      	adds	r3, #20
 80080b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b8:	e853 3f00 	ldrex	r3, [r3]
 80080bc:	623b      	str	r3, [r7, #32]
   return(result);
 80080be:	6a3b      	ldr	r3, [r7, #32]
 80080c0:	f023 0301 	bic.w	r3, r3, #1
 80080c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3314      	adds	r3, #20
 80080ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80080d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80080d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080da:	e841 2300 	strex	r3, r2, [r1]
 80080de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1e3      	bne.n	80080ae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2220      	movs	r2, #32
 80080ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	330c      	adds	r3, #12
 80080fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	e853 3f00 	ldrex	r3, [r3]
 8008102:	60fb      	str	r3, [r7, #12]
   return(result);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f023 0310 	bic.w	r3, r3, #16
 800810a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	330c      	adds	r3, #12
 8008114:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008118:	61fa      	str	r2, [r7, #28]
 800811a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811c:	69b9      	ldr	r1, [r7, #24]
 800811e:	69fa      	ldr	r2, [r7, #28]
 8008120:	e841 2300 	strex	r3, r2, [r1]
 8008124:	617b      	str	r3, [r7, #20]
   return(result);
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1e3      	bne.n	80080f4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800812c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f83e 	bl	80081b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008138:	e023      	b.n	8008182 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800813a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800813e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008142:	2b00      	cmp	r3, #0
 8008144:	d009      	beq.n	800815a <HAL_UART_IRQHandler+0x4ea>
 8008146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800814a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f95d 	bl	8008412 <UART_Transmit_IT>
    return;
 8008158:	e014      	b.n	8008184 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800815a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800815e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00e      	beq.n	8008184 <HAL_UART_IRQHandler+0x514>
 8008166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800816a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800816e:	2b00      	cmp	r3, #0
 8008170:	d008      	beq.n	8008184 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f99d 	bl	80084b2 <UART_EndTransmit_IT>
    return;
 8008178:	e004      	b.n	8008184 <HAL_UART_IRQHandler+0x514>
    return;
 800817a:	bf00      	nop
 800817c:	e002      	b.n	8008184 <HAL_UART_IRQHandler+0x514>
      return;
 800817e:	bf00      	nop
 8008180:	e000      	b.n	8008184 <HAL_UART_IRQHandler+0x514>
      return;
 8008182:	bf00      	nop
  }
}
 8008184:	37e8      	adds	r7, #232	@ 0xe8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop

0800818c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	460b      	mov	r3, r1
 80081be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b090      	sub	sp, #64	@ 0x40
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	603b      	str	r3, [r7, #0]
 80081d8:	4613      	mov	r3, r2
 80081da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081dc:	e050      	b.n	8008280 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081e4:	d04c      	beq.n	8008280 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80081e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d007      	beq.n	80081fc <UART_WaitOnFlagUntilTimeout+0x30>
 80081ec:	f7fc f804 	bl	80041f8 <HAL_GetTick>
 80081f0:	4602      	mov	r2, r0
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d241      	bcs.n	8008280 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	330c      	adds	r3, #12
 8008202:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008206:	e853 3f00 	ldrex	r3, [r3]
 800820a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800820c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008212:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	330c      	adds	r3, #12
 800821a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800821c:	637a      	str	r2, [r7, #52]	@ 0x34
 800821e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008220:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008222:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008224:	e841 2300 	strex	r3, r2, [r1]
 8008228:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800822a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1e5      	bne.n	80081fc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	3314      	adds	r3, #20
 8008236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	e853 3f00 	ldrex	r3, [r3]
 800823e:	613b      	str	r3, [r7, #16]
   return(result);
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	f023 0301 	bic.w	r3, r3, #1
 8008246:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	3314      	adds	r3, #20
 800824e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008250:	623a      	str	r2, [r7, #32]
 8008252:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008254:	69f9      	ldr	r1, [r7, #28]
 8008256:	6a3a      	ldr	r2, [r7, #32]
 8008258:	e841 2300 	strex	r3, r2, [r1]
 800825c:	61bb      	str	r3, [r7, #24]
   return(result);
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1e5      	bne.n	8008230 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2220      	movs	r2, #32
 8008268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2220      	movs	r2, #32
 8008270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2200      	movs	r2, #0
 8008278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800827c:	2303      	movs	r3, #3
 800827e:	e00f      	b.n	80082a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	4013      	ands	r3, r2
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	429a      	cmp	r2, r3
 800828e:	bf0c      	ite	eq
 8008290:	2301      	moveq	r3, #1
 8008292:	2300      	movne	r3, #0
 8008294:	b2db      	uxtb	r3, r3
 8008296:	461a      	mov	r2, r3
 8008298:	79fb      	ldrb	r3, [r7, #7]
 800829a:	429a      	cmp	r2, r3
 800829c:	d09f      	beq.n	80081de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3740      	adds	r7, #64	@ 0x40
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	4613      	mov	r3, r2
 80082b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	68ba      	ldr	r2, [r7, #8]
 80082ba:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	88fa      	ldrh	r2, [r7, #6]
 80082c0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	88fa      	ldrh	r2, [r7, #6]
 80082c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2200      	movs	r2, #0
 80082cc:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2222      	movs	r2, #34	@ 0x22
 80082d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d007      	beq.n	80082f6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68da      	ldr	r2, [r3, #12]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80082f4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	695a      	ldr	r2, [r3, #20]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f042 0201 	orr.w	r2, r2, #1
 8008304:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68da      	ldr	r2, [r3, #12]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f042 0220 	orr.w	r2, r2, #32
 8008314:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008324:	b480      	push	{r7}
 8008326:	b095      	sub	sp, #84	@ 0x54
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	330c      	adds	r3, #12
 8008332:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008336:	e853 3f00 	ldrex	r3, [r3]
 800833a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800833c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800833e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008342:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	330c      	adds	r3, #12
 800834a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800834c:	643a      	str	r2, [r7, #64]	@ 0x40
 800834e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008350:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008352:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008354:	e841 2300 	strex	r3, r2, [r1]
 8008358:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800835a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1e5      	bne.n	800832c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	3314      	adds	r3, #20
 8008366:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008368:	6a3b      	ldr	r3, [r7, #32]
 800836a:	e853 3f00 	ldrex	r3, [r3]
 800836e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	f023 0301 	bic.w	r3, r3, #1
 8008376:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	3314      	adds	r3, #20
 800837e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008380:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008382:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008384:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008388:	e841 2300 	strex	r3, r2, [r1]
 800838c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800838e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008390:	2b00      	cmp	r3, #0
 8008392:	d1e5      	bne.n	8008360 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008398:	2b01      	cmp	r3, #1
 800839a:	d119      	bne.n	80083d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	330c      	adds	r3, #12
 80083a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	e853 3f00 	ldrex	r3, [r3]
 80083aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	f023 0310 	bic.w	r3, r3, #16
 80083b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	330c      	adds	r3, #12
 80083ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083bc:	61ba      	str	r2, [r7, #24]
 80083be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c0:	6979      	ldr	r1, [r7, #20]
 80083c2:	69ba      	ldr	r2, [r7, #24]
 80083c4:	e841 2300 	strex	r3, r2, [r1]
 80083c8:	613b      	str	r3, [r7, #16]
   return(result);
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1e5      	bne.n	800839c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2220      	movs	r2, #32
 80083d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80083de:	bf00      	nop
 80083e0:	3754      	adds	r7, #84	@ 0x54
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr

080083ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b084      	sub	sp, #16
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f7ff fecb 	bl	80081a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800840a:	bf00      	nop
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008412:	b480      	push	{r7}
 8008414:	b085      	sub	sp, #20
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008420:	b2db      	uxtb	r3, r3
 8008422:	2b21      	cmp	r3, #33	@ 0x21
 8008424:	d13e      	bne.n	80084a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800842e:	d114      	bne.n	800845a <UART_Transmit_IT+0x48>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d110      	bne.n	800845a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a1b      	ldr	r3, [r3, #32]
 800843c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	881b      	ldrh	r3, [r3, #0]
 8008442:	461a      	mov	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800844c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a1b      	ldr	r3, [r3, #32]
 8008452:	1c9a      	adds	r2, r3, #2
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	621a      	str	r2, [r3, #32]
 8008458:	e008      	b.n	800846c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a1b      	ldr	r3, [r3, #32]
 800845e:	1c59      	adds	r1, r3, #1
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	6211      	str	r1, [r2, #32]
 8008464:	781a      	ldrb	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008470:	b29b      	uxth	r3, r3
 8008472:	3b01      	subs	r3, #1
 8008474:	b29b      	uxth	r3, r3
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	4619      	mov	r1, r3
 800847a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10f      	bne.n	80084a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68da      	ldr	r2, [r3, #12]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800848e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68da      	ldr	r2, [r3, #12]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800849e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	e000      	b.n	80084a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80084a4:	2302      	movs	r3, #2
  }
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b082      	sub	sp, #8
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68da      	ldr	r2, [r3, #12]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80084c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2220      	movs	r2, #32
 80084ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7ff fe5a 	bl	800818c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b08c      	sub	sp, #48	@ 0x30
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b22      	cmp	r3, #34	@ 0x22
 80084f4:	f040 80ab 	bne.w	800864e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008500:	d117      	bne.n	8008532 <UART_Receive_IT+0x50>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d113      	bne.n	8008532 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800850a:	2300      	movs	r3, #0
 800850c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008512:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	b29b      	uxth	r3, r3
 800851c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008520:	b29a      	uxth	r2, r3
 8008522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008524:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800852a:	1c9a      	adds	r2, r3, #2
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008530:	e026      	b.n	8008580 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008536:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008538:	2300      	movs	r3, #0
 800853a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008544:	d007      	beq.n	8008556 <UART_Receive_IT+0x74>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10a      	bne.n	8008564 <UART_Receive_IT+0x82>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d106      	bne.n	8008564 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	b2da      	uxtb	r2, r3
 800855e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008560:	701a      	strb	r2, [r3, #0]
 8008562:	e008      	b.n	8008576 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	b2db      	uxtb	r3, r3
 800856c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008570:	b2da      	uxtb	r2, r3
 8008572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008574:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800857a:	1c5a      	adds	r2, r3, #1
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008584:	b29b      	uxth	r3, r3
 8008586:	3b01      	subs	r3, #1
 8008588:	b29b      	uxth	r3, r3
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	4619      	mov	r1, r3
 800858e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008590:	2b00      	cmp	r3, #0
 8008592:	d15a      	bne.n	800864a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	68da      	ldr	r2, [r3, #12]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f022 0220 	bic.w	r2, r2, #32
 80085a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68da      	ldr	r2, [r3, #12]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80085b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	695a      	ldr	r2, [r3, #20]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f022 0201 	bic.w	r2, r2, #1
 80085c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2220      	movs	r2, #32
 80085c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d135      	bne.n	8008640 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	330c      	adds	r3, #12
 80085e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	e853 3f00 	ldrex	r3, [r3]
 80085e8:	613b      	str	r3, [r7, #16]
   return(result);
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	f023 0310 	bic.w	r3, r3, #16
 80085f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	330c      	adds	r3, #12
 80085f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085fa:	623a      	str	r2, [r7, #32]
 80085fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fe:	69f9      	ldr	r1, [r7, #28]
 8008600:	6a3a      	ldr	r2, [r7, #32]
 8008602:	e841 2300 	strex	r3, r2, [r1]
 8008606:	61bb      	str	r3, [r7, #24]
   return(result);
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d1e5      	bne.n	80085da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0310 	and.w	r3, r3, #16
 8008618:	2b10      	cmp	r3, #16
 800861a:	d10a      	bne.n	8008632 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800861c:	2300      	movs	r3, #0
 800861e:	60fb      	str	r3, [r7, #12]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	60fb      	str	r3, [r7, #12]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	60fb      	str	r3, [r7, #12]
 8008630:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008636:	4619      	mov	r1, r3
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f7ff fdbb 	bl	80081b4 <HAL_UARTEx_RxEventCallback>
 800863e:	e002      	b.n	8008646 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f7fa fe5f 	bl	8003304 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008646:	2300      	movs	r3, #0
 8008648:	e002      	b.n	8008650 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800864a:	2300      	movs	r3, #0
 800864c:	e000      	b.n	8008650 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800864e:	2302      	movs	r3, #2
  }
}
 8008650:	4618      	mov	r0, r3
 8008652:	3730      	adds	r7, #48	@ 0x30
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800865c:	b0c0      	sub	sp, #256	@ 0x100
 800865e:	af00      	add	r7, sp, #0
 8008660:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008674:	68d9      	ldr	r1, [r3, #12]
 8008676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	ea40 0301 	orr.w	r3, r0, r1
 8008680:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008686:	689a      	ldr	r2, [r3, #8]
 8008688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	431a      	orrs	r2, r3
 8008690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008694:	695b      	ldr	r3, [r3, #20]
 8008696:	431a      	orrs	r2, r3
 8008698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800869c:	69db      	ldr	r3, [r3, #28]
 800869e:	4313      	orrs	r3, r2
 80086a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80086a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80086b0:	f021 010c 	bic.w	r1, r1, #12
 80086b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80086be:	430b      	orrs	r3, r1
 80086c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80086c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	695b      	ldr	r3, [r3, #20]
 80086ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80086ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086d2:	6999      	ldr	r1, [r3, #24]
 80086d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	ea40 0301 	orr.w	r3, r0, r1
 80086de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80086e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	4b8f      	ldr	r3, [pc, #572]	@ (8008924 <UART_SetConfig+0x2cc>)
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d005      	beq.n	80086f8 <UART_SetConfig+0xa0>
 80086ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	4b8d      	ldr	r3, [pc, #564]	@ (8008928 <UART_SetConfig+0x2d0>)
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d104      	bne.n	8008702 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80086f8:	f7fe fcf2 	bl	80070e0 <HAL_RCC_GetPCLK2Freq>
 80086fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008700:	e003      	b.n	800870a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008702:	f7fe fcd9 	bl	80070b8 <HAL_RCC_GetPCLK1Freq>
 8008706:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800870a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800870e:	69db      	ldr	r3, [r3, #28]
 8008710:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008714:	f040 810c 	bne.w	8008930 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008718:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800871c:	2200      	movs	r2, #0
 800871e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008722:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008726:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800872a:	4622      	mov	r2, r4
 800872c:	462b      	mov	r3, r5
 800872e:	1891      	adds	r1, r2, r2
 8008730:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008732:	415b      	adcs	r3, r3
 8008734:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008736:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800873a:	4621      	mov	r1, r4
 800873c:	eb12 0801 	adds.w	r8, r2, r1
 8008740:	4629      	mov	r1, r5
 8008742:	eb43 0901 	adc.w	r9, r3, r1
 8008746:	f04f 0200 	mov.w	r2, #0
 800874a:	f04f 0300 	mov.w	r3, #0
 800874e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008752:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008756:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800875a:	4690      	mov	r8, r2
 800875c:	4699      	mov	r9, r3
 800875e:	4623      	mov	r3, r4
 8008760:	eb18 0303 	adds.w	r3, r8, r3
 8008764:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008768:	462b      	mov	r3, r5
 800876a:	eb49 0303 	adc.w	r3, r9, r3
 800876e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800877e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008782:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008786:	460b      	mov	r3, r1
 8008788:	18db      	adds	r3, r3, r3
 800878a:	653b      	str	r3, [r7, #80]	@ 0x50
 800878c:	4613      	mov	r3, r2
 800878e:	eb42 0303 	adc.w	r3, r2, r3
 8008792:	657b      	str	r3, [r7, #84]	@ 0x54
 8008794:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008798:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800879c:	f7f8 fa94 	bl	8000cc8 <__aeabi_uldivmod>
 80087a0:	4602      	mov	r2, r0
 80087a2:	460b      	mov	r3, r1
 80087a4:	4b61      	ldr	r3, [pc, #388]	@ (800892c <UART_SetConfig+0x2d4>)
 80087a6:	fba3 2302 	umull	r2, r3, r3, r2
 80087aa:	095b      	lsrs	r3, r3, #5
 80087ac:	011c      	lsls	r4, r3, #4
 80087ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087b2:	2200      	movs	r2, #0
 80087b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80087b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80087bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80087c0:	4642      	mov	r2, r8
 80087c2:	464b      	mov	r3, r9
 80087c4:	1891      	adds	r1, r2, r2
 80087c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80087c8:	415b      	adcs	r3, r3
 80087ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80087d0:	4641      	mov	r1, r8
 80087d2:	eb12 0a01 	adds.w	sl, r2, r1
 80087d6:	4649      	mov	r1, r9
 80087d8:	eb43 0b01 	adc.w	fp, r3, r1
 80087dc:	f04f 0200 	mov.w	r2, #0
 80087e0:	f04f 0300 	mov.w	r3, #0
 80087e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80087e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80087ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087f0:	4692      	mov	sl, r2
 80087f2:	469b      	mov	fp, r3
 80087f4:	4643      	mov	r3, r8
 80087f6:	eb1a 0303 	adds.w	r3, sl, r3
 80087fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80087fe:	464b      	mov	r3, r9
 8008800:	eb4b 0303 	adc.w	r3, fp, r3
 8008804:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008814:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008818:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800881c:	460b      	mov	r3, r1
 800881e:	18db      	adds	r3, r3, r3
 8008820:	643b      	str	r3, [r7, #64]	@ 0x40
 8008822:	4613      	mov	r3, r2
 8008824:	eb42 0303 	adc.w	r3, r2, r3
 8008828:	647b      	str	r3, [r7, #68]	@ 0x44
 800882a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800882e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008832:	f7f8 fa49 	bl	8000cc8 <__aeabi_uldivmod>
 8008836:	4602      	mov	r2, r0
 8008838:	460b      	mov	r3, r1
 800883a:	4611      	mov	r1, r2
 800883c:	4b3b      	ldr	r3, [pc, #236]	@ (800892c <UART_SetConfig+0x2d4>)
 800883e:	fba3 2301 	umull	r2, r3, r3, r1
 8008842:	095b      	lsrs	r3, r3, #5
 8008844:	2264      	movs	r2, #100	@ 0x64
 8008846:	fb02 f303 	mul.w	r3, r2, r3
 800884a:	1acb      	subs	r3, r1, r3
 800884c:	00db      	lsls	r3, r3, #3
 800884e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008852:	4b36      	ldr	r3, [pc, #216]	@ (800892c <UART_SetConfig+0x2d4>)
 8008854:	fba3 2302 	umull	r2, r3, r3, r2
 8008858:	095b      	lsrs	r3, r3, #5
 800885a:	005b      	lsls	r3, r3, #1
 800885c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008860:	441c      	add	r4, r3
 8008862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008866:	2200      	movs	r2, #0
 8008868:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800886c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008870:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008874:	4642      	mov	r2, r8
 8008876:	464b      	mov	r3, r9
 8008878:	1891      	adds	r1, r2, r2
 800887a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800887c:	415b      	adcs	r3, r3
 800887e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008880:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008884:	4641      	mov	r1, r8
 8008886:	1851      	adds	r1, r2, r1
 8008888:	6339      	str	r1, [r7, #48]	@ 0x30
 800888a:	4649      	mov	r1, r9
 800888c:	414b      	adcs	r3, r1
 800888e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008890:	f04f 0200 	mov.w	r2, #0
 8008894:	f04f 0300 	mov.w	r3, #0
 8008898:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800889c:	4659      	mov	r1, fp
 800889e:	00cb      	lsls	r3, r1, #3
 80088a0:	4651      	mov	r1, sl
 80088a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088a6:	4651      	mov	r1, sl
 80088a8:	00ca      	lsls	r2, r1, #3
 80088aa:	4610      	mov	r0, r2
 80088ac:	4619      	mov	r1, r3
 80088ae:	4603      	mov	r3, r0
 80088b0:	4642      	mov	r2, r8
 80088b2:	189b      	adds	r3, r3, r2
 80088b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80088b8:	464b      	mov	r3, r9
 80088ba:	460a      	mov	r2, r1
 80088bc:	eb42 0303 	adc.w	r3, r2, r3
 80088c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80088c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80088d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80088d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80088d8:	460b      	mov	r3, r1
 80088da:	18db      	adds	r3, r3, r3
 80088dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80088de:	4613      	mov	r3, r2
 80088e0:	eb42 0303 	adc.w	r3, r2, r3
 80088e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80088e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80088ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80088ee:	f7f8 f9eb 	bl	8000cc8 <__aeabi_uldivmod>
 80088f2:	4602      	mov	r2, r0
 80088f4:	460b      	mov	r3, r1
 80088f6:	4b0d      	ldr	r3, [pc, #52]	@ (800892c <UART_SetConfig+0x2d4>)
 80088f8:	fba3 1302 	umull	r1, r3, r3, r2
 80088fc:	095b      	lsrs	r3, r3, #5
 80088fe:	2164      	movs	r1, #100	@ 0x64
 8008900:	fb01 f303 	mul.w	r3, r1, r3
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	00db      	lsls	r3, r3, #3
 8008908:	3332      	adds	r3, #50	@ 0x32
 800890a:	4a08      	ldr	r2, [pc, #32]	@ (800892c <UART_SetConfig+0x2d4>)
 800890c:	fba2 2303 	umull	r2, r3, r2, r3
 8008910:	095b      	lsrs	r3, r3, #5
 8008912:	f003 0207 	and.w	r2, r3, #7
 8008916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4422      	add	r2, r4
 800891e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008920:	e106      	b.n	8008b30 <UART_SetConfig+0x4d8>
 8008922:	bf00      	nop
 8008924:	40011000 	.word	0x40011000
 8008928:	40011400 	.word	0x40011400
 800892c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008930:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008934:	2200      	movs	r2, #0
 8008936:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800893a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800893e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008942:	4642      	mov	r2, r8
 8008944:	464b      	mov	r3, r9
 8008946:	1891      	adds	r1, r2, r2
 8008948:	6239      	str	r1, [r7, #32]
 800894a:	415b      	adcs	r3, r3
 800894c:	627b      	str	r3, [r7, #36]	@ 0x24
 800894e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008952:	4641      	mov	r1, r8
 8008954:	1854      	adds	r4, r2, r1
 8008956:	4649      	mov	r1, r9
 8008958:	eb43 0501 	adc.w	r5, r3, r1
 800895c:	f04f 0200 	mov.w	r2, #0
 8008960:	f04f 0300 	mov.w	r3, #0
 8008964:	00eb      	lsls	r3, r5, #3
 8008966:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800896a:	00e2      	lsls	r2, r4, #3
 800896c:	4614      	mov	r4, r2
 800896e:	461d      	mov	r5, r3
 8008970:	4643      	mov	r3, r8
 8008972:	18e3      	adds	r3, r4, r3
 8008974:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008978:	464b      	mov	r3, r9
 800897a:	eb45 0303 	adc.w	r3, r5, r3
 800897e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800898e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008992:	f04f 0200 	mov.w	r2, #0
 8008996:	f04f 0300 	mov.w	r3, #0
 800899a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800899e:	4629      	mov	r1, r5
 80089a0:	008b      	lsls	r3, r1, #2
 80089a2:	4621      	mov	r1, r4
 80089a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089a8:	4621      	mov	r1, r4
 80089aa:	008a      	lsls	r2, r1, #2
 80089ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80089b0:	f7f8 f98a 	bl	8000cc8 <__aeabi_uldivmod>
 80089b4:	4602      	mov	r2, r0
 80089b6:	460b      	mov	r3, r1
 80089b8:	4b60      	ldr	r3, [pc, #384]	@ (8008b3c <UART_SetConfig+0x4e4>)
 80089ba:	fba3 2302 	umull	r2, r3, r3, r2
 80089be:	095b      	lsrs	r3, r3, #5
 80089c0:	011c      	lsls	r4, r3, #4
 80089c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80089c6:	2200      	movs	r2, #0
 80089c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80089cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80089d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80089d4:	4642      	mov	r2, r8
 80089d6:	464b      	mov	r3, r9
 80089d8:	1891      	adds	r1, r2, r2
 80089da:	61b9      	str	r1, [r7, #24]
 80089dc:	415b      	adcs	r3, r3
 80089de:	61fb      	str	r3, [r7, #28]
 80089e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80089e4:	4641      	mov	r1, r8
 80089e6:	1851      	adds	r1, r2, r1
 80089e8:	6139      	str	r1, [r7, #16]
 80089ea:	4649      	mov	r1, r9
 80089ec:	414b      	adcs	r3, r1
 80089ee:	617b      	str	r3, [r7, #20]
 80089f0:	f04f 0200 	mov.w	r2, #0
 80089f4:	f04f 0300 	mov.w	r3, #0
 80089f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80089fc:	4659      	mov	r1, fp
 80089fe:	00cb      	lsls	r3, r1, #3
 8008a00:	4651      	mov	r1, sl
 8008a02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a06:	4651      	mov	r1, sl
 8008a08:	00ca      	lsls	r2, r1, #3
 8008a0a:	4610      	mov	r0, r2
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	4603      	mov	r3, r0
 8008a10:	4642      	mov	r2, r8
 8008a12:	189b      	adds	r3, r3, r2
 8008a14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008a18:	464b      	mov	r3, r9
 8008a1a:	460a      	mov	r2, r1
 8008a1c:	eb42 0303 	adc.w	r3, r2, r3
 8008a20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008a2e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008a30:	f04f 0200 	mov.w	r2, #0
 8008a34:	f04f 0300 	mov.w	r3, #0
 8008a38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008a3c:	4649      	mov	r1, r9
 8008a3e:	008b      	lsls	r3, r1, #2
 8008a40:	4641      	mov	r1, r8
 8008a42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a46:	4641      	mov	r1, r8
 8008a48:	008a      	lsls	r2, r1, #2
 8008a4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008a4e:	f7f8 f93b 	bl	8000cc8 <__aeabi_uldivmod>
 8008a52:	4602      	mov	r2, r0
 8008a54:	460b      	mov	r3, r1
 8008a56:	4611      	mov	r1, r2
 8008a58:	4b38      	ldr	r3, [pc, #224]	@ (8008b3c <UART_SetConfig+0x4e4>)
 8008a5a:	fba3 2301 	umull	r2, r3, r3, r1
 8008a5e:	095b      	lsrs	r3, r3, #5
 8008a60:	2264      	movs	r2, #100	@ 0x64
 8008a62:	fb02 f303 	mul.w	r3, r2, r3
 8008a66:	1acb      	subs	r3, r1, r3
 8008a68:	011b      	lsls	r3, r3, #4
 8008a6a:	3332      	adds	r3, #50	@ 0x32
 8008a6c:	4a33      	ldr	r2, [pc, #204]	@ (8008b3c <UART_SetConfig+0x4e4>)
 8008a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a72:	095b      	lsrs	r3, r3, #5
 8008a74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008a78:	441c      	add	r4, r3
 8008a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a7e:	2200      	movs	r2, #0
 8008a80:	673b      	str	r3, [r7, #112]	@ 0x70
 8008a82:	677a      	str	r2, [r7, #116]	@ 0x74
 8008a84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008a88:	4642      	mov	r2, r8
 8008a8a:	464b      	mov	r3, r9
 8008a8c:	1891      	adds	r1, r2, r2
 8008a8e:	60b9      	str	r1, [r7, #8]
 8008a90:	415b      	adcs	r3, r3
 8008a92:	60fb      	str	r3, [r7, #12]
 8008a94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a98:	4641      	mov	r1, r8
 8008a9a:	1851      	adds	r1, r2, r1
 8008a9c:	6039      	str	r1, [r7, #0]
 8008a9e:	4649      	mov	r1, r9
 8008aa0:	414b      	adcs	r3, r1
 8008aa2:	607b      	str	r3, [r7, #4]
 8008aa4:	f04f 0200 	mov.w	r2, #0
 8008aa8:	f04f 0300 	mov.w	r3, #0
 8008aac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008ab0:	4659      	mov	r1, fp
 8008ab2:	00cb      	lsls	r3, r1, #3
 8008ab4:	4651      	mov	r1, sl
 8008ab6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008aba:	4651      	mov	r1, sl
 8008abc:	00ca      	lsls	r2, r1, #3
 8008abe:	4610      	mov	r0, r2
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	4642      	mov	r2, r8
 8008ac6:	189b      	adds	r3, r3, r2
 8008ac8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008aca:	464b      	mov	r3, r9
 8008acc:	460a      	mov	r2, r1
 8008ace:	eb42 0303 	adc.w	r3, r2, r3
 8008ad2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ade:	667a      	str	r2, [r7, #100]	@ 0x64
 8008ae0:	f04f 0200 	mov.w	r2, #0
 8008ae4:	f04f 0300 	mov.w	r3, #0
 8008ae8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008aec:	4649      	mov	r1, r9
 8008aee:	008b      	lsls	r3, r1, #2
 8008af0:	4641      	mov	r1, r8
 8008af2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008af6:	4641      	mov	r1, r8
 8008af8:	008a      	lsls	r2, r1, #2
 8008afa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008afe:	f7f8 f8e3 	bl	8000cc8 <__aeabi_uldivmod>
 8008b02:	4602      	mov	r2, r0
 8008b04:	460b      	mov	r3, r1
 8008b06:	4b0d      	ldr	r3, [pc, #52]	@ (8008b3c <UART_SetConfig+0x4e4>)
 8008b08:	fba3 1302 	umull	r1, r3, r3, r2
 8008b0c:	095b      	lsrs	r3, r3, #5
 8008b0e:	2164      	movs	r1, #100	@ 0x64
 8008b10:	fb01 f303 	mul.w	r3, r1, r3
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	011b      	lsls	r3, r3, #4
 8008b18:	3332      	adds	r3, #50	@ 0x32
 8008b1a:	4a08      	ldr	r2, [pc, #32]	@ (8008b3c <UART_SetConfig+0x4e4>)
 8008b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b20:	095b      	lsrs	r3, r3, #5
 8008b22:	f003 020f 	and.w	r2, r3, #15
 8008b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4422      	add	r2, r4
 8008b2e:	609a      	str	r2, [r3, #8]
}
 8008b30:	bf00      	nop
 8008b32:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008b36:	46bd      	mov	sp, r7
 8008b38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b3c:	51eb851f 	.word	0x51eb851f

08008b40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b40:	b084      	sub	sp, #16
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b084      	sub	sp, #16
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	f107 001c 	add.w	r0, r7, #28
 8008b4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d122      	bne.n	8008b9e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b5c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008b6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008b80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d105      	bne.n	8008b92 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f9c0 	bl	8008f18 <USB_CoreReset>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	73fb      	strb	r3, [r7, #15]
 8008b9c:	e01a      	b.n	8008bd4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f9b4 	bl	8008f18 <USB_CoreReset>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008bb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d106      	bne.n	8008bc8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bbe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	639a      	str	r2, [r3, #56]	@ 0x38
 8008bc6:	e005      	b.n	8008bd4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bcc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d10b      	bne.n	8008bf2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	f043 0206 	orr.w	r2, r3, #6
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	f043 0220 	orr.w	r2, r3, #32
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008bfe:	b004      	add	sp, #16
 8008c00:	4770      	bx	lr

08008c02 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c02:	b480      	push	{r7}
 8008c04:	b083      	sub	sp, #12
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	f043 0201 	orr.w	r2, r3, #1
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	f023 0201 	bic.w	r2, r3, #1
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b084      	sub	sp, #16
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
 8008c4e:	460b      	mov	r3, r1
 8008c50:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008c52:	2300      	movs	r3, #0
 8008c54:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c62:	78fb      	ldrb	r3, [r7, #3]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d115      	bne.n	8008c94 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c74:	2001      	movs	r0, #1
 8008c76:	f7fb facb 	bl	8004210 <HAL_Delay>
      ms++;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 f93a 	bl	8008efa <USB_GetMode>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d01e      	beq.n	8008cca <USB_SetCurrentMode+0x84>
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2b31      	cmp	r3, #49	@ 0x31
 8008c90:	d9f0      	bls.n	8008c74 <USB_SetCurrentMode+0x2e>
 8008c92:	e01a      	b.n	8008cca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008c94:	78fb      	ldrb	r3, [r7, #3]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d115      	bne.n	8008cc6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008ca6:	2001      	movs	r0, #1
 8008ca8:	f7fb fab2 	bl	8004210 <HAL_Delay>
      ms++;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f921 	bl	8008efa <USB_GetMode>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d005      	beq.n	8008cca <USB_SetCurrentMode+0x84>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2b31      	cmp	r3, #49	@ 0x31
 8008cc2:	d9f0      	bls.n	8008ca6 <USB_SetCurrentMode+0x60>
 8008cc4:	e001      	b.n	8008cca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e005      	b.n	8008cd6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2b32      	cmp	r3, #50	@ 0x32
 8008cce:	d101      	bne.n	8008cd4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e000      	b.n	8008cd6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
	...

08008ce0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008cea:	2300      	movs	r3, #0
 8008cec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	4a13      	ldr	r2, [pc, #76]	@ (8008d44 <USB_FlushTxFifo+0x64>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d901      	bls.n	8008d00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e01b      	b.n	8008d38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	daf2      	bge.n	8008cee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	019b      	lsls	r3, r3, #6
 8008d10:	f043 0220 	orr.w	r2, r3, #32
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	4a08      	ldr	r2, [pc, #32]	@ (8008d44 <USB_FlushTxFifo+0x64>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d901      	bls.n	8008d2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008d26:	2303      	movs	r3, #3
 8008d28:	e006      	b.n	8008d38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	f003 0320 	and.w	r3, r3, #32
 8008d32:	2b20      	cmp	r3, #32
 8008d34:	d0f0      	beq.n	8008d18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3714      	adds	r7, #20
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr
 8008d44:	00030d40 	.word	0x00030d40

08008d48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d50:	2300      	movs	r3, #0
 8008d52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	3301      	adds	r3, #1
 8008d58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	4a11      	ldr	r2, [pc, #68]	@ (8008da4 <USB_FlushRxFifo+0x5c>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d901      	bls.n	8008d66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008d62:	2303      	movs	r3, #3
 8008d64:	e018      	b.n	8008d98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	691b      	ldr	r3, [r3, #16]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	daf2      	bge.n	8008d54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2210      	movs	r2, #16
 8008d76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	4a08      	ldr	r2, [pc, #32]	@ (8008da4 <USB_FlushRxFifo+0x5c>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d901      	bls.n	8008d8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e006      	b.n	8008d98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	f003 0310 	and.w	r3, r3, #16
 8008d92:	2b10      	cmp	r3, #16
 8008d94:	d0f0      	beq.n	8008d78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr
 8008da4:	00030d40 	.word	0x00030d40

08008da8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b089      	sub	sp, #36	@ 0x24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	4611      	mov	r1, r2
 8008db4:	461a      	mov	r2, r3
 8008db6:	460b      	mov	r3, r1
 8008db8:	71fb      	strb	r3, [r7, #7]
 8008dba:	4613      	mov	r3, r2
 8008dbc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008dc6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d123      	bne.n	8008e16 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008dce:	88bb      	ldrh	r3, [r7, #4]
 8008dd0:	3303      	adds	r3, #3
 8008dd2:	089b      	lsrs	r3, r3, #2
 8008dd4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	61bb      	str	r3, [r7, #24]
 8008dda:	e018      	b.n	8008e0e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008ddc:	79fb      	ldrb	r3, [r7, #7]
 8008dde:	031a      	lsls	r2, r3, #12
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	4413      	add	r3, r2
 8008de4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008de8:	461a      	mov	r2, r3
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	3301      	adds	r3, #1
 8008df4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	3301      	adds	r3, #1
 8008e06:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	61bb      	str	r3, [r7, #24]
 8008e0e:	69ba      	ldr	r2, [r7, #24]
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d3e2      	bcc.n	8008ddc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3724      	adds	r7, #36	@ 0x24
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b08b      	sub	sp, #44	@ 0x2c
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008e3a:	88fb      	ldrh	r3, [r7, #6]
 8008e3c:	089b      	lsrs	r3, r3, #2
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008e42:	88fb      	ldrh	r3, [r7, #6]
 8008e44:	f003 0303 	and.w	r3, r3, #3
 8008e48:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	623b      	str	r3, [r7, #32]
 8008e4e:	e014      	b.n	8008e7a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e5a:	601a      	str	r2, [r3, #0]
    pDest++;
 8008e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e5e:	3301      	adds	r3, #1
 8008e60:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e64:	3301      	adds	r3, #1
 8008e66:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e70:	3301      	adds	r3, #1
 8008e72:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008e74:	6a3b      	ldr	r3, [r7, #32]
 8008e76:	3301      	adds	r3, #1
 8008e78:	623b      	str	r3, [r7, #32]
 8008e7a:	6a3a      	ldr	r2, [r7, #32]
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d3e6      	bcc.n	8008e50 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008e82:	8bfb      	ldrh	r3, [r7, #30]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d01e      	beq.n	8008ec6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e92:	461a      	mov	r2, r3
 8008e94:	f107 0310 	add.w	r3, r7, #16
 8008e98:	6812      	ldr	r2, [r2, #0]
 8008e9a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008e9c:	693a      	ldr	r2, [r7, #16]
 8008e9e:	6a3b      	ldr	r3, [r7, #32]
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	00db      	lsls	r3, r3, #3
 8008ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ea8:	b2da      	uxtb	r2, r3
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eac:	701a      	strb	r2, [r3, #0]
      i++;
 8008eae:	6a3b      	ldr	r3, [r7, #32]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	623b      	str	r3, [r7, #32]
      pDest++;
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008eba:	8bfb      	ldrh	r3, [r7, #30]
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008ec0:	8bfb      	ldrh	r3, [r7, #30]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1ea      	bne.n	8008e9c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	372c      	adds	r7, #44	@ 0x2c
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	695b      	ldr	r3, [r3, #20]
 8008ee0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	699b      	ldr	r3, [r3, #24]
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	4013      	ands	r3, r2
 8008eea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008eec:	68fb      	ldr	r3, [r7, #12]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3714      	adds	r7, #20
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr

08008efa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008efa:	b480      	push	{r7}
 8008efc:	b083      	sub	sp, #12
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	695b      	ldr	r3, [r3, #20]
 8008f06:	f003 0301 	and.w	r3, r3, #1
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	370c      	adds	r7, #12
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr
	...

08008f18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f20:	2300      	movs	r3, #0
 8008f22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	3301      	adds	r3, #1
 8008f28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	4a13      	ldr	r2, [pc, #76]	@ (8008f7c <USB_CoreReset+0x64>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d901      	bls.n	8008f36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f32:	2303      	movs	r3, #3
 8008f34:	e01b      	b.n	8008f6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	daf2      	bge.n	8008f24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	f043 0201 	orr.w	r2, r3, #1
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	3301      	adds	r3, #1
 8008f52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	4a09      	ldr	r2, [pc, #36]	@ (8008f7c <USB_CoreReset+0x64>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d901      	bls.n	8008f60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e006      	b.n	8008f6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	f003 0301 	and.w	r3, r3, #1
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d0f0      	beq.n	8008f4e <USB_CoreReset+0x36>

  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3714      	adds	r7, #20
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr
 8008f7a:	bf00      	nop
 8008f7c:	00030d40 	.word	0x00030d40

08008f80 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f80:	b084      	sub	sp, #16
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b086      	sub	sp, #24
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
 8008f8a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008f8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008f92:	2300      	movs	r3, #0
 8008f94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008faa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fb6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d018      	beq.n	8009008 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d10a      	bne.n	8008ff2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008fea:	f043 0304 	orr.w	r3, r3, #4
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	e014      	b.n	800901c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009000:	f023 0304 	bic.w	r3, r3, #4
 8009004:	6013      	str	r3, [r2, #0]
 8009006:	e009      	b.n	800901c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009016:	f023 0304 	bic.w	r3, r3, #4
 800901a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800901c:	2110      	movs	r1, #16
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f7ff fe5e 	bl	8008ce0 <USB_FlushTxFifo>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d001      	beq.n	800902e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7ff fe8a 	bl	8008d48 <USB_FlushRxFifo>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d001      	beq.n	800903e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800903e:	2300      	movs	r3, #0
 8009040:	613b      	str	r3, [r7, #16]
 8009042:	e015      	b.n	8009070 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	015a      	lsls	r2, r3, #5
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	4413      	add	r3, r2
 800904c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009050:	461a      	mov	r2, r3
 8009052:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009056:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	015a      	lsls	r2, r3, #5
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	4413      	add	r3, r2
 8009060:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009064:	461a      	mov	r2, r3
 8009066:	2300      	movs	r3, #0
 8009068:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	3301      	adds	r3, #1
 800906e:	613b      	str	r3, [r7, #16]
 8009070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009072:	693a      	ldr	r2, [r7, #16]
 8009074:	429a      	cmp	r2, r3
 8009076:	d3e5      	bcc.n	8009044 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009084:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800908a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00b      	beq.n	80090aa <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009098:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a13      	ldr	r2, [pc, #76]	@ (80090ec <USB_HostInit+0x16c>)
 800909e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a13      	ldr	r2, [pc, #76]	@ (80090f0 <USB_HostInit+0x170>)
 80090a4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80090a8:	e009      	b.n	80090be <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2280      	movs	r2, #128	@ 0x80
 80090ae:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a10      	ldr	r2, [pc, #64]	@ (80090f4 <USB_HostInit+0x174>)
 80090b4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a0f      	ldr	r2, [pc, #60]	@ (80090f8 <USB_HostInit+0x178>)
 80090ba:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80090be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d105      	bne.n	80090d0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	699b      	ldr	r3, [r3, #24]
 80090c8:	f043 0210 	orr.w	r2, r3, #16
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	699a      	ldr	r2, [r3, #24]
 80090d4:	4b09      	ldr	r3, [pc, #36]	@ (80090fc <USB_HostInit+0x17c>)
 80090d6:	4313      	orrs	r3, r2
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80090dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3718      	adds	r7, #24
 80090e2:	46bd      	mov	sp, r7
 80090e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090e8:	b004      	add	sp, #16
 80090ea:	4770      	bx	lr
 80090ec:	01000200 	.word	0x01000200
 80090f0:	00e00300 	.word	0x00e00300
 80090f4:	00600080 	.word	0x00600080
 80090f8:	004000e0 	.word	0x004000e0
 80090fc:	a3200008 	.word	0xa3200008

08009100 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009100:	b480      	push	{r7}
 8009102:	b085      	sub	sp, #20
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	460b      	mov	r3, r1
 800910a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800911e:	f023 0303 	bic.w	r3, r3, #3
 8009122:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	78fb      	ldrb	r3, [r7, #3]
 800912e:	f003 0303 	and.w	r3, r3, #3
 8009132:	68f9      	ldr	r1, [r7, #12]
 8009134:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009138:	4313      	orrs	r3, r2
 800913a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800913c:	78fb      	ldrb	r3, [r7, #3]
 800913e:	2b01      	cmp	r3, #1
 8009140:	d107      	bne.n	8009152 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009148:	461a      	mov	r2, r3
 800914a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800914e:	6053      	str	r3, [r2, #4]
 8009150:	e009      	b.n	8009166 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009152:	78fb      	ldrb	r3, [r7, #3]
 8009154:	2b02      	cmp	r3, #2
 8009156:	d106      	bne.n	8009166 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800915e:	461a      	mov	r2, r3
 8009160:	f241 7370 	movw	r3, #6000	@ 0x1770
 8009164:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009166:	2300      	movs	r3, #0
}
 8009168:	4618      	mov	r0, r3
 800916a:	3714      	adds	r7, #20
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009180:	2300      	movs	r3, #0
 8009182:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009194:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800919e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091a2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80091a4:	2064      	movs	r0, #100	@ 0x64
 80091a6:	f7fb f833 	bl	8004210 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	68fa      	ldr	r2, [r7, #12]
 80091ae:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80091b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091b6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80091b8:	200a      	movs	r0, #10
 80091ba:	f7fb f829 	bl	8004210 <HAL_Delay>

  return HAL_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	460b      	mov	r3, r1
 80091d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80091d8:	2300      	movs	r3, #0
 80091da:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80091ec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d109      	bne.n	800920c <USB_DriveVbus+0x44>
 80091f8:	78fb      	ldrb	r3, [r7, #3]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d106      	bne.n	800920c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009206:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800920a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009216:	d109      	bne.n	800922c <USB_DriveVbus+0x64>
 8009218:	78fb      	ldrb	r3, [r7, #3]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d106      	bne.n	800922c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009226:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800922a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3714      	adds	r7, #20
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr

0800923a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800923a:	b480      	push	{r7}
 800923c:	b085      	sub	sp, #20
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009246:	2300      	movs	r3, #0
 8009248:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	0c5b      	lsrs	r3, r3, #17
 8009258:	f003 0303 	and.w	r3, r3, #3
}
 800925c:	4618      	mov	r0, r3
 800925e:	3714      	adds	r7, #20
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009268:	b480      	push	{r7}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	b29b      	uxth	r3, r3
}
 800927e:	4618      	mov	r0, r3
 8009280:	3714      	adds	r7, #20
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
	...

0800928c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b088      	sub	sp, #32
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	4608      	mov	r0, r1
 8009296:	4611      	mov	r1, r2
 8009298:	461a      	mov	r2, r3
 800929a:	4603      	mov	r3, r0
 800929c:	70fb      	strb	r3, [r7, #3]
 800929e:	460b      	mov	r3, r1
 80092a0:	70bb      	strb	r3, [r7, #2]
 80092a2:	4613      	mov	r3, r2
 80092a4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80092a6:	2300      	movs	r3, #0
 80092a8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80092ae:	78fb      	ldrb	r3, [r7, #3]
 80092b0:	015a      	lsls	r2, r3, #5
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	4413      	add	r3, r2
 80092b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092ba:	461a      	mov	r2, r3
 80092bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80092c0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80092c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80092c6:	2b03      	cmp	r3, #3
 80092c8:	d87e      	bhi.n	80093c8 <USB_HC_Init+0x13c>
 80092ca:	a201      	add	r2, pc, #4	@ (adr r2, 80092d0 <USB_HC_Init+0x44>)
 80092cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d0:	080092e1 	.word	0x080092e1
 80092d4:	0800938b 	.word	0x0800938b
 80092d8:	080092e1 	.word	0x080092e1
 80092dc:	0800934d 	.word	0x0800934d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80092e0:	78fb      	ldrb	r3, [r7, #3]
 80092e2:	015a      	lsls	r2, r3, #5
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	4413      	add	r3, r2
 80092e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092ec:	461a      	mov	r2, r3
 80092ee:	f240 439d 	movw	r3, #1181	@ 0x49d
 80092f2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80092f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	da10      	bge.n	800931e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80092fc:	78fb      	ldrb	r3, [r7, #3]
 80092fe:	015a      	lsls	r2, r3, #5
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	4413      	add	r3, r2
 8009304:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	78fa      	ldrb	r2, [r7, #3]
 800930c:	0151      	lsls	r1, r2, #5
 800930e:	693a      	ldr	r2, [r7, #16]
 8009310:	440a      	add	r2, r1
 8009312:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009316:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800931a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800931c:	e057      	b.n	80093ce <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009326:	2b00      	cmp	r3, #0
 8009328:	d051      	beq.n	80093ce <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800932a:	78fb      	ldrb	r3, [r7, #3]
 800932c:	015a      	lsls	r2, r3, #5
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	4413      	add	r3, r2
 8009332:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	78fa      	ldrb	r2, [r7, #3]
 800933a:	0151      	lsls	r1, r2, #5
 800933c:	693a      	ldr	r2, [r7, #16]
 800933e:	440a      	add	r2, r1
 8009340:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009344:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009348:	60d3      	str	r3, [r2, #12]
      break;
 800934a:	e040      	b.n	80093ce <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800934c:	78fb      	ldrb	r3, [r7, #3]
 800934e:	015a      	lsls	r2, r3, #5
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	4413      	add	r3, r2
 8009354:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009358:	461a      	mov	r2, r3
 800935a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800935e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009360:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009364:	2b00      	cmp	r3, #0
 8009366:	da34      	bge.n	80093d2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009368:	78fb      	ldrb	r3, [r7, #3]
 800936a:	015a      	lsls	r2, r3, #5
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	4413      	add	r3, r2
 8009370:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	78fa      	ldrb	r2, [r7, #3]
 8009378:	0151      	lsls	r1, r2, #5
 800937a:	693a      	ldr	r2, [r7, #16]
 800937c:	440a      	add	r2, r1
 800937e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009382:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009386:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009388:	e023      	b.n	80093d2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800938a:	78fb      	ldrb	r3, [r7, #3]
 800938c:	015a      	lsls	r2, r3, #5
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	4413      	add	r3, r2
 8009392:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009396:	461a      	mov	r2, r3
 8009398:	f240 2325 	movw	r3, #549	@ 0x225
 800939c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800939e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	da17      	bge.n	80093d6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80093a6:	78fb      	ldrb	r3, [r7, #3]
 80093a8:	015a      	lsls	r2, r3, #5
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	4413      	add	r3, r2
 80093ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	78fa      	ldrb	r2, [r7, #3]
 80093b6:	0151      	lsls	r1, r2, #5
 80093b8:	693a      	ldr	r2, [r7, #16]
 80093ba:	440a      	add	r2, r1
 80093bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80093c0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80093c4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80093c6:	e006      	b.n	80093d6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	77fb      	strb	r3, [r7, #31]
      break;
 80093cc:	e004      	b.n	80093d8 <USB_HC_Init+0x14c>
      break;
 80093ce:	bf00      	nop
 80093d0:	e002      	b.n	80093d8 <USB_HC_Init+0x14c>
      break;
 80093d2:	bf00      	nop
 80093d4:	e000      	b.n	80093d8 <USB_HC_Init+0x14c>
      break;
 80093d6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80093d8:	78fb      	ldrb	r3, [r7, #3]
 80093da:	015a      	lsls	r2, r3, #5
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	4413      	add	r3, r2
 80093e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	78fa      	ldrb	r2, [r7, #3]
 80093e8:	0151      	lsls	r1, r2, #5
 80093ea:	693a      	ldr	r2, [r7, #16]
 80093ec:	440a      	add	r2, r1
 80093ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80093f2:	f043 0302 	orr.w	r3, r3, #2
 80093f6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80093fe:	699a      	ldr	r2, [r3, #24]
 8009400:	78fb      	ldrb	r3, [r7, #3]
 8009402:	f003 030f 	and.w	r3, r3, #15
 8009406:	2101      	movs	r1, #1
 8009408:	fa01 f303 	lsl.w	r3, r1, r3
 800940c:	6939      	ldr	r1, [r7, #16]
 800940e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009412:	4313      	orrs	r3, r2
 8009414:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009422:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009426:	2b00      	cmp	r3, #0
 8009428:	da03      	bge.n	8009432 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800942a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800942e:	61bb      	str	r3, [r7, #24]
 8009430:	e001      	b.n	8009436 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8009432:	2300      	movs	r3, #0
 8009434:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7ff feff 	bl	800923a <USB_GetHostSpeed>
 800943c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800943e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009442:	2b02      	cmp	r3, #2
 8009444:	d106      	bne.n	8009454 <USB_HC_Init+0x1c8>
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2b02      	cmp	r3, #2
 800944a:	d003      	beq.n	8009454 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800944c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009450:	617b      	str	r3, [r7, #20]
 8009452:	e001      	b.n	8009458 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009454:	2300      	movs	r3, #0
 8009456:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009458:	787b      	ldrb	r3, [r7, #1]
 800945a:	059b      	lsls	r3, r3, #22
 800945c:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009460:	78bb      	ldrb	r3, [r7, #2]
 8009462:	02db      	lsls	r3, r3, #11
 8009464:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009468:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800946a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800946e:	049b      	lsls	r3, r3, #18
 8009470:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009474:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009476:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009478:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800947c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009482:	78fb      	ldrb	r3, [r7, #3]
 8009484:	0159      	lsls	r1, r3, #5
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	440b      	add	r3, r1
 800948a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800948e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009494:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009496:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800949a:	2b03      	cmp	r3, #3
 800949c:	d003      	beq.n	80094a6 <USB_HC_Init+0x21a>
 800949e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d10f      	bne.n	80094c6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80094a6:	78fb      	ldrb	r3, [r7, #3]
 80094a8:	015a      	lsls	r2, r3, #5
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	4413      	add	r3, r2
 80094ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	78fa      	ldrb	r2, [r7, #3]
 80094b6:	0151      	lsls	r1, r2, #5
 80094b8:	693a      	ldr	r2, [r7, #16]
 80094ba:	440a      	add	r2, r1
 80094bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80094c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80094c4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80094c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3720      	adds	r7, #32
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b08c      	sub	sp, #48	@ 0x30
 80094d4:	af02      	add	r7, sp, #8
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	4613      	mov	r3, r2
 80094dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	785b      	ldrb	r3, [r3, #1]
 80094e6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80094e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80094ec:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d02d      	beq.n	8009556 <USB_HC_StartXfer+0x86>
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	791b      	ldrb	r3, [r3, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d129      	bne.n	8009556 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009502:	79fb      	ldrb	r3, [r7, #7]
 8009504:	2b01      	cmp	r3, #1
 8009506:	d117      	bne.n	8009538 <USB_HC_StartXfer+0x68>
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	79db      	ldrb	r3, [r3, #7]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d003      	beq.n	8009518 <USB_HC_StartXfer+0x48>
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	79db      	ldrb	r3, [r3, #7]
 8009514:	2b02      	cmp	r3, #2
 8009516:	d10f      	bne.n	8009538 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	015a      	lsls	r2, r3, #5
 800951c:	6a3b      	ldr	r3, [r7, #32]
 800951e:	4413      	add	r3, r2
 8009520:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	69fa      	ldr	r2, [r7, #28]
 8009528:	0151      	lsls	r1, r2, #5
 800952a:	6a3a      	ldr	r2, [r7, #32]
 800952c:	440a      	add	r2, r1
 800952e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009536:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009538:	79fb      	ldrb	r3, [r7, #7]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10b      	bne.n	8009556 <USB_HC_StartXfer+0x86>
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	795b      	ldrb	r3, [r3, #5]
 8009542:	2b01      	cmp	r3, #1
 8009544:	d107      	bne.n	8009556 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	785b      	ldrb	r3, [r3, #1]
 800954a:	4619      	mov	r1, r3
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f000 fa0f 	bl	8009970 <USB_DoPing>
      return HAL_OK;
 8009552:	2300      	movs	r3, #0
 8009554:	e0f8      	b.n	8009748 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	695b      	ldr	r3, [r3, #20]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d018      	beq.n	8009590 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	695b      	ldr	r3, [r3, #20]
 8009562:	68ba      	ldr	r2, [r7, #8]
 8009564:	8912      	ldrh	r2, [r2, #8]
 8009566:	4413      	add	r3, r2
 8009568:	3b01      	subs	r3, #1
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	8912      	ldrh	r2, [r2, #8]
 800956e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009572:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (num_packets > max_hc_pkt_count)
 8009574:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009576:	8b7b      	ldrh	r3, [r7, #26]
 8009578:	429a      	cmp	r2, r3
 800957a:	d90b      	bls.n	8009594 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800957c:	8b7b      	ldrh	r3, [r7, #26]
 800957e:	84fb      	strh	r3, [r7, #38]	@ 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009580:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	8912      	ldrh	r2, [r2, #8]
 8009586:	fb03 f202 	mul.w	r2, r3, r2
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	611a      	str	r2, [r3, #16]
 800958e:	e001      	b.n	8009594 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009590:	2301      	movs	r3, #1
 8009592:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	78db      	ldrb	r3, [r3, #3]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d007      	beq.n	80095ac <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800959c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	8912      	ldrh	r2, [r2, #8]
 80095a2:	fb03 f202 	mul.w	r2, r3, r2
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	611a      	str	r2, [r3, #16]
 80095aa:	e003      	b.n	80095b4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	695a      	ldr	r2, [r3, #20]
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80095bc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80095be:	04d9      	lsls	r1, r3, #19
 80095c0:	4b63      	ldr	r3, [pc, #396]	@ (8009750 <USB_HC_StartXfer+0x280>)
 80095c2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80095c4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	7a9b      	ldrb	r3, [r3, #10]
 80095ca:	075b      	lsls	r3, r3, #29
 80095cc:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80095d0:	69f9      	ldr	r1, [r7, #28]
 80095d2:	0148      	lsls	r0, r1, #5
 80095d4:	6a39      	ldr	r1, [r7, #32]
 80095d6:	4401      	add	r1, r0
 80095d8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80095dc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80095de:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80095e0:	79fb      	ldrb	r3, [r7, #7]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d009      	beq.n	80095fa <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	68d9      	ldr	r1, [r3, #12]
 80095ea:	69fb      	ldr	r3, [r7, #28]
 80095ec:	015a      	lsls	r2, r3, #5
 80095ee:	6a3b      	ldr	r3, [r7, #32]
 80095f0:	4413      	add	r3, r2
 80095f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095f6:	460a      	mov	r2, r1
 80095f8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80095fa:	6a3b      	ldr	r3, [r7, #32]
 80095fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	f003 0301 	and.w	r3, r3, #1
 8009606:	2b00      	cmp	r3, #0
 8009608:	bf0c      	ite	eq
 800960a:	2301      	moveq	r3, #1
 800960c:	2300      	movne	r3, #0
 800960e:	b2db      	uxtb	r3, r3
 8009610:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	015a      	lsls	r2, r3, #5
 8009616:	6a3b      	ldr	r3, [r7, #32]
 8009618:	4413      	add	r3, r2
 800961a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	69fa      	ldr	r2, [r7, #28]
 8009622:	0151      	lsls	r1, r2, #5
 8009624:	6a3a      	ldr	r2, [r7, #32]
 8009626:	440a      	add	r2, r1
 8009628:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800962c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009630:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009632:	69fb      	ldr	r3, [r7, #28]
 8009634:	015a      	lsls	r2, r3, #5
 8009636:	6a3b      	ldr	r3, [r7, #32]
 8009638:	4413      	add	r3, r2
 800963a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	7e7b      	ldrb	r3, [r7, #25]
 8009642:	075b      	lsls	r3, r3, #29
 8009644:	69f9      	ldr	r1, [r7, #28]
 8009646:	0148      	lsls	r0, r1, #5
 8009648:	6a39      	ldr	r1, [r7, #32]
 800964a:	4401      	add	r1, r0
 800964c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8009650:	4313      	orrs	r3, r2
 8009652:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	015a      	lsls	r2, r3, #5
 8009658:	6a3b      	ldr	r3, [r7, #32]
 800965a:	4413      	add	r3, r2
 800965c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800966a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	78db      	ldrb	r3, [r3, #3]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d004      	beq.n	800967e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800967a:	613b      	str	r3, [r7, #16]
 800967c:	e003      	b.n	8009686 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009684:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800968c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	015a      	lsls	r2, r3, #5
 8009692:	6a3b      	ldr	r3, [r7, #32]
 8009694:	4413      	add	r3, r2
 8009696:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800969a:	461a      	mov	r2, r3
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80096a0:	79fb      	ldrb	r3, [r7, #7]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d001      	beq.n	80096aa <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80096a6:	2300      	movs	r3, #0
 80096a8:	e04e      	b.n	8009748 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	78db      	ldrb	r3, [r3, #3]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d149      	bne.n	8009746 <USB_HC_StartXfer+0x276>
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	695b      	ldr	r3, [r3, #20]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d045      	beq.n	8009746 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	79db      	ldrb	r3, [r3, #7]
 80096be:	2b03      	cmp	r3, #3
 80096c0:	d830      	bhi.n	8009724 <USB_HC_StartXfer+0x254>
 80096c2:	a201      	add	r2, pc, #4	@ (adr r2, 80096c8 <USB_HC_StartXfer+0x1f8>)
 80096c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c8:	080096d9 	.word	0x080096d9
 80096cc:	080096fd 	.word	0x080096fd
 80096d0:	080096d9 	.word	0x080096d9
 80096d4:	080096fd 	.word	0x080096fd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	695b      	ldr	r3, [r3, #20]
 80096dc:	3303      	adds	r3, #3
 80096de:	089b      	lsrs	r3, r3, #2
 80096e0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80096e2:	8afa      	ldrh	r2, [r7, #22]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d91c      	bls.n	8009728 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	699b      	ldr	r3, [r3, #24]
 80096f2:	f043 0220 	orr.w	r2, r3, #32
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	619a      	str	r2, [r3, #24]
        }
        break;
 80096fa:	e015      	b.n	8009728 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	695b      	ldr	r3, [r3, #20]
 8009700:	3303      	adds	r3, #3
 8009702:	089b      	lsrs	r3, r3, #2
 8009704:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009706:	8afa      	ldrh	r2, [r7, #22]
 8009708:	6a3b      	ldr	r3, [r7, #32]
 800970a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800970e:	691b      	ldr	r3, [r3, #16]
 8009710:	b29b      	uxth	r3, r3
 8009712:	429a      	cmp	r2, r3
 8009714:	d90a      	bls.n	800972c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	619a      	str	r2, [r3, #24]
        }
        break;
 8009722:	e003      	b.n	800972c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009724:	bf00      	nop
 8009726:	e002      	b.n	800972e <USB_HC_StartXfer+0x25e>
        break;
 8009728:	bf00      	nop
 800972a:	e000      	b.n	800972e <USB_HC_StartXfer+0x25e>
        break;
 800972c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	68d9      	ldr	r1, [r3, #12]
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	785a      	ldrb	r2, [r3, #1]
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	695b      	ldr	r3, [r3, #20]
 800973a:	b29b      	uxth	r3, r3
 800973c:	2000      	movs	r0, #0
 800973e:	9000      	str	r0, [sp, #0]
 8009740:	68f8      	ldr	r0, [r7, #12]
 8009742:	f7ff fb31 	bl	8008da8 <USB_WritePacket>
  }

  return HAL_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	3728      	adds	r7, #40	@ 0x28
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	1ff80000 	.word	0x1ff80000

08009754 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009754:	b480      	push	{r7}
 8009756:	b085      	sub	sp, #20
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009766:	695b      	ldr	r3, [r3, #20]
 8009768:	b29b      	uxth	r3, r3
}
 800976a:	4618      	mov	r0, r3
 800976c:	3714      	adds	r7, #20
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr

08009776 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009776:	b480      	push	{r7}
 8009778:	b089      	sub	sp, #36	@ 0x24
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
 800977e:	460b      	mov	r3, r1
 8009780:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009786:	78fb      	ldrb	r3, [r7, #3]
 8009788:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800978a:	2300      	movs	r3, #0
 800978c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	015a      	lsls	r2, r3, #5
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	4413      	add	r3, r2
 8009796:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	0c9b      	lsrs	r3, r3, #18
 800979e:	f003 0303 	and.w	r3, r3, #3
 80097a2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	015a      	lsls	r2, r3, #5
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	4413      	add	r3, r2
 80097ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	0fdb      	lsrs	r3, r3, #31
 80097b4:	f003 0301 	and.w	r3, r3, #1
 80097b8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	f003 0320 	and.w	r3, r3, #32
 80097c2:	2b20      	cmp	r3, #32
 80097c4:	d104      	bne.n	80097d0 <USB_HC_Halt+0x5a>
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d101      	bne.n	80097d0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80097cc:	2300      	movs	r3, #0
 80097ce:	e0c8      	b.n	8009962 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d002      	beq.n	80097dc <USB_HC_Halt+0x66>
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	2b02      	cmp	r3, #2
 80097da:	d163      	bne.n	80098a4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	015a      	lsls	r2, r3, #5
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	4413      	add	r3, r2
 80097e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	69ba      	ldr	r2, [r7, #24]
 80097ec:	0151      	lsls	r1, r2, #5
 80097ee:	69fa      	ldr	r2, [r7, #28]
 80097f0:	440a      	add	r2, r1
 80097f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80097fa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	f003 0320 	and.w	r3, r3, #32
 8009804:	2b00      	cmp	r3, #0
 8009806:	f040 80ab 	bne.w	8009960 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800980e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009812:	2b00      	cmp	r3, #0
 8009814:	d133      	bne.n	800987e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	015a      	lsls	r2, r3, #5
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	4413      	add	r3, r2
 800981e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	69ba      	ldr	r2, [r7, #24]
 8009826:	0151      	lsls	r1, r2, #5
 8009828:	69fa      	ldr	r2, [r7, #28]
 800982a:	440a      	add	r2, r1
 800982c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009830:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009834:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	015a      	lsls	r2, r3, #5
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	4413      	add	r3, r2
 800983e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	69ba      	ldr	r2, [r7, #24]
 8009846:	0151      	lsls	r1, r2, #5
 8009848:	69fa      	ldr	r2, [r7, #28]
 800984a:	440a      	add	r2, r1
 800984c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009850:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009854:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	3301      	adds	r3, #1
 800985a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009862:	d81d      	bhi.n	80098a0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	015a      	lsls	r2, r3, #5
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	4413      	add	r3, r2
 800986c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009876:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800987a:	d0ec      	beq.n	8009856 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800987c:	e070      	b.n	8009960 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	015a      	lsls	r2, r3, #5
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	4413      	add	r3, r2
 8009886:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	69ba      	ldr	r2, [r7, #24]
 800988e:	0151      	lsls	r1, r2, #5
 8009890:	69fa      	ldr	r2, [r7, #28]
 8009892:	440a      	add	r2, r1
 8009894:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009898:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800989c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800989e:	e05f      	b.n	8009960 <USB_HC_Halt+0x1ea>
            break;
 80098a0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80098a2:	e05d      	b.n	8009960 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	015a      	lsls	r2, r3, #5
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	4413      	add	r3, r2
 80098ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	69ba      	ldr	r2, [r7, #24]
 80098b4:	0151      	lsls	r1, r2, #5
 80098b6:	69fa      	ldr	r2, [r7, #28]
 80098b8:	440a      	add	r2, r1
 80098ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80098be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80098c2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d133      	bne.n	800993c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	69ba      	ldr	r2, [r7, #24]
 80098e4:	0151      	lsls	r1, r2, #5
 80098e6:	69fa      	ldr	r2, [r7, #28]
 80098e8:	440a      	add	r2, r1
 80098ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80098ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80098f2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	015a      	lsls	r2, r3, #5
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	4413      	add	r3, r2
 80098fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	69ba      	ldr	r2, [r7, #24]
 8009904:	0151      	lsls	r1, r2, #5
 8009906:	69fa      	ldr	r2, [r7, #28]
 8009908:	440a      	add	r2, r1
 800990a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800990e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009912:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	3301      	adds	r3, #1
 8009918:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009920:	d81d      	bhi.n	800995e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009922:	69bb      	ldr	r3, [r7, #24]
 8009924:	015a      	lsls	r2, r3, #5
 8009926:	69fb      	ldr	r3, [r7, #28]
 8009928:	4413      	add	r3, r2
 800992a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009934:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009938:	d0ec      	beq.n	8009914 <USB_HC_Halt+0x19e>
 800993a:	e011      	b.n	8009960 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	015a      	lsls	r2, r3, #5
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	4413      	add	r3, r2
 8009944:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	69ba      	ldr	r2, [r7, #24]
 800994c:	0151      	lsls	r1, r2, #5
 800994e:	69fa      	ldr	r2, [r7, #28]
 8009950:	440a      	add	r2, r1
 8009952:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009956:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800995a:	6013      	str	r3, [r2, #0]
 800995c:	e000      	b.n	8009960 <USB_HC_Halt+0x1ea>
          break;
 800995e:	bf00      	nop
    }
  }

  return HAL_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3724      	adds	r7, #36	@ 0x24
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
	...

08009970 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009970:	b480      	push	{r7}
 8009972:	b087      	sub	sp, #28
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	460b      	mov	r3, r1
 800997a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009980:	78fb      	ldrb	r3, [r7, #3]
 8009982:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009984:	2301      	movs	r3, #1
 8009986:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	04da      	lsls	r2, r3, #19
 800998c:	4b15      	ldr	r3, [pc, #84]	@ (80099e4 <USB_DoPing+0x74>)
 800998e:	4013      	ands	r3, r2
 8009990:	693a      	ldr	r2, [r7, #16]
 8009992:	0151      	lsls	r1, r2, #5
 8009994:	697a      	ldr	r2, [r7, #20]
 8009996:	440a      	add	r2, r1
 8009998:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800999c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80099a0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	015a      	lsls	r2, r3, #5
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	4413      	add	r3, r2
 80099aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80099b8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80099c0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	015a      	lsls	r2, r3, #5
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	4413      	add	r3, r2
 80099ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099ce:	461a      	mov	r2, r3
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	371c      	adds	r7, #28
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	1ff80000 	.word	0x1ff80000

080099e8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b088      	sub	sp, #32
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80099f0:	2300      	movs	r3, #0
 80099f2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80099f8:	2300      	movs	r3, #0
 80099fa:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f7ff f911 	bl	8008c24 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009a02:	2110      	movs	r1, #16
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f7ff f96b 	bl	8008ce0 <USB_FlushTxFifo>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d001      	beq.n	8009a14 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f7ff f997 	bl	8008d48 <USB_FlushRxFifo>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d001      	beq.n	8009a24 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009a24:	2300      	movs	r3, #0
 8009a26:	61bb      	str	r3, [r7, #24]
 8009a28:	e01f      	b.n	8009a6a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	015a      	lsls	r2, r3, #5
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	4413      	add	r3, r2
 8009a32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a40:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009a48:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a50:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	015a      	lsls	r2, r3, #5
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	4413      	add	r3, r2
 8009a5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a5e:	461a      	mov	r2, r3
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	3301      	adds	r3, #1
 8009a68:	61bb      	str	r3, [r7, #24]
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	2b0f      	cmp	r3, #15
 8009a6e:	d9dc      	bls.n	8009a2a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009a70:	2300      	movs	r3, #0
 8009a72:	61bb      	str	r3, [r7, #24]
 8009a74:	e034      	b.n	8009ae0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	015a      	lsls	r2, r3, #5
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a8c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009a94:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a9c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009a9e:	69bb      	ldr	r3, [r7, #24]
 8009aa0:	015a      	lsls	r2, r3, #5
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009aaa:	461a      	mov	r2, r3
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009abc:	d80c      	bhi.n	8009ad8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	015a      	lsls	r2, r3, #5
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ad0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ad4:	d0ec      	beq.n	8009ab0 <USB_StopHost+0xc8>
 8009ad6:	e000      	b.n	8009ada <USB_StopHost+0xf2>
        break;
 8009ad8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	3301      	adds	r3, #1
 8009ade:	61bb      	str	r3, [r7, #24]
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	2b0f      	cmp	r3, #15
 8009ae4:	d9c7      	bls.n	8009a76 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009aec:	461a      	mov	r2, r3
 8009aee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009af2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009afa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7ff f880 	bl	8008c02 <USB_EnableGlobalInt>

  return ret;
 8009b02:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3720      	adds	r7, #32
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009b0c:	b590      	push	{r4, r7, lr}
 8009b0e:	b089      	sub	sp, #36	@ 0x24
 8009b10:	af04      	add	r7, sp, #16
 8009b12:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009b14:	2301      	movs	r3, #1
 8009b16:	2202      	movs	r2, #2
 8009b18:	2102      	movs	r1, #2
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 fc66 	bl	800a3ec <USBH_FindInterface>
 8009b20:	4603      	mov	r3, r0
 8009b22:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009b24:	7bfb      	ldrb	r3, [r7, #15]
 8009b26:	2bff      	cmp	r3, #255	@ 0xff
 8009b28:	d002      	beq.n	8009b30 <USBH_CDC_InterfaceInit+0x24>
 8009b2a:	7bfb      	ldrb	r3, [r7, #15]
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d901      	bls.n	8009b34 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009b30:	2302      	movs	r3, #2
 8009b32:	e13d      	b.n	8009db0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009b34:	7bfb      	ldrb	r3, [r7, #15]
 8009b36:	4619      	mov	r1, r3
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 fc3b 	bl	800a3b4 <USBH_SelectInterface>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009b42:	7bbb      	ldrb	r3, [r7, #14]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d001      	beq.n	8009b4c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009b48:	2302      	movs	r3, #2
 8009b4a:	e131      	b.n	8009db0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8009b52:	2050      	movs	r0, #80	@ 0x50
 8009b54:	f002 fac0 	bl	800c0d8 <malloc>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b62:	69db      	ldr	r3, [r3, #28]
 8009b64:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d101      	bne.n	8009b70 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	e11f      	b.n	8009db0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009b70:	2250      	movs	r2, #80	@ 0x50
 8009b72:	2100      	movs	r1, #0
 8009b74:	68b8      	ldr	r0, [r7, #8]
 8009b76:	f004 fa7b 	bl	800e070 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009b7a:	7bfb      	ldrb	r3, [r7, #15]
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	211a      	movs	r1, #26
 8009b80:	fb01 f303 	mul.w	r3, r1, r3
 8009b84:	4413      	add	r3, r2
 8009b86:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	b25b      	sxtb	r3, r3
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	da15      	bge.n	8009bbe <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009b92:	7bfb      	ldrb	r3, [r7, #15]
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	211a      	movs	r1, #26
 8009b98:	fb01 f303 	mul.w	r3, r1, r3
 8009b9c:	4413      	add	r3, r2
 8009b9e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009ba2:	781a      	ldrb	r2, [r3, #0]
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009ba8:	7bfb      	ldrb	r3, [r7, #15]
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	211a      	movs	r1, #26
 8009bae:	fb01 f303 	mul.w	r3, r1, r3
 8009bb2:	4413      	add	r3, r2
 8009bb4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009bb8:	881a      	ldrh	r2, [r3, #0]
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	785b      	ldrb	r3, [r3, #1]
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f001 ff1c 	bl	800ba02 <USBH_AllocPipe>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	461a      	mov	r2, r3
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	7819      	ldrb	r1, [r3, #0]
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	7858      	ldrb	r0, [r3, #1]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	8952      	ldrh	r2, [r2, #10]
 8009bea:	9202      	str	r2, [sp, #8]
 8009bec:	2203      	movs	r2, #3
 8009bee:	9201      	str	r2, [sp, #4]
 8009bf0:	9300      	str	r3, [sp, #0]
 8009bf2:	4623      	mov	r3, r4
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f001 fed4 	bl	800b9a4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	2200      	movs	r2, #0
 8009c02:	4619      	mov	r1, r3
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f002 f9e3 	bl	800bfd0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	210a      	movs	r1, #10
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 fbeb 	bl	800a3ec <USBH_FindInterface>
 8009c16:	4603      	mov	r3, r0
 8009c18:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009c1a:	7bfb      	ldrb	r3, [r7, #15]
 8009c1c:	2bff      	cmp	r3, #255	@ 0xff
 8009c1e:	d002      	beq.n	8009c26 <USBH_CDC_InterfaceInit+0x11a>
 8009c20:	7bfb      	ldrb	r3, [r7, #15]
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d901      	bls.n	8009c2a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009c26:	2302      	movs	r3, #2
 8009c28:	e0c2      	b.n	8009db0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009c2a:	7bfb      	ldrb	r3, [r7, #15]
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	211a      	movs	r1, #26
 8009c30:	fb01 f303 	mul.w	r3, r1, r3
 8009c34:	4413      	add	r3, r2
 8009c36:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	b25b      	sxtb	r3, r3
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	da16      	bge.n	8009c70 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009c42:	7bfb      	ldrb	r3, [r7, #15]
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	211a      	movs	r1, #26
 8009c48:	fb01 f303 	mul.w	r3, r1, r3
 8009c4c:	4413      	add	r3, r2
 8009c4e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009c52:	781a      	ldrb	r2, [r3, #0]
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009c58:	7bfb      	ldrb	r3, [r7, #15]
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	211a      	movs	r1, #26
 8009c5e:	fb01 f303 	mul.w	r3, r1, r3
 8009c62:	4413      	add	r3, r2
 8009c64:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009c68:	881a      	ldrh	r2, [r3, #0]
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	835a      	strh	r2, [r3, #26]
 8009c6e:	e015      	b.n	8009c9c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009c70:	7bfb      	ldrb	r3, [r7, #15]
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	211a      	movs	r1, #26
 8009c76:	fb01 f303 	mul.w	r3, r1, r3
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009c80:	781a      	ldrb	r2, [r3, #0]
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009c86:	7bfb      	ldrb	r3, [r7, #15]
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	211a      	movs	r1, #26
 8009c8c:	fb01 f303 	mul.w	r3, r1, r3
 8009c90:	4413      	add	r3, r2
 8009c92:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009c96:	881a      	ldrh	r2, [r3, #0]
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009c9c:	7bfb      	ldrb	r3, [r7, #15]
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	211a      	movs	r1, #26
 8009ca2:	fb01 f303 	mul.w	r3, r1, r3
 8009ca6:	4413      	add	r3, r2
 8009ca8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	b25b      	sxtb	r3, r3
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	da16      	bge.n	8009ce2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009cb4:	7bfb      	ldrb	r3, [r7, #15]
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	211a      	movs	r1, #26
 8009cba:	fb01 f303 	mul.w	r3, r1, r3
 8009cbe:	4413      	add	r3, r2
 8009cc0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009cc4:	781a      	ldrb	r2, [r3, #0]
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009cca:	7bfb      	ldrb	r3, [r7, #15]
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	211a      	movs	r1, #26
 8009cd0:	fb01 f303 	mul.w	r3, r1, r3
 8009cd4:	4413      	add	r3, r2
 8009cd6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009cda:	881a      	ldrh	r2, [r3, #0]
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	835a      	strh	r2, [r3, #26]
 8009ce0:	e015      	b.n	8009d0e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009ce2:	7bfb      	ldrb	r3, [r7, #15]
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	211a      	movs	r1, #26
 8009ce8:	fb01 f303 	mul.w	r3, r1, r3
 8009cec:	4413      	add	r3, r2
 8009cee:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009cf2:	781a      	ldrb	r2, [r3, #0]
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009cf8:	7bfb      	ldrb	r3, [r7, #15]
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	211a      	movs	r1, #26
 8009cfe:	fb01 f303 	mul.w	r3, r1, r3
 8009d02:	4413      	add	r3, r2
 8009d04:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009d08:	881a      	ldrh	r2, [r3, #0]
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	7b9b      	ldrb	r3, [r3, #14]
 8009d12:	4619      	mov	r1, r3
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f001 fe74 	bl	800ba02 <USBH_AllocPipe>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	7bdb      	ldrb	r3, [r3, #15]
 8009d26:	4619      	mov	r1, r3
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f001 fe6a 	bl	800ba02 <USBH_AllocPipe>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	461a      	mov	r2, r3
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	7b59      	ldrb	r1, [r3, #13]
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	7b98      	ldrb	r0, [r3, #14]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009d4a:	68ba      	ldr	r2, [r7, #8]
 8009d4c:	8b12      	ldrh	r2, [r2, #24]
 8009d4e:	9202      	str	r2, [sp, #8]
 8009d50:	2202      	movs	r2, #2
 8009d52:	9201      	str	r2, [sp, #4]
 8009d54:	9300      	str	r3, [sp, #0]
 8009d56:	4623      	mov	r3, r4
 8009d58:	4602      	mov	r2, r0
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f001 fe22 	bl	800b9a4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	7b19      	ldrb	r1, [r3, #12]
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	7bd8      	ldrb	r0, [r3, #15]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	8b52      	ldrh	r2, [r2, #26]
 8009d78:	9202      	str	r2, [sp, #8]
 8009d7a:	2202      	movs	r2, #2
 8009d7c:	9201      	str	r2, [sp, #4]
 8009d7e:	9300      	str	r3, [sp, #0]
 8009d80:	4623      	mov	r3, r4
 8009d82:	4602      	mov	r2, r0
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f001 fe0d 	bl	800b9a4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	7b5b      	ldrb	r3, [r3, #13]
 8009d96:	2200      	movs	r2, #0
 8009d98:	4619      	mov	r1, r3
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f002 f918 	bl	800bfd0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	7b1b      	ldrb	r3, [r3, #12]
 8009da4:	2200      	movs	r2, #0
 8009da6:	4619      	mov	r1, r3
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f002 f911 	bl	800bfd0 <USBH_LL_SetToggle>

  return USBH_OK;
 8009dae:	2300      	movs	r3, #0
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3714      	adds	r7, #20
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd90      	pop	{r4, r7, pc}

08009db8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009dc6:	69db      	ldr	r3, [r3, #28]
 8009dc8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00e      	beq.n	8009df0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f001 fe02 	bl	800b9e2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	4619      	mov	r1, r3
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f001 fe2d 	bl	800ba44 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2200      	movs	r2, #0
 8009dee:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	7b1b      	ldrb	r3, [r3, #12]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d00e      	beq.n	8009e16 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	7b1b      	ldrb	r3, [r3, #12]
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f001 fdef 	bl	800b9e2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	7b1b      	ldrb	r3, [r3, #12]
 8009e08:	4619      	mov	r1, r3
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f001 fe1a 	bl	800ba44 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2200      	movs	r2, #0
 8009e14:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	7b5b      	ldrb	r3, [r3, #13]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00e      	beq.n	8009e3c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	7b5b      	ldrb	r3, [r3, #13]
 8009e22:	4619      	mov	r1, r3
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f001 fddc 	bl	800b9e2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	7b5b      	ldrb	r3, [r3, #13]
 8009e2e:	4619      	mov	r1, r3
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f001 fe07 	bl	800ba44 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e42:	69db      	ldr	r3, [r3, #28]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d00b      	beq.n	8009e60 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e4e:	69db      	ldr	r3, [r3, #28]
 8009e50:	4618      	mov	r0, r3
 8009e52:	f002 f949 	bl	800c0e8 <free>
    phost->pActiveClass->pData = 0U;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	b084      	sub	sp, #16
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e78:	69db      	ldr	r3, [r3, #28]
 8009e7a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	3340      	adds	r3, #64	@ 0x40
 8009e80:	4619      	mov	r1, r3
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 f8b1 	bl	8009fea <GetLineCoding>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009e8c:	7afb      	ldrb	r3, [r7, #11]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d105      	bne.n	8009e9e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009e98:	2102      	movs	r1, #2
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009e9e:	7afb      	ldrb	r3, [r7, #11]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ebe:	69db      	ldr	r3, [r3, #28]
 8009ec0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009ec8:	2b04      	cmp	r3, #4
 8009eca:	d877      	bhi.n	8009fbc <USBH_CDC_Process+0x114>
 8009ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8009ed4 <USBH_CDC_Process+0x2c>)
 8009ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed2:	bf00      	nop
 8009ed4:	08009ee9 	.word	0x08009ee9
 8009ed8:	08009eef 	.word	0x08009eef
 8009edc:	08009f1f 	.word	0x08009f1f
 8009ee0:	08009f93 	.word	0x08009f93
 8009ee4:	08009fa1 	.word	0x08009fa1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	73fb      	strb	r3, [r7, #15]
      break;
 8009eec:	e06d      	b.n	8009fca <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 f897 	bl	800a028 <SetLineCoding>
 8009efa:	4603      	mov	r3, r0
 8009efc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009efe:	7bbb      	ldrb	r3, [r7, #14]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d104      	bne.n	8009f0e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	2202      	movs	r2, #2
 8009f08:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009f0c:	e058      	b.n	8009fc0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009f0e:	7bbb      	ldrb	r3, [r7, #14]
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d055      	beq.n	8009fc0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	2204      	movs	r2, #4
 8009f18:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009f1c:	e050      	b.n	8009fc0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	3340      	adds	r3, #64	@ 0x40
 8009f22:	4619      	mov	r1, r3
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 f860 	bl	8009fea <GetLineCoding>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009f2e:	7bbb      	ldrb	r3, [r7, #14]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d126      	bne.n	8009f82 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f46:	791b      	ldrb	r3, [r3, #4]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d13b      	bne.n	8009fc4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f56:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d133      	bne.n	8009fc4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f66:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d12b      	bne.n	8009fc4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f74:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d124      	bne.n	8009fc4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 f958 	bl	800a230 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009f80:	e020      	b.n	8009fc4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009f82:	7bbb      	ldrb	r3, [r7, #14]
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d01d      	beq.n	8009fc4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	2204      	movs	r2, #4
 8009f8c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009f90:	e018      	b.n	8009fc4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 f867 	bl	800a066 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 f8da 	bl	800a152 <CDC_ProcessReception>
      break;
 8009f9e:	e014      	b.n	8009fca <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009fa0:	2100      	movs	r1, #0
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 ffe7 	bl	800af76 <USBH_ClrFeature>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009fac:	7bbb      	ldrb	r3, [r7, #14]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d10a      	bne.n	8009fc8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8009fba:	e005      	b.n	8009fc8 <USBH_CDC_Process+0x120>

    default:
      break;
 8009fbc:	bf00      	nop
 8009fbe:	e004      	b.n	8009fca <USBH_CDC_Process+0x122>
      break;
 8009fc0:	bf00      	nop
 8009fc2:	e002      	b.n	8009fca <USBH_CDC_Process+0x122>
      break;
 8009fc4:	bf00      	nop
 8009fc6:	e000      	b.n	8009fca <USBH_CDC_Process+0x122>
      break;
 8009fc8:	bf00      	nop

  }

  return status;
 8009fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009fdc:	2300      	movs	r3, #0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	370c      	adds	r7, #12
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr

08009fea <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b082      	sub	sp, #8
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
 8009ff2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	22a1      	movs	r2, #161	@ 0xa1
 8009ff8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2221      	movs	r2, #33	@ 0x21
 8009ffe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2207      	movs	r2, #7
 800a010:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	2207      	movs	r2, #7
 800a016:	4619      	mov	r1, r3
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f001 fa72 	bl	800b502 <USBH_CtlReq>
 800a01e:	4603      	mov	r3, r0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2221      	movs	r2, #33	@ 0x21
 800a036:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2220      	movs	r2, #32
 800a03c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2207      	movs	r2, #7
 800a04e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	2207      	movs	r2, #7
 800a054:	4619      	mov	r1, r3
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f001 fa53 	bl	800b502 <USBH_CtlReq>
 800a05c:	4603      	mov	r3, r0
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b086      	sub	sp, #24
 800a06a:	af02      	add	r7, sp, #8
 800a06c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a074:	69db      	ldr	r3, [r3, #28]
 800a076:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a078:	2300      	movs	r3, #0
 800a07a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800a082:	2b01      	cmp	r3, #1
 800a084:	d002      	beq.n	800a08c <CDC_ProcessTransmission+0x26>
 800a086:	2b02      	cmp	r3, #2
 800a088:	d023      	beq.n	800a0d2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a08a:	e05e      	b.n	800a14a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	8b12      	ldrh	r2, [r2, #24]
 800a094:	4293      	cmp	r3, r2
 800a096:	d90b      	bls.n	800a0b0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	69d9      	ldr	r1, [r3, #28]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	8b1a      	ldrh	r2, [r3, #24]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	7b5b      	ldrb	r3, [r3, #13]
 800a0a4:	2001      	movs	r0, #1
 800a0a6:	9000      	str	r0, [sp, #0]
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f001 fc38 	bl	800b91e <USBH_BulkSendData>
 800a0ae:	e00b      	b.n	800a0c8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800a0b8:	b29a      	uxth	r2, r3
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	7b5b      	ldrb	r3, [r3, #13]
 800a0be:	2001      	movs	r0, #1
 800a0c0:	9000      	str	r0, [sp, #0]
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f001 fc2b 	bl	800b91e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2202      	movs	r2, #2
 800a0cc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a0d0:	e03b      	b.n	800a14a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	7b5b      	ldrb	r3, [r3, #13]
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f001 ff4f 	bl	800bf7c <USBH_LL_GetURBState>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a0e2:	7afb      	ldrb	r3, [r7, #11]
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d128      	bne.n	800a13a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	8b12      	ldrh	r2, [r2, #24]
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d90e      	bls.n	800a112 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0f8:	68fa      	ldr	r2, [r7, #12]
 800a0fa:	8b12      	ldrh	r2, [r2, #24]
 800a0fc:	1a9a      	subs	r2, r3, r2
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	69db      	ldr	r3, [r3, #28]
 800a106:	68fa      	ldr	r2, [r7, #12]
 800a108:	8b12      	ldrh	r2, [r2, #24]
 800a10a:	441a      	add	r2, r3
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	61da      	str	r2, [r3, #28]
 800a110:	e002      	b.n	800a118 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2200      	movs	r2, #0
 800a116:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d004      	beq.n	800a12a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2201      	movs	r2, #1
 800a124:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a128:	e00e      	b.n	800a148 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2200      	movs	r2, #0
 800a12e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 f868 	bl	800a208 <USBH_CDC_TransmitCallback>
      break;
 800a138:	e006      	b.n	800a148 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a13a:	7afb      	ldrb	r3, [r7, #11]
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d103      	bne.n	800a148 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2201      	movs	r2, #1
 800a144:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a148:	bf00      	nop
  }
}
 800a14a:	bf00      	nop
 800a14c:	3710      	adds	r7, #16
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b086      	sub	sp, #24
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a160:	69db      	ldr	r3, [r3, #28]
 800a162:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a164:	2300      	movs	r3, #0
 800a166:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800a16e:	2b03      	cmp	r3, #3
 800a170:	d002      	beq.n	800a178 <CDC_ProcessReception+0x26>
 800a172:	2b04      	cmp	r3, #4
 800a174:	d00e      	beq.n	800a194 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a176:	e043      	b.n	800a200 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	6a19      	ldr	r1, [r3, #32]
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	8b5a      	ldrh	r2, [r3, #26]
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	7b1b      	ldrb	r3, [r3, #12]
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f001 fbef 	bl	800b968 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	2204      	movs	r2, #4
 800a18e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800a192:	e035      	b.n	800a200 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	7b1b      	ldrb	r3, [r3, #12]
 800a198:	4619      	mov	r1, r3
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f001 feee 	bl	800bf7c <USBH_LL_GetURBState>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a1a4:	7cfb      	ldrb	r3, [r7, #19]
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d129      	bne.n	800a1fe <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	7b1b      	ldrb	r3, [r3, #12]
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f001 fe51 	bl	800be58 <USBH_LL_GetLastXferSize>
 800a1b6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d016      	beq.n	800a1f0 <CDC_ProcessReception+0x9e>
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	8b5b      	ldrh	r3, [r3, #26]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d910      	bls.n	800a1f0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	1ad2      	subs	r2, r2, r3
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	6a1a      	ldr	r2, [r3, #32]
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	441a      	add	r2, r3
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	2203      	movs	r2, #3
 800a1ea:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800a1ee:	e006      	b.n	800a1fe <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 f80f 	bl	800a21c <USBH_CDC_ReceiveCallback>
      break;
 800a1fe:	bf00      	nop
  }
}
 800a200:	bf00      	nop
 800a202:	3718      	adds	r7, #24
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a210:	bf00      	nop
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr

0800a21c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a224:	bf00      	nop
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a238:	bf00      	nop
 800a23a:	370c      	adds	r7, #12
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	4613      	mov	r3, r2
 800a250:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d101      	bne.n	800a25c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a258:	2302      	movs	r3, #2
 800a25a:	e029      	b.n	800a2b0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	79fa      	ldrb	r2, [r7, #7]
 800a260:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2200      	movs	r2, #0
 800a268:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2200      	movs	r2, #0
 800a270:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	f000 f81f 	bl	800a2b8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2200      	movs	r2, #0
 800a286:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2200      	movs	r2, #0
 800a28e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2200      	movs	r2, #0
 800a296:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d003      	beq.n	800a2a8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	68ba      	ldr	r2, [r7, #8]
 800a2a4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f001 fd21 	bl	800bcf0 <USBH_LL_Init>

  return USBH_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b085      	sub	sp, #20
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	60fb      	str	r3, [r7, #12]
 800a2c8:	e009      	b.n	800a2de <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	33e0      	adds	r3, #224	@ 0xe0
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	4413      	add	r3, r2
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	60fb      	str	r3, [r7, #12]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2b0f      	cmp	r3, #15
 800a2e2:	d9f2      	bls.n	800a2ca <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	60fb      	str	r3, [r7, #12]
 800a2e8:	e009      	b.n	800a2fe <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	60fb      	str	r3, [r7, #12]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a304:	d3f1      	bcc.n	800a2ea <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2201      	movs	r2, #1
 800a316:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2201      	movs	r2, #1
 800a324:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2240      	movs	r2, #64	@ 0x40
 800a32a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2201      	movs	r2, #1
 800a33e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  return USBH_OK;
 800a352:	2300      	movs	r3, #0
}
 800a354:	4618      	mov	r0, r3
 800a356:	3714      	adds	r7, #20
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a36a:	2300      	movs	r3, #0
 800a36c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d016      	beq.n	800a3a2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d10e      	bne.n	800a39c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a384:	1c59      	adds	r1, r3, #1
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	33de      	adds	r3, #222	@ 0xde
 800a390:	6839      	ldr	r1, [r7, #0]
 800a392:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a396:	2300      	movs	r3, #0
 800a398:	73fb      	strb	r3, [r7, #15]
 800a39a:	e004      	b.n	800a3a6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a39c:	2302      	movs	r3, #2
 800a39e:	73fb      	strb	r3, [r7, #15]
 800a3a0:	e001      	b.n	800a3a6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a3a2:	2302      	movs	r3, #2
 800a3a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3714      	adds	r7, #20
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	460b      	mov	r3, r1
 800a3be:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800a3ca:	78fa      	ldrb	r2, [r7, #3]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d204      	bcs.n	800a3da <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	78fa      	ldrb	r2, [r7, #3]
 800a3d4:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800a3d8:	e001      	b.n	800a3de <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a3da:	2302      	movs	r3, #2
 800a3dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3714      	adds	r7, #20
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr

0800a3ec <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b087      	sub	sp, #28
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	4608      	mov	r0, r1
 800a3f6:	4611      	mov	r1, r2
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	70fb      	strb	r3, [r7, #3]
 800a3fe:	460b      	mov	r3, r1
 800a400:	70bb      	strb	r3, [r7, #2]
 800a402:	4613      	mov	r3, r2
 800a404:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a406:	2300      	movs	r3, #0
 800a408:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a40a:	2300      	movs	r3, #0
 800a40c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a414:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a416:	e025      	b.n	800a464 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a418:	7dfb      	ldrb	r3, [r7, #23]
 800a41a:	221a      	movs	r2, #26
 800a41c:	fb02 f303 	mul.w	r3, r2, r3
 800a420:	3308      	adds	r3, #8
 800a422:	68fa      	ldr	r2, [r7, #12]
 800a424:	4413      	add	r3, r2
 800a426:	3302      	adds	r3, #2
 800a428:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	795b      	ldrb	r3, [r3, #5]
 800a42e:	78fa      	ldrb	r2, [r7, #3]
 800a430:	429a      	cmp	r2, r3
 800a432:	d002      	beq.n	800a43a <USBH_FindInterface+0x4e>
 800a434:	78fb      	ldrb	r3, [r7, #3]
 800a436:	2bff      	cmp	r3, #255	@ 0xff
 800a438:	d111      	bne.n	800a45e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a43e:	78ba      	ldrb	r2, [r7, #2]
 800a440:	429a      	cmp	r2, r3
 800a442:	d002      	beq.n	800a44a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a444:	78bb      	ldrb	r3, [r7, #2]
 800a446:	2bff      	cmp	r3, #255	@ 0xff
 800a448:	d109      	bne.n	800a45e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a44e:	787a      	ldrb	r2, [r7, #1]
 800a450:	429a      	cmp	r2, r3
 800a452:	d002      	beq.n	800a45a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a454:	787b      	ldrb	r3, [r7, #1]
 800a456:	2bff      	cmp	r3, #255	@ 0xff
 800a458:	d101      	bne.n	800a45e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a45a:	7dfb      	ldrb	r3, [r7, #23]
 800a45c:	e006      	b.n	800a46c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a45e:	7dfb      	ldrb	r3, [r7, #23]
 800a460:	3301      	adds	r3, #1
 800a462:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a464:	7dfb      	ldrb	r3, [r7, #23]
 800a466:	2b01      	cmp	r3, #1
 800a468:	d9d6      	bls.n	800a418 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a46a:	23ff      	movs	r3, #255	@ 0xff
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	371c      	adds	r7, #28
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f001 fc71 	bl	800bd68 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a486:	2101      	movs	r1, #1
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f001 fd8a 	bl	800bfa2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	3708      	adds	r7, #8
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b088      	sub	sp, #32
 800a49c:	af04      	add	r7, sp, #16
 800a49e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d102      	bne.n	800a4ba <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2203      	movs	r2, #3
 800a4b8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	2b0b      	cmp	r3, #11
 800a4c2:	f200 81bb 	bhi.w	800a83c <USBH_Process+0x3a4>
 800a4c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a4cc <USBH_Process+0x34>)
 800a4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4cc:	0800a4fd 	.word	0x0800a4fd
 800a4d0:	0800a52f 	.word	0x0800a52f
 800a4d4:	0800a597 	.word	0x0800a597
 800a4d8:	0800a7d7 	.word	0x0800a7d7
 800a4dc:	0800a83d 	.word	0x0800a83d
 800a4e0:	0800a637 	.word	0x0800a637
 800a4e4:	0800a77d 	.word	0x0800a77d
 800a4e8:	0800a66d 	.word	0x0800a66d
 800a4ec:	0800a68d 	.word	0x0800a68d
 800a4f0:	0800a6ab 	.word	0x0800a6ab
 800a4f4:	0800a6ef 	.word	0x0800a6ef
 800a4f8:	0800a7bf 	.word	0x0800a7bf
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a502:	b2db      	uxtb	r3, r3
 800a504:	2b00      	cmp	r3, #0
 800a506:	f000 819b 	beq.w	800a840 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2201      	movs	r2, #1
 800a50e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a510:	20c8      	movs	r0, #200	@ 0xc8
 800a512:	f001 fd8d 	bl	800c030 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f001 fc83 	bl	800be22 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2200      	movs	r2, #0
 800a528:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a52c:	e188      	b.n	800a840 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800a534:	2b01      	cmp	r3, #1
 800a536:	d107      	bne.n	800a548 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2200      	movs	r2, #0
 800a53c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2202      	movs	r2, #2
 800a544:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a546:	e18a      	b.n	800a85e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a54e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a552:	d914      	bls.n	800a57e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a55a:	3301      	adds	r3, #1
 800a55c:	b2da      	uxtb	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a56a:	2b03      	cmp	r3, #3
 800a56c:	d903      	bls.n	800a576 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	220d      	movs	r2, #13
 800a572:	701a      	strb	r2, [r3, #0]
      break;
 800a574:	e173      	b.n	800a85e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2200      	movs	r2, #0
 800a57a:	701a      	strb	r2, [r3, #0]
      break;
 800a57c:	e16f      	b.n	800a85e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a584:	f103 020a 	add.w	r2, r3, #10
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800a58e:	200a      	movs	r0, #10
 800a590:	f001 fd4e 	bl	800c030 <USBH_Delay>
      break;
 800a594:	e163      	b.n	800a85e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d005      	beq.n	800a5ac <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a5a6:	2104      	movs	r1, #4
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a5ac:	2064      	movs	r0, #100	@ 0x64
 800a5ae:	f001 fd3f 	bl	800c030 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f001 fc0e 	bl	800bdd4 <USBH_LL_GetSpeed>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2205      	movs	r2, #5
 800a5c6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a5c8:	2100      	movs	r1, #0
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f001 fa19 	bl	800ba02 <USBH_AllocPipe>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a5d8:	2180      	movs	r1, #128	@ 0x80
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f001 fa11 	bl	800ba02 <USBH_AllocPipe>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	7919      	ldrb	r1, [r3, #4]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a5fc:	9202      	str	r2, [sp, #8]
 800a5fe:	2200      	movs	r2, #0
 800a600:	9201      	str	r2, [sp, #4]
 800a602:	9300      	str	r3, [sp, #0]
 800a604:	4603      	mov	r3, r0
 800a606:	2280      	movs	r2, #128	@ 0x80
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f001 f9cb 	bl	800b9a4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	7959      	ldrb	r1, [r3, #5]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a622:	9202      	str	r2, [sp, #8]
 800a624:	2200      	movs	r2, #0
 800a626:	9201      	str	r2, [sp, #4]
 800a628:	9300      	str	r3, [sp, #0]
 800a62a:	4603      	mov	r3, r0
 800a62c:	2200      	movs	r2, #0
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f001 f9b8 	bl	800b9a4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a634:	e113      	b.n	800a85e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f000 f916 	bl	800a868 <USBH_HandleEnum>
 800a63c:	4603      	mov	r3, r0
 800a63e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a640:	7bbb      	ldrb	r3, [r7, #14]
 800a642:	b2db      	uxtb	r3, r3
 800a644:	2b00      	cmp	r3, #0
 800a646:	f040 80fd 	bne.w	800a844 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d103      	bne.n	800a664 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2208      	movs	r2, #8
 800a660:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a662:	e0ef      	b.n	800a844 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2207      	movs	r2, #7
 800a668:	701a      	strb	r2, [r3, #0]
      break;
 800a66a:	e0eb      	b.n	800a844 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a672:	2b00      	cmp	r3, #0
 800a674:	f000 80e8 	beq.w	800a848 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a67e:	2101      	movs	r1, #1
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2208      	movs	r2, #8
 800a688:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a68a:	e0dd      	b.n	800a848 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800a692:	4619      	mov	r1, r3
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 fc27 	bl	800aee8 <USBH_SetCfg>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	f040 80d5 	bne.w	800a84c <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2209      	movs	r2, #9
 800a6a6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a6a8:	e0d0      	b.n	800a84c <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800a6b0:	f003 0320 	and.w	r3, r3, #32
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d016      	beq.n	800a6e6 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a6b8:	2101      	movs	r1, #1
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 fc37 	bl	800af2e <USBH_SetFeature>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a6c4:	7bbb      	ldrb	r3, [r7, #14]
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d103      	bne.n	800a6d4 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	220a      	movs	r2, #10
 800a6d0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a6d2:	e0bd      	b.n	800a850 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800a6d4:	7bbb      	ldrb	r3, [r7, #14]
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	2b03      	cmp	r3, #3
 800a6da:	f040 80b9 	bne.w	800a850 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	220a      	movs	r2, #10
 800a6e2:	701a      	strb	r2, [r3, #0]
      break;
 800a6e4:	e0b4      	b.n	800a850 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	220a      	movs	r2, #10
 800a6ea:	701a      	strb	r2, [r3, #0]
      break;
 800a6ec:	e0b0      	b.n	800a850 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f000 80ad 	beq.w	800a854 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a702:	2300      	movs	r3, #0
 800a704:	73fb      	strb	r3, [r7, #15]
 800a706:	e016      	b.n	800a736 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a708:	7bfa      	ldrb	r2, [r7, #15]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	32de      	adds	r2, #222	@ 0xde
 800a70e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a712:	791a      	ldrb	r2, [r3, #4]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d108      	bne.n	800a730 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a71e:	7bfa      	ldrb	r2, [r7, #15]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	32de      	adds	r2, #222	@ 0xde
 800a724:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800a72e:	e005      	b.n	800a73c <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a730:	7bfb      	ldrb	r3, [r7, #15]
 800a732:	3301      	adds	r3, #1
 800a734:	73fb      	strb	r3, [r7, #15]
 800a736:	7bfb      	ldrb	r3, [r7, #15]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d0e5      	beq.n	800a708 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a742:	2b00      	cmp	r3, #0
 800a744:	d016      	beq.n	800a774 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	4798      	blx	r3
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d109      	bne.n	800a76c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2206      	movs	r2, #6
 800a75c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a764:	2103      	movs	r1, #3
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a76a:	e073      	b.n	800a854 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	220d      	movs	r2, #13
 800a770:	701a      	strb	r2, [r3, #0]
      break;
 800a772:	e06f      	b.n	800a854 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	220d      	movs	r2, #13
 800a778:	701a      	strb	r2, [r3, #0]
      break;
 800a77a:	e06b      	b.n	800a854 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a782:	2b00      	cmp	r3, #0
 800a784:	d017      	beq.n	800a7b6 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a78c:	691b      	ldr	r3, [r3, #16]
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	4798      	blx	r3
 800a792:	4603      	mov	r3, r0
 800a794:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a796:	7bbb      	ldrb	r3, [r7, #14]
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d103      	bne.n	800a7a6 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	220b      	movs	r2, #11
 800a7a2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a7a4:	e058      	b.n	800a858 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800a7a6:	7bbb      	ldrb	r3, [r7, #14]
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	2b02      	cmp	r3, #2
 800a7ac:	d154      	bne.n	800a858 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	220d      	movs	r2, #13
 800a7b2:	701a      	strb	r2, [r3, #0]
      break;
 800a7b4:	e050      	b.n	800a858 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	220d      	movs	r2, #13
 800a7ba:	701a      	strb	r2, [r3, #0]
      break;
 800a7bc:	e04c      	b.n	800a858 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d049      	beq.n	800a85c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a7ce:	695b      	ldr	r3, [r3, #20]
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	4798      	blx	r3
      }
      break;
 800a7d4:	e042      	b.n	800a85c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f7ff fd6a 	bl	800a2b8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d009      	beq.n	800a802 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d005      	beq.n	800a818 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a812:	2105      	movs	r1, #5
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	2b01      	cmp	r3, #1
 800a822:	d107      	bne.n	800a834 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f7ff fe23 	bl	800a478 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a832:	e014      	b.n	800a85e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f001 fa97 	bl	800bd68 <USBH_LL_Start>
      break;
 800a83a:	e010      	b.n	800a85e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800a83c:	bf00      	nop
 800a83e:	e00e      	b.n	800a85e <USBH_Process+0x3c6>
      break;
 800a840:	bf00      	nop
 800a842:	e00c      	b.n	800a85e <USBH_Process+0x3c6>
      break;
 800a844:	bf00      	nop
 800a846:	e00a      	b.n	800a85e <USBH_Process+0x3c6>
    break;
 800a848:	bf00      	nop
 800a84a:	e008      	b.n	800a85e <USBH_Process+0x3c6>
      break;
 800a84c:	bf00      	nop
 800a84e:	e006      	b.n	800a85e <USBH_Process+0x3c6>
      break;
 800a850:	bf00      	nop
 800a852:	e004      	b.n	800a85e <USBH_Process+0x3c6>
      break;
 800a854:	bf00      	nop
 800a856:	e002      	b.n	800a85e <USBH_Process+0x3c6>
      break;
 800a858:	bf00      	nop
 800a85a:	e000      	b.n	800a85e <USBH_Process+0x3c6>
      break;
 800a85c:	bf00      	nop
  }
  return USBH_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3710      	adds	r7, #16
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b088      	sub	sp, #32
 800a86c:	af04      	add	r7, sp, #16
 800a86e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a870:	2301      	movs	r3, #1
 800a872:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a874:	2301      	movs	r3, #1
 800a876:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	785b      	ldrb	r3, [r3, #1]
 800a87c:	2b07      	cmp	r3, #7
 800a87e:	f200 81bd 	bhi.w	800abfc <USBH_HandleEnum+0x394>
 800a882:	a201      	add	r2, pc, #4	@ (adr r2, 800a888 <USBH_HandleEnum+0x20>)
 800a884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a888:	0800a8a9 	.word	0x0800a8a9
 800a88c:	0800a963 	.word	0x0800a963
 800a890:	0800a9cd 	.word	0x0800a9cd
 800a894:	0800aa57 	.word	0x0800aa57
 800a898:	0800aac1 	.word	0x0800aac1
 800a89c:	0800ab31 	.word	0x0800ab31
 800a8a0:	0800ab77 	.word	0x0800ab77
 800a8a4:	0800abbd 	.word	0x0800abbd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a8a8:	2108      	movs	r1, #8
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 fa4c 	bl	800ad48 <USBH_Get_DevDesc>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a8b4:	7bbb      	ldrb	r3, [r7, #14]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d12e      	bne.n	800a918 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	7919      	ldrb	r1, [r3, #4]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a8de:	9202      	str	r2, [sp, #8]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	9201      	str	r2, [sp, #4]
 800a8e4:	9300      	str	r3, [sp, #0]
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2280      	movs	r2, #128	@ 0x80
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f001 f85a 	bl	800b9a4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	7959      	ldrb	r1, [r3, #5]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a904:	9202      	str	r2, [sp, #8]
 800a906:	2200      	movs	r2, #0
 800a908:	9201      	str	r2, [sp, #4]
 800a90a:	9300      	str	r3, [sp, #0]
 800a90c:	4603      	mov	r3, r0
 800a90e:	2200      	movs	r2, #0
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f001 f847 	bl	800b9a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a916:	e173      	b.n	800ac00 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a918:	7bbb      	ldrb	r3, [r7, #14]
 800a91a:	2b03      	cmp	r3, #3
 800a91c:	f040 8170 	bne.w	800ac00 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a926:	3301      	adds	r3, #1
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a936:	2b03      	cmp	r3, #3
 800a938:	d903      	bls.n	800a942 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	220d      	movs	r2, #13
 800a93e:	701a      	strb	r2, [r3, #0]
      break;
 800a940:	e15e      	b.n	800ac00 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	795b      	ldrb	r3, [r3, #5]
 800a946:	4619      	mov	r1, r3
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f001 f87b 	bl	800ba44 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	791b      	ldrb	r3, [r3, #4]
 800a952:	4619      	mov	r1, r3
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f001 f875 	bl	800ba44 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	701a      	strb	r2, [r3, #0]
      break;
 800a960:	e14e      	b.n	800ac00 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a962:	2112      	movs	r1, #18
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 f9ef 	bl	800ad48 <USBH_Get_DevDesc>
 800a96a:	4603      	mov	r3, r0
 800a96c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a96e:	7bbb      	ldrb	r3, [r7, #14]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d103      	bne.n	800a97c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2202      	movs	r2, #2
 800a978:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a97a:	e143      	b.n	800ac04 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a97c:	7bbb      	ldrb	r3, [r7, #14]
 800a97e:	2b03      	cmp	r3, #3
 800a980:	f040 8140 	bne.w	800ac04 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a98a:	3301      	adds	r3, #1
 800a98c:	b2da      	uxtb	r2, r3
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a99a:	2b03      	cmp	r3, #3
 800a99c:	d903      	bls.n	800a9a6 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	220d      	movs	r2, #13
 800a9a2:	701a      	strb	r2, [r3, #0]
      break;
 800a9a4:	e12e      	b.n	800ac04 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	795b      	ldrb	r3, [r3, #5]
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f001 f849 	bl	800ba44 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	791b      	ldrb	r3, [r3, #4]
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f001 f843 	bl	800ba44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	701a      	strb	r2, [r3, #0]
      break;
 800a9ca:	e11b      	b.n	800ac04 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a9cc:	2101      	movs	r1, #1
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 fa66 	bl	800aea0 <USBH_SetAddress>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a9d8:	7bbb      	ldrb	r3, [r7, #14]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d130      	bne.n	800aa40 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a9de:	2002      	movs	r0, #2
 800a9e0:	f001 fb26 	bl	800c030 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2203      	movs	r2, #3
 800a9f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	7919      	ldrb	r1, [r3, #4]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800aa06:	9202      	str	r2, [sp, #8]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	9201      	str	r2, [sp, #4]
 800aa0c:	9300      	str	r3, [sp, #0]
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2280      	movs	r2, #128	@ 0x80
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 ffc6 	bl	800b9a4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	7959      	ldrb	r1, [r3, #5]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aa2c:	9202      	str	r2, [sp, #8]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	9201      	str	r2, [sp, #4]
 800aa32:	9300      	str	r3, [sp, #0]
 800aa34:	4603      	mov	r3, r0
 800aa36:	2200      	movs	r2, #0
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 ffb3 	bl	800b9a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800aa3e:	e0e3      	b.n	800ac08 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa40:	7bbb      	ldrb	r3, [r7, #14]
 800aa42:	2b03      	cmp	r3, #3
 800aa44:	f040 80e0 	bne.w	800ac08 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	220d      	movs	r2, #13
 800aa4c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	705a      	strb	r2, [r3, #1]
      break;
 800aa54:	e0d8      	b.n	800ac08 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800aa56:	2109      	movs	r1, #9
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 f99d 	bl	800ad98 <USBH_Get_CfgDesc>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa62:	7bbb      	ldrb	r3, [r7, #14]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d103      	bne.n	800aa70 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2204      	movs	r2, #4
 800aa6c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aa6e:	e0cd      	b.n	800ac0c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa70:	7bbb      	ldrb	r3, [r7, #14]
 800aa72:	2b03      	cmp	r3, #3
 800aa74:	f040 80ca 	bne.w	800ac0c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aa7e:	3301      	adds	r3, #1
 800aa80:	b2da      	uxtb	r2, r3
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aa8e:	2b03      	cmp	r3, #3
 800aa90:	d903      	bls.n	800aa9a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	220d      	movs	r2, #13
 800aa96:	701a      	strb	r2, [r3, #0]
      break;
 800aa98:	e0b8      	b.n	800ac0c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	795b      	ldrb	r3, [r3, #5]
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f000 ffcf 	bl	800ba44 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	791b      	ldrb	r3, [r3, #4]
 800aaaa:	4619      	mov	r1, r3
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 ffc9 	bl	800ba44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	701a      	strb	r2, [r3, #0]
      break;
 800aabe:	e0a5      	b.n	800ac0c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800aac6:	4619      	mov	r1, r3
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 f965 	bl	800ad98 <USBH_Get_CfgDesc>
 800aace:	4603      	mov	r3, r0
 800aad0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aad2:	7bbb      	ldrb	r3, [r7, #14]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d103      	bne.n	800aae0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2205      	movs	r2, #5
 800aadc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aade:	e097      	b.n	800ac10 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aae0:	7bbb      	ldrb	r3, [r7, #14]
 800aae2:	2b03      	cmp	r3, #3
 800aae4:	f040 8094 	bne.w	800ac10 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aaee:	3301      	adds	r3, #1
 800aaf0:	b2da      	uxtb	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aafe:	2b03      	cmp	r3, #3
 800ab00:	d903      	bls.n	800ab0a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	220d      	movs	r2, #13
 800ab06:	701a      	strb	r2, [r3, #0]
      break;
 800ab08:	e082      	b.n	800ac10 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	795b      	ldrb	r3, [r3, #5]
 800ab0e:	4619      	mov	r1, r3
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 ff97 	bl	800ba44 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	791b      	ldrb	r3, [r3, #4]
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 ff91 	bl	800ba44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	701a      	strb	r2, [r3, #0]
      break;
 800ab2e:	e06f      	b.n	800ac10 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d019      	beq.n	800ab6e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ab46:	23ff      	movs	r3, #255	@ 0xff
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f000 f949 	bl	800ade0 <USBH_Get_StringDesc>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ab52:	7bbb      	ldrb	r3, [r7, #14]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d103      	bne.n	800ab60 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2206      	movs	r2, #6
 800ab5c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ab5e:	e059      	b.n	800ac14 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab60:	7bbb      	ldrb	r3, [r7, #14]
 800ab62:	2b03      	cmp	r3, #3
 800ab64:	d156      	bne.n	800ac14 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2206      	movs	r2, #6
 800ab6a:	705a      	strb	r2, [r3, #1]
      break;
 800ab6c:	e052      	b.n	800ac14 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2206      	movs	r2, #6
 800ab72:	705a      	strb	r2, [r3, #1]
      break;
 800ab74:	e04e      	b.n	800ac14 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d019      	beq.n	800abb4 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ab8c:	23ff      	movs	r3, #255	@ 0xff
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 f926 	bl	800ade0 <USBH_Get_StringDesc>
 800ab94:	4603      	mov	r3, r0
 800ab96:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ab98:	7bbb      	ldrb	r3, [r7, #14]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d103      	bne.n	800aba6 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2207      	movs	r2, #7
 800aba2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800aba4:	e038      	b.n	800ac18 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aba6:	7bbb      	ldrb	r3, [r7, #14]
 800aba8:	2b03      	cmp	r3, #3
 800abaa:	d135      	bne.n	800ac18 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2207      	movs	r2, #7
 800abb0:	705a      	strb	r2, [r3, #1]
      break;
 800abb2:	e031      	b.n	800ac18 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2207      	movs	r2, #7
 800abb8:	705a      	strb	r2, [r3, #1]
      break;
 800abba:	e02d      	b.n	800ac18 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d017      	beq.n	800abf6 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800abd2:	23ff      	movs	r3, #255	@ 0xff
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 f903 	bl	800ade0 <USBH_Get_StringDesc>
 800abda:	4603      	mov	r3, r0
 800abdc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800abde:	7bbb      	ldrb	r3, [r7, #14]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d102      	bne.n	800abea <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800abe4:	2300      	movs	r3, #0
 800abe6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800abe8:	e018      	b.n	800ac1c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abea:	7bbb      	ldrb	r3, [r7, #14]
 800abec:	2b03      	cmp	r3, #3
 800abee:	d115      	bne.n	800ac1c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800abf0:	2300      	movs	r3, #0
 800abf2:	73fb      	strb	r3, [r7, #15]
      break;
 800abf4:	e012      	b.n	800ac1c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800abf6:	2300      	movs	r3, #0
 800abf8:	73fb      	strb	r3, [r7, #15]
      break;
 800abfa:	e00f      	b.n	800ac1c <USBH_HandleEnum+0x3b4>

    default:
      break;
 800abfc:	bf00      	nop
 800abfe:	e00e      	b.n	800ac1e <USBH_HandleEnum+0x3b6>
      break;
 800ac00:	bf00      	nop
 800ac02:	e00c      	b.n	800ac1e <USBH_HandleEnum+0x3b6>
      break;
 800ac04:	bf00      	nop
 800ac06:	e00a      	b.n	800ac1e <USBH_HandleEnum+0x3b6>
      break;
 800ac08:	bf00      	nop
 800ac0a:	e008      	b.n	800ac1e <USBH_HandleEnum+0x3b6>
      break;
 800ac0c:	bf00      	nop
 800ac0e:	e006      	b.n	800ac1e <USBH_HandleEnum+0x3b6>
      break;
 800ac10:	bf00      	nop
 800ac12:	e004      	b.n	800ac1e <USBH_HandleEnum+0x3b6>
      break;
 800ac14:	bf00      	nop
 800ac16:	e002      	b.n	800ac1e <USBH_HandleEnum+0x3b6>
      break;
 800ac18:	bf00      	nop
 800ac1a:	e000      	b.n	800ac1e <USBH_HandleEnum+0x3b6>
      break;
 800ac1c:	bf00      	nop
  }
  return Status;
 800ac1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3710      	adds	r7, #16
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	683a      	ldr	r2, [r7, #0]
 800ac36:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800ac3a:	bf00      	nop
 800ac3c:	370c      	adds	r7, #12
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr

0800ac46 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b082      	sub	sp, #8
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ac54:	1c5a      	adds	r2, r3, #1
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 f804 	bl	800ac6a <USBH_HandleSof>
}
 800ac62:	bf00      	nop
 800ac64:	3708      	adds	r7, #8
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b082      	sub	sp, #8
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	2b0b      	cmp	r3, #11
 800ac7a:	d10a      	bne.n	800ac92 <USBH_HandleSof+0x28>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d005      	beq.n	800ac92 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac8c:	699b      	ldr	r3, [r3, #24]
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	4798      	blx	r3
  }
}
 800ac92:	bf00      	nop
 800ac94:	3708      	adds	r7, #8
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ac9a:	b480      	push	{r7}
 800ac9c:	b083      	sub	sp, #12
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2201      	movs	r2, #1
 800aca6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800acaa:	bf00      	nop
}
 800acac:	370c      	adds	r7, #12
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr

0800acb6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800acb6:	b480      	push	{r7}
 800acb8:	b083      	sub	sp, #12
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800acc6:	bf00      	nop
}
 800acc8:	370c      	adds	r7, #12
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr

0800acd2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800acd2:	b480      	push	{r7}
 800acd4:	b083      	sub	sp, #12
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2201      	movs	r2, #1
 800acde:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800acf2:	2300      	movs	r3, #0
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	370c      	adds	r7, #12
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f001 f83c 	bl	800bd9e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	791b      	ldrb	r3, [r3, #4]
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 fe89 	bl	800ba44 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	795b      	ldrb	r3, [r3, #5]
 800ad36:	4619      	mov	r1, r3
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 fe83 	bl	800ba44 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800ad3e:	2300      	movs	r3, #0
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3708      	adds	r7, #8
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b086      	sub	sp, #24
 800ad4c:	af02      	add	r7, sp, #8
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	460b      	mov	r3, r1
 800ad52:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ad5a:	78fb      	ldrb	r3, [r7, #3]
 800ad5c:	b29b      	uxth	r3, r3
 800ad5e:	9300      	str	r3, [sp, #0]
 800ad60:	4613      	mov	r3, r2
 800ad62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ad66:	2100      	movs	r1, #0
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 f864 	bl	800ae36 <USBH_GetDescriptor>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800ad72:	7bfb      	ldrb	r3, [r7, #15]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d10a      	bne.n	800ad8e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f203 3026 	addw	r0, r3, #806	@ 0x326
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ad84:	78fa      	ldrb	r2, [r7, #3]
 800ad86:	b292      	uxth	r2, r2
 800ad88:	4619      	mov	r1, r3
 800ad8a:	f000 f919 	bl	800afc0 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ad8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3710      	adds	r7, #16
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b086      	sub	sp, #24
 800ad9c:	af02      	add	r7, sp, #8
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	460b      	mov	r3, r1
 800ada2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	331c      	adds	r3, #28
 800ada8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800adaa:	887b      	ldrh	r3, [r7, #2]
 800adac:	9300      	str	r3, [sp, #0]
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800adb4:	2100      	movs	r1, #0
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 f83d 	bl	800ae36 <USBH_GetDescriptor>
 800adbc:	4603      	mov	r3, r0
 800adbe:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800adc0:	7bfb      	ldrb	r3, [r7, #15]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d107      	bne.n	800add6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800adc6:	887b      	ldrh	r3, [r7, #2]
 800adc8:	461a      	mov	r2, r3
 800adca:	68b9      	ldr	r1, [r7, #8]
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 f985 	bl	800b0dc <USBH_ParseCfgDesc>
 800add2:	4603      	mov	r3, r0
 800add4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800add6:	7bfb      	ldrb	r3, [r7, #15]
}
 800add8:	4618      	mov	r0, r3
 800adda:	3710      	adds	r7, #16
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b088      	sub	sp, #32
 800ade4:	af02      	add	r7, sp, #8
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	607a      	str	r2, [r7, #4]
 800adea:	461a      	mov	r2, r3
 800adec:	460b      	mov	r3, r1
 800adee:	72fb      	strb	r3, [r7, #11]
 800adf0:	4613      	mov	r3, r2
 800adf2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800adf4:	7afb      	ldrb	r3, [r7, #11]
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800adfc:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ae04:	893b      	ldrh	r3, [r7, #8]
 800ae06:	9300      	str	r3, [sp, #0]
 800ae08:	460b      	mov	r3, r1
 800ae0a:	2100      	movs	r1, #0
 800ae0c:	68f8      	ldr	r0, [r7, #12]
 800ae0e:	f000 f812 	bl	800ae36 <USBH_GetDescriptor>
 800ae12:	4603      	mov	r3, r0
 800ae14:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ae16:	7dfb      	ldrb	r3, [r7, #23]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d107      	bne.n	800ae2c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ae22:	893a      	ldrh	r2, [r7, #8]
 800ae24:	6879      	ldr	r1, [r7, #4]
 800ae26:	4618      	mov	r0, r3
 800ae28:	f000 fb1e 	bl	800b468 <USBH_ParseStringDesc>
  }

  return status;
 800ae2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3718      	adds	r7, #24
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b084      	sub	sp, #16
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	60f8      	str	r0, [r7, #12]
 800ae3e:	607b      	str	r3, [r7, #4]
 800ae40:	460b      	mov	r3, r1
 800ae42:	72fb      	strb	r3, [r7, #11]
 800ae44:	4613      	mov	r3, r2
 800ae46:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	789b      	ldrb	r3, [r3, #2]
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d11c      	bne.n	800ae8a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ae50:	7afb      	ldrb	r3, [r7, #11]
 800ae52:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ae56:	b2da      	uxtb	r2, r3
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2206      	movs	r2, #6
 800ae60:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	893a      	ldrh	r2, [r7, #8]
 800ae66:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ae68:	893b      	ldrh	r3, [r7, #8]
 800ae6a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ae6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae72:	d104      	bne.n	800ae7e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f240 4209 	movw	r2, #1033	@ 0x409
 800ae7a:	829a      	strh	r2, [r3, #20]
 800ae7c:	e002      	b.n	800ae84 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2200      	movs	r2, #0
 800ae82:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	8b3a      	ldrh	r2, [r7, #24]
 800ae88:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ae8a:	8b3b      	ldrh	r3, [r7, #24]
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	6879      	ldr	r1, [r7, #4]
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f000 fb36 	bl	800b502 <USBH_CtlReq>
 800ae96:	4603      	mov	r3, r0
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3710      	adds	r7, #16
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	460b      	mov	r3, r1
 800aeaa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	789b      	ldrb	r3, [r3, #2]
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d10f      	bne.n	800aed4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2205      	movs	r2, #5
 800aebe:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800aec0:	78fb      	ldrb	r3, [r7, #3]
 800aec2:	b29a      	uxth	r2, r3
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2200      	movs	r2, #0
 800aecc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aed4:	2200      	movs	r2, #0
 800aed6:	2100      	movs	r1, #0
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 fb12 	bl	800b502 <USBH_CtlReq>
 800aede:	4603      	mov	r3, r0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3708      	adds	r7, #8
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b082      	sub	sp, #8
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	460b      	mov	r3, r1
 800aef2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	789b      	ldrb	r3, [r3, #2]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d10e      	bne.n	800af1a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2209      	movs	r2, #9
 800af06:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	887a      	ldrh	r2, [r7, #2]
 800af0c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2200      	movs	r2, #0
 800af12:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800af1a:	2200      	movs	r2, #0
 800af1c:	2100      	movs	r1, #0
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 faef 	bl	800b502 <USBH_CtlReq>
 800af24:	4603      	mov	r3, r0
}
 800af26:	4618      	mov	r0, r3
 800af28:	3708      	adds	r7, #8
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}

0800af2e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800af2e:	b580      	push	{r7, lr}
 800af30:	b082      	sub	sp, #8
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
 800af36:	460b      	mov	r3, r1
 800af38:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	789b      	ldrb	r3, [r3, #2]
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d10f      	bne.n	800af62 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2200      	movs	r2, #0
 800af46:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2203      	movs	r2, #3
 800af4c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800af4e:	78fb      	ldrb	r3, [r7, #3]
 800af50:	b29a      	uxth	r2, r3
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800af62:	2200      	movs	r2, #0
 800af64:	2100      	movs	r1, #0
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 facb 	bl	800b502 <USBH_CtlReq>
 800af6c:	4603      	mov	r3, r0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3708      	adds	r7, #8
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b082      	sub	sp, #8
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
 800af7e:	460b      	mov	r3, r1
 800af80:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	789b      	ldrb	r3, [r3, #2]
 800af86:	2b01      	cmp	r3, #1
 800af88:	d10f      	bne.n	800afaa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2202      	movs	r2, #2
 800af8e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2200      	movs	r2, #0
 800af9a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800af9c:	78fb      	ldrb	r3, [r7, #3]
 800af9e:	b29a      	uxth	r2, r3
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2200      	movs	r2, #0
 800afa8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800afaa:	2200      	movs	r2, #0
 800afac:	2100      	movs	r1, #0
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 faa7 	bl	800b502 <USBH_CtlReq>
 800afb4:	4603      	mov	r3, r0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3708      	adds	r7, #8
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
	...

0800afc0 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b085      	sub	sp, #20
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	4613      	mov	r3, r2
 800afcc:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	781a      	ldrb	r2, [r3, #0]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	785a      	ldrb	r2, [r3, #1]
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	3302      	adds	r3, #2
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	461a      	mov	r2, r3
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	3303      	adds	r3, #3
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	021b      	lsls	r3, r3, #8
 800afee:	b29b      	uxth	r3, r3
 800aff0:	4313      	orrs	r3, r2
 800aff2:	b29a      	uxth	r2, r3
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	791a      	ldrb	r2, [r3, #4]
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	795a      	ldrb	r2, [r3, #5]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	799a      	ldrb	r2, [r3, #6]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	79da      	ldrb	r2, [r3, #7]
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	79db      	ldrb	r3, [r3, #7]
 800b01c:	2b20      	cmp	r3, #32
 800b01e:	dc0f      	bgt.n	800b040 <USBH_ParseDevDesc+0x80>
 800b020:	2b08      	cmp	r3, #8
 800b022:	db14      	blt.n	800b04e <USBH_ParseDevDesc+0x8e>
 800b024:	3b08      	subs	r3, #8
 800b026:	4a2c      	ldr	r2, [pc, #176]	@ (800b0d8 <USBH_ParseDevDesc+0x118>)
 800b028:	fa22 f303 	lsr.w	r3, r2, r3
 800b02c:	f003 0301 	and.w	r3, r3, #1
 800b030:	2b00      	cmp	r3, #0
 800b032:	bf14      	ite	ne
 800b034:	2301      	movne	r3, #1
 800b036:	2300      	moveq	r3, #0
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d102      	bne.n	800b044 <USBH_ParseDevDesc+0x84>
 800b03e:	e006      	b.n	800b04e <USBH_ParseDevDesc+0x8e>
 800b040:	2b40      	cmp	r3, #64	@ 0x40
 800b042:	d104      	bne.n	800b04e <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	79da      	ldrb	r2, [r3, #7]
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	71da      	strb	r2, [r3, #7]
      break;
 800b04c:	e003      	b.n	800b056 <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2240      	movs	r2, #64	@ 0x40
 800b052:	71da      	strb	r2, [r3, #7]
      break;
 800b054:	bf00      	nop
  }

  if (length > 8U)
 800b056:	88fb      	ldrh	r3, [r7, #6]
 800b058:	2b08      	cmp	r3, #8
 800b05a:	d936      	bls.n	800b0ca <USBH_ParseDevDesc+0x10a>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	3308      	adds	r3, #8
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	461a      	mov	r2, r3
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	3309      	adds	r3, #9
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	021b      	lsls	r3, r3, #8
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	4313      	orrs	r3, r2
 800b070:	b29a      	uxth	r2, r3
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	330a      	adds	r3, #10
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	461a      	mov	r2, r3
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	330b      	adds	r3, #11
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	021b      	lsls	r3, r3, #8
 800b086:	b29b      	uxth	r3, r3
 800b088:	4313      	orrs	r3, r2
 800b08a:	b29a      	uxth	r2, r3
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	330c      	adds	r3, #12
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	461a      	mov	r2, r3
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	330d      	adds	r3, #13
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	021b      	lsls	r3, r3, #8
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	b29a      	uxth	r2, r3
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	7b9a      	ldrb	r2, [r3, #14]
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	7bda      	ldrb	r2, [r3, #15]
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	7c1a      	ldrb	r2, [r3, #16]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	7c5a      	ldrb	r2, [r3, #17]
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	745a      	strb	r2, [r3, #17]
  }
}
 800b0ca:	bf00      	nop
 800b0cc:	3714      	adds	r7, #20
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr
 800b0d6:	bf00      	nop
 800b0d8:	01000101 	.word	0x01000101

0800b0dc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b08c      	sub	sp, #48	@ 0x30
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b0f0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800b102:	2300      	movs	r3, #0
 800b104:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	781a      	ldrb	r2, [r3, #0]
 800b110:	6a3b      	ldr	r3, [r7, #32]
 800b112:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	785a      	ldrb	r2, [r3, #1]
 800b118:	6a3b      	ldr	r3, [r7, #32]
 800b11a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	3302      	adds	r3, #2
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	461a      	mov	r2, r3
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	3303      	adds	r3, #3
 800b128:	781b      	ldrb	r3, [r3, #0]
 800b12a:	021b      	lsls	r3, r3, #8
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	4313      	orrs	r3, r2
 800b130:	b29b      	uxth	r3, r3
 800b132:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b136:	bf28      	it	cs
 800b138:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800b13c:	b29a      	uxth	r2, r3
 800b13e:	6a3b      	ldr	r3, [r7, #32]
 800b140:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	791a      	ldrb	r2, [r3, #4]
 800b146:	6a3b      	ldr	r3, [r7, #32]
 800b148:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	795a      	ldrb	r2, [r3, #5]
 800b14e:	6a3b      	ldr	r3, [r7, #32]
 800b150:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	799a      	ldrb	r2, [r3, #6]
 800b156:	6a3b      	ldr	r3, [r7, #32]
 800b158:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	79da      	ldrb	r2, [r3, #7]
 800b15e:	6a3b      	ldr	r3, [r7, #32]
 800b160:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	7a1a      	ldrb	r2, [r3, #8]
 800b166:	6a3b      	ldr	r3, [r7, #32]
 800b168:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800b16a:	6a3b      	ldr	r3, [r7, #32]
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	2b09      	cmp	r3, #9
 800b170:	d002      	beq.n	800b178 <USBH_ParseCfgDesc+0x9c>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b172:	6a3b      	ldr	r3, [r7, #32]
 800b174:	2209      	movs	r2, #9
 800b176:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b178:	88fb      	ldrh	r3, [r7, #6]
 800b17a:	2b09      	cmp	r3, #9
 800b17c:	f240 809d 	bls.w	800b2ba <USBH_ParseCfgDesc+0x1de>
  {
    ptr = USB_LEN_CFG_DESC;
 800b180:	2309      	movs	r3, #9
 800b182:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b184:	2300      	movs	r3, #0
 800b186:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b188:	e081      	b.n	800b28e <USBH_ParseCfgDesc+0x1b2>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b18a:	f107 0316 	add.w	r3, r7, #22
 800b18e:	4619      	mov	r1, r3
 800b190:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b192:	f000 f99c 	bl	800b4ce <USBH_GetNextDesc>
 800b196:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b19a:	785b      	ldrb	r3, [r3, #1]
 800b19c:	2b04      	cmp	r3, #4
 800b19e:	d176      	bne.n	800b28e <USBH_ParseCfgDesc+0x1b2>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	2b09      	cmp	r3, #9
 800b1a6:	d002      	beq.n	800b1ae <USBH_ParseCfgDesc+0xd2>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1aa:	2209      	movs	r2, #9
 800b1ac:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b1ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b1b2:	221a      	movs	r2, #26
 800b1b4:	fb02 f303 	mul.w	r3, r2, r3
 800b1b8:	3308      	adds	r3, #8
 800b1ba:	6a3a      	ldr	r2, [r7, #32]
 800b1bc:	4413      	add	r3, r2
 800b1be:	3302      	adds	r3, #2
 800b1c0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b1c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b1c4:	69f8      	ldr	r0, [r7, #28]
 800b1c6:	f000 f87e 	bl	800b2c6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b1d4:	e043      	b.n	800b25e <USBH_ParseCfgDesc+0x182>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b1d6:	f107 0316 	add.w	r3, r7, #22
 800b1da:	4619      	mov	r1, r3
 800b1dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1de:	f000 f976 	bl	800b4ce <USBH_GetNextDesc>
 800b1e2:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e6:	785b      	ldrb	r3, [r3, #1]
 800b1e8:	2b05      	cmp	r3, #5
 800b1ea:	d138      	bne.n	800b25e <USBH_ParseCfgDesc+0x182>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	795b      	ldrb	r3, [r3, #5]
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d10f      	bne.n	800b214 <USBH_ParseCfgDesc+0x138>
 800b1f4:	69fb      	ldr	r3, [r7, #28]
 800b1f6:	799b      	ldrb	r3, [r3, #6]
 800b1f8:	2b02      	cmp	r3, #2
 800b1fa:	d10b      	bne.n	800b214 <USBH_ParseCfgDesc+0x138>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b1fc:	69fb      	ldr	r3, [r7, #28]
 800b1fe:	79db      	ldrb	r3, [r3, #7]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d10f      	bne.n	800b224 <USBH_ParseCfgDesc+0x148>
 800b204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	2b09      	cmp	r3, #9
 800b20a:	d00b      	beq.n	800b224 <USBH_ParseCfgDesc+0x148>
              {
                pdesc->bLength = 0x09U;
 800b20c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b20e:	2209      	movs	r2, #9
 800b210:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b212:	e007      	b.n	800b224 <USBH_ParseCfgDesc+0x148>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800b214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	2b07      	cmp	r3, #7
 800b21a:	d004      	beq.n	800b226 <USBH_ParseCfgDesc+0x14a>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b21e:	2207      	movs	r2, #7
 800b220:	701a      	strb	r2, [r3, #0]
 800b222:	e000      	b.n	800b226 <USBH_ParseCfgDesc+0x14a>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b224:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b226:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b22a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b22e:	3201      	adds	r2, #1
 800b230:	00d2      	lsls	r2, r2, #3
 800b232:	211a      	movs	r1, #26
 800b234:	fb01 f303 	mul.w	r3, r1, r3
 800b238:	4413      	add	r3, r2
 800b23a:	3308      	adds	r3, #8
 800b23c:	6a3a      	ldr	r2, [r7, #32]
 800b23e:	4413      	add	r3, r2
 800b240:	3304      	adds	r3, #4
 800b242:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b244:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b246:	69b9      	ldr	r1, [r7, #24]
 800b248:	68f8      	ldr	r0, [r7, #12]
 800b24a:	f000 f86b 	bl	800b324 <USBH_ParseEPDesc>
 800b24e:	4603      	mov	r3, r0
 800b250:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800b254:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b258:	3301      	adds	r3, #1
 800b25a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	791b      	ldrb	r3, [r3, #4]
 800b262:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b266:	429a      	cmp	r2, r3
 800b268:	d204      	bcs.n	800b274 <USBH_ParseCfgDesc+0x198>
 800b26a:	6a3b      	ldr	r3, [r7, #32]
 800b26c:	885a      	ldrh	r2, [r3, #2]
 800b26e:	8afb      	ldrh	r3, [r7, #22]
 800b270:	429a      	cmp	r2, r3
 800b272:	d8b0      	bhi.n	800b1d6 <USBH_ParseCfgDesc+0xfa>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b274:	69fb      	ldr	r3, [r7, #28]
 800b276:	791b      	ldrb	r3, [r3, #4]
 800b278:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d201      	bcs.n	800b284 <USBH_ParseCfgDesc+0x1a8>
        {
          return USBH_NOT_SUPPORTED;
 800b280:	2303      	movs	r3, #3
 800b282:	e01c      	b.n	800b2be <USBH_ParseCfgDesc+0x1e2>
        }

        if_ix++;
 800b284:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b288:	3301      	adds	r3, #1
 800b28a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b28e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b292:	2b01      	cmp	r3, #1
 800b294:	d805      	bhi.n	800b2a2 <USBH_ParseCfgDesc+0x1c6>
 800b296:	6a3b      	ldr	r3, [r7, #32]
 800b298:	885a      	ldrh	r2, [r3, #2]
 800b29a:	8afb      	ldrh	r3, [r7, #22]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	f63f af74 	bhi.w	800b18a <USBH_ParseCfgDesc+0xae>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b2a2:	6a3b      	ldr	r3, [r7, #32]
 800b2a4:	791b      	ldrb	r3, [r3, #4]
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	bf28      	it	cs
 800b2aa:	2302      	movcs	r3, #2
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d201      	bcs.n	800b2ba <USBH_ParseCfgDesc+0x1de>
    {
      return USBH_NOT_SUPPORTED;
 800b2b6:	2303      	movs	r3, #3
 800b2b8:	e001      	b.n	800b2be <USBH_ParseCfgDesc+0x1e2>
    }
  }

  return status;
 800b2ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3730      	adds	r7, #48	@ 0x30
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}

0800b2c6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b2c6:	b480      	push	{r7}
 800b2c8:	b083      	sub	sp, #12
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
 800b2ce:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	781a      	ldrb	r2, [r3, #0]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	785a      	ldrb	r2, [r3, #1]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	789a      	ldrb	r2, [r3, #2]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	78da      	ldrb	r2, [r3, #3]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	791a      	ldrb	r2, [r3, #4]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	795a      	ldrb	r2, [r3, #5]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	799a      	ldrb	r2, [r3, #6]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	79da      	ldrb	r2, [r3, #7]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	7a1a      	ldrb	r2, [r3, #8]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	721a      	strb	r2, [r3, #8]
}
 800b318:	bf00      	nop
 800b31a:	370c      	adds	r7, #12
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr

0800b324 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800b324:	b480      	push	{r7}
 800b326:	b087      	sub	sp, #28
 800b328:	af00      	add	r7, sp, #0
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b330:	2300      	movs	r3, #0
 800b332:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	781a      	ldrb	r2, [r3, #0]
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	785a      	ldrb	r2, [r3, #1]
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	789a      	ldrb	r2, [r3, #2]
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	78da      	ldrb	r2, [r3, #3]
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	3304      	adds	r3, #4
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	461a      	mov	r2, r3
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	3305      	adds	r3, #5
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	021b      	lsls	r3, r3, #8
 800b364:	b29b      	uxth	r3, r3
 800b366:	4313      	orrs	r3, r2
 800b368:	b29a      	uxth	r2, r3
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	799a      	ldrb	r2, [r3, #6]
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	889b      	ldrh	r3, [r3, #4]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d102      	bne.n	800b384 <USBH_ParseEPDesc+0x60>
  {
    status = USBH_NOT_SUPPORTED;
 800b37e:	2303      	movs	r3, #3
 800b380:	75fb      	strb	r3, [r7, #23]
 800b382:	e031      	b.n	800b3e8 <USBH_ParseEPDesc+0xc4>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	889b      	ldrh	r3, [r3, #4]
 800b388:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b38c:	f023 0307 	bic.w	r3, r3, #7
 800b390:	b29a      	uxth	r2, r3
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	889b      	ldrh	r3, [r3, #4]
 800b39a:	b21a      	sxth	r2, r3
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	3304      	adds	r3, #4
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	3305      	adds	r3, #5
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	021b      	lsls	r3, r3, #8
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	430b      	orrs	r3, r1
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d10f      	bne.n	800b3da <USBH_ParseEPDesc+0xb6>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	3304      	adds	r3, #4
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	3305      	adds	r3, #5
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	021b      	lsls	r3, r3, #8
 800b3ca:	b29b      	uxth	r3, r3
 800b3cc:	430b      	orrs	r3, r1
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	b21b      	sxth	r3, r3
 800b3d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b3d6:	b21b      	sxth	r3, r3
 800b3d8:	e001      	b.n	800b3de <USBH_ParseEPDesc+0xba>
 800b3da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	b21b      	sxth	r3, r3
 800b3e2:	b29a      	uxth	r2, r3
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d116      	bne.n	800b420 <USBH_ParseEPDesc+0xfc>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	78db      	ldrb	r3, [r3, #3]
 800b3f6:	f003 0303 	and.w	r3, r3, #3
 800b3fa:	2b01      	cmp	r3, #1
 800b3fc:	d005      	beq.n	800b40a <USBH_ParseEPDesc+0xe6>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	78db      	ldrb	r3, [r3, #3]
 800b402:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b406:	2b03      	cmp	r3, #3
 800b408:	d127      	bne.n	800b45a <USBH_ParseEPDesc+0x136>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	799b      	ldrb	r3, [r3, #6]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d003      	beq.n	800b41a <USBH_ParseEPDesc+0xf6>
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	799b      	ldrb	r3, [r3, #6]
 800b416:	2b10      	cmp	r3, #16
 800b418:	d91f      	bls.n	800b45a <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 800b41a:	2303      	movs	r3, #3
 800b41c:	75fb      	strb	r3, [r7, #23]
 800b41e:	e01c      	b.n	800b45a <USBH_ParseEPDesc+0x136>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	78db      	ldrb	r3, [r3, #3]
 800b424:	f003 0303 	and.w	r3, r3, #3
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d10a      	bne.n	800b442 <USBH_ParseEPDesc+0x11e>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	799b      	ldrb	r3, [r3, #6]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d003      	beq.n	800b43c <USBH_ParseEPDesc+0x118>
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	799b      	ldrb	r3, [r3, #6]
 800b438:	2b10      	cmp	r3, #16
 800b43a:	d90e      	bls.n	800b45a <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 800b43c:	2303      	movs	r3, #3
 800b43e:	75fb      	strb	r3, [r7, #23]
 800b440:	e00b      	b.n	800b45a <USBH_ParseEPDesc+0x136>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	78db      	ldrb	r3, [r3, #3]
 800b446:	f003 0303 	and.w	r3, r3, #3
 800b44a:	2b03      	cmp	r3, #3
 800b44c:	d105      	bne.n	800b45a <USBH_ParseEPDesc+0x136>
    {
      if (ep_descriptor->bInterval == 0U)
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	799b      	ldrb	r3, [r3, #6]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d101      	bne.n	800b45a <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 800b456:	2303      	movs	r3, #3
 800b458:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800b45a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	371c      	adds	r7, #28
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr

0800b468 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b468:	b480      	push	{r7}
 800b46a:	b087      	sub	sp, #28
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	4613      	mov	r3, r2
 800b474:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	3301      	adds	r3, #1
 800b47a:	781b      	ldrb	r3, [r3, #0]
 800b47c:	2b03      	cmp	r3, #3
 800b47e:	d120      	bne.n	800b4c2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	781b      	ldrb	r3, [r3, #0]
 800b484:	1e9a      	subs	r2, r3, #2
 800b486:	88fb      	ldrh	r3, [r7, #6]
 800b488:	4293      	cmp	r3, r2
 800b48a:	bf28      	it	cs
 800b48c:	4613      	movcs	r3, r2
 800b48e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	3302      	adds	r3, #2
 800b494:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b496:	2300      	movs	r3, #0
 800b498:	82fb      	strh	r3, [r7, #22]
 800b49a:	e00b      	b.n	800b4b4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b49c:	8afb      	ldrh	r3, [r7, #22]
 800b49e:	68fa      	ldr	r2, [r7, #12]
 800b4a0:	4413      	add	r3, r2
 800b4a2:	781a      	ldrb	r2, [r3, #0]
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b4ae:	8afb      	ldrh	r3, [r7, #22]
 800b4b0:	3302      	adds	r3, #2
 800b4b2:	82fb      	strh	r3, [r7, #22]
 800b4b4:	8afa      	ldrh	r2, [r7, #22]
 800b4b6:	8abb      	ldrh	r3, [r7, #20]
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d3ef      	bcc.n	800b49c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	701a      	strb	r2, [r3, #0]
  }
}
 800b4c2:	bf00      	nop
 800b4c4:	371c      	adds	r7, #28
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr

0800b4ce <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b4ce:	b480      	push	{r7}
 800b4d0:	b085      	sub	sp, #20
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
 800b4d6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	881b      	ldrh	r3, [r3, #0]
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	7812      	ldrb	r2, [r2, #0]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	b29a      	uxth	r2, r3
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	4413      	add	r3, r2
 800b4f2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3714      	adds	r7, #20
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr

0800b502 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b502:	b580      	push	{r7, lr}
 800b504:	b086      	sub	sp, #24
 800b506:	af00      	add	r7, sp, #0
 800b508:	60f8      	str	r0, [r7, #12]
 800b50a:	60b9      	str	r1, [r7, #8]
 800b50c:	4613      	mov	r3, r2
 800b50e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b510:	2301      	movs	r3, #1
 800b512:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	789b      	ldrb	r3, [r3, #2]
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d002      	beq.n	800b522 <USBH_CtlReq+0x20>
 800b51c:	2b02      	cmp	r3, #2
 800b51e:	d00f      	beq.n	800b540 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b520:	e027      	b.n	800b572 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	68ba      	ldr	r2, [r7, #8]
 800b526:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	88fa      	ldrh	r2, [r7, #6]
 800b52c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2201      	movs	r2, #1
 800b532:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2202      	movs	r2, #2
 800b538:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b53a:	2301      	movs	r3, #1
 800b53c:	75fb      	strb	r3, [r7, #23]
      break;
 800b53e:	e018      	b.n	800b572 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b540:	68f8      	ldr	r0, [r7, #12]
 800b542:	f000 f81b 	bl	800b57c <USBH_HandleControl>
 800b546:	4603      	mov	r3, r0
 800b548:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b54a:	7dfb      	ldrb	r3, [r7, #23]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d002      	beq.n	800b556 <USBH_CtlReq+0x54>
 800b550:	7dfb      	ldrb	r3, [r7, #23]
 800b552:	2b03      	cmp	r3, #3
 800b554:	d106      	bne.n	800b564 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2201      	movs	r2, #1
 800b55a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2200      	movs	r2, #0
 800b560:	761a      	strb	r2, [r3, #24]
      break;
 800b562:	e005      	b.n	800b570 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b564:	7dfb      	ldrb	r3, [r7, #23]
 800b566:	2b02      	cmp	r3, #2
 800b568:	d102      	bne.n	800b570 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2201      	movs	r2, #1
 800b56e:	709a      	strb	r2, [r3, #2]
      break;
 800b570:	bf00      	nop
  }
  return status;
 800b572:	7dfb      	ldrb	r3, [r7, #23]
}
 800b574:	4618      	mov	r0, r3
 800b576:	3718      	adds	r7, #24
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b086      	sub	sp, #24
 800b580:	af02      	add	r7, sp, #8
 800b582:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b584:	2301      	movs	r3, #1
 800b586:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b588:	2300      	movs	r3, #0
 800b58a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	7e1b      	ldrb	r3, [r3, #24]
 800b590:	3b01      	subs	r3, #1
 800b592:	2b0a      	cmp	r3, #10
 800b594:	f200 8156 	bhi.w	800b844 <USBH_HandleControl+0x2c8>
 800b598:	a201      	add	r2, pc, #4	@ (adr r2, 800b5a0 <USBH_HandleControl+0x24>)
 800b59a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b59e:	bf00      	nop
 800b5a0:	0800b5cd 	.word	0x0800b5cd
 800b5a4:	0800b5e7 	.word	0x0800b5e7
 800b5a8:	0800b651 	.word	0x0800b651
 800b5ac:	0800b677 	.word	0x0800b677
 800b5b0:	0800b6af 	.word	0x0800b6af
 800b5b4:	0800b6d9 	.word	0x0800b6d9
 800b5b8:	0800b72b 	.word	0x0800b72b
 800b5bc:	0800b74d 	.word	0x0800b74d
 800b5c0:	0800b789 	.word	0x0800b789
 800b5c4:	0800b7af 	.word	0x0800b7af
 800b5c8:	0800b7ed 	.word	0x0800b7ed
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f103 0110 	add.w	r1, r3, #16
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	795b      	ldrb	r3, [r3, #5]
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 f943 	bl	800b864 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2202      	movs	r2, #2
 800b5e2:	761a      	strb	r2, [r3, #24]
      break;
 800b5e4:	e139      	b.n	800b85a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	795b      	ldrb	r3, [r3, #5]
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 fcc5 	bl	800bf7c <USBH_LL_GetURBState>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b5f6:	7bbb      	ldrb	r3, [r7, #14]
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	d11e      	bne.n	800b63a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	7c1b      	ldrb	r3, [r3, #16]
 800b600:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b604:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	8adb      	ldrh	r3, [r3, #22]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d00a      	beq.n	800b624 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b60e:	7b7b      	ldrb	r3, [r7, #13]
 800b610:	2b80      	cmp	r3, #128	@ 0x80
 800b612:	d103      	bne.n	800b61c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2203      	movs	r2, #3
 800b618:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b61a:	e115      	b.n	800b848 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2205      	movs	r2, #5
 800b620:	761a      	strb	r2, [r3, #24]
      break;
 800b622:	e111      	b.n	800b848 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b624:	7b7b      	ldrb	r3, [r7, #13]
 800b626:	2b80      	cmp	r3, #128	@ 0x80
 800b628:	d103      	bne.n	800b632 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2209      	movs	r2, #9
 800b62e:	761a      	strb	r2, [r3, #24]
      break;
 800b630:	e10a      	b.n	800b848 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2207      	movs	r2, #7
 800b636:	761a      	strb	r2, [r3, #24]
      break;
 800b638:	e106      	b.n	800b848 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b63a:	7bbb      	ldrb	r3, [r7, #14]
 800b63c:	2b04      	cmp	r3, #4
 800b63e:	d003      	beq.n	800b648 <USBH_HandleControl+0xcc>
 800b640:	7bbb      	ldrb	r3, [r7, #14]
 800b642:	2b02      	cmp	r3, #2
 800b644:	f040 8100 	bne.w	800b848 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	220b      	movs	r2, #11
 800b64c:	761a      	strb	r2, [r3, #24]
      break;
 800b64e:	e0fb      	b.n	800b848 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b656:	b29a      	uxth	r2, r3
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6899      	ldr	r1, [r3, #8]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	899a      	ldrh	r2, [r3, #12]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	791b      	ldrb	r3, [r3, #4]
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 f93a 	bl	800b8e2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2204      	movs	r2, #4
 800b672:	761a      	strb	r2, [r3, #24]
      break;
 800b674:	e0f1      	b.n	800b85a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	791b      	ldrb	r3, [r3, #4]
 800b67a:	4619      	mov	r1, r3
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 fc7d 	bl	800bf7c <USBH_LL_GetURBState>
 800b682:	4603      	mov	r3, r0
 800b684:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b686:	7bbb      	ldrb	r3, [r7, #14]
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d102      	bne.n	800b692 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2209      	movs	r2, #9
 800b690:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b692:	7bbb      	ldrb	r3, [r7, #14]
 800b694:	2b05      	cmp	r3, #5
 800b696:	d102      	bne.n	800b69e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b698:	2303      	movs	r3, #3
 800b69a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b69c:	e0d6      	b.n	800b84c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b69e:	7bbb      	ldrb	r3, [r7, #14]
 800b6a0:	2b04      	cmp	r3, #4
 800b6a2:	f040 80d3 	bne.w	800b84c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	220b      	movs	r2, #11
 800b6aa:	761a      	strb	r2, [r3, #24]
      break;
 800b6ac:	e0ce      	b.n	800b84c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6899      	ldr	r1, [r3, #8]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	899a      	ldrh	r2, [r3, #12]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	795b      	ldrb	r3, [r3, #5]
 800b6ba:	2001      	movs	r0, #1
 800b6bc:	9000      	str	r0, [sp, #0]
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 f8ea 	bl	800b898 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b6ca:	b29a      	uxth	r2, r3
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2206      	movs	r2, #6
 800b6d4:	761a      	strb	r2, [r3, #24]
      break;
 800b6d6:	e0c0      	b.n	800b85a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	795b      	ldrb	r3, [r3, #5]
 800b6dc:	4619      	mov	r1, r3
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 fc4c 	bl	800bf7c <USBH_LL_GetURBState>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b6e8:	7bbb      	ldrb	r3, [r7, #14]
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d103      	bne.n	800b6f6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2207      	movs	r2, #7
 800b6f2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b6f4:	e0ac      	b.n	800b850 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b6f6:	7bbb      	ldrb	r3, [r7, #14]
 800b6f8:	2b05      	cmp	r3, #5
 800b6fa:	d105      	bne.n	800b708 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	220c      	movs	r2, #12
 800b700:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b702:	2303      	movs	r3, #3
 800b704:	73fb      	strb	r3, [r7, #15]
      break;
 800b706:	e0a3      	b.n	800b850 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b708:	7bbb      	ldrb	r3, [r7, #14]
 800b70a:	2b02      	cmp	r3, #2
 800b70c:	d103      	bne.n	800b716 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2205      	movs	r2, #5
 800b712:	761a      	strb	r2, [r3, #24]
      break;
 800b714:	e09c      	b.n	800b850 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b716:	7bbb      	ldrb	r3, [r7, #14]
 800b718:	2b04      	cmp	r3, #4
 800b71a:	f040 8099 	bne.w	800b850 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	220b      	movs	r2, #11
 800b722:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b724:	2302      	movs	r3, #2
 800b726:	73fb      	strb	r3, [r7, #15]
      break;
 800b728:	e092      	b.n	800b850 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	791b      	ldrb	r3, [r3, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	2100      	movs	r1, #0
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 f8d5 	bl	800b8e2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b73e:	b29a      	uxth	r2, r3
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2208      	movs	r2, #8
 800b748:	761a      	strb	r2, [r3, #24]

      break;
 800b74a:	e086      	b.n	800b85a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	791b      	ldrb	r3, [r3, #4]
 800b750:	4619      	mov	r1, r3
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 fc12 	bl	800bf7c <USBH_LL_GetURBState>
 800b758:	4603      	mov	r3, r0
 800b75a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b75c:	7bbb      	ldrb	r3, [r7, #14]
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d105      	bne.n	800b76e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	220d      	movs	r2, #13
 800b766:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b768:	2300      	movs	r3, #0
 800b76a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b76c:	e072      	b.n	800b854 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b76e:	7bbb      	ldrb	r3, [r7, #14]
 800b770:	2b04      	cmp	r3, #4
 800b772:	d103      	bne.n	800b77c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	220b      	movs	r2, #11
 800b778:	761a      	strb	r2, [r3, #24]
      break;
 800b77a:	e06b      	b.n	800b854 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b77c:	7bbb      	ldrb	r3, [r7, #14]
 800b77e:	2b05      	cmp	r3, #5
 800b780:	d168      	bne.n	800b854 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b782:	2303      	movs	r3, #3
 800b784:	73fb      	strb	r3, [r7, #15]
      break;
 800b786:	e065      	b.n	800b854 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	795b      	ldrb	r3, [r3, #5]
 800b78c:	2201      	movs	r2, #1
 800b78e:	9200      	str	r2, [sp, #0]
 800b790:	2200      	movs	r2, #0
 800b792:	2100      	movs	r1, #0
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 f87f 	bl	800b898 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b7a0:	b29a      	uxth	r2, r3
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	220a      	movs	r2, #10
 800b7aa:	761a      	strb	r2, [r3, #24]
      break;
 800b7ac:	e055      	b.n	800b85a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	795b      	ldrb	r3, [r3, #5]
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 fbe1 	bl	800bf7c <USBH_LL_GetURBState>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b7be:	7bbb      	ldrb	r3, [r7, #14]
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d105      	bne.n	800b7d0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	220d      	movs	r2, #13
 800b7cc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b7ce:	e043      	b.n	800b858 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b7d0:	7bbb      	ldrb	r3, [r7, #14]
 800b7d2:	2b02      	cmp	r3, #2
 800b7d4:	d103      	bne.n	800b7de <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2209      	movs	r2, #9
 800b7da:	761a      	strb	r2, [r3, #24]
      break;
 800b7dc:	e03c      	b.n	800b858 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b7de:	7bbb      	ldrb	r3, [r7, #14]
 800b7e0:	2b04      	cmp	r3, #4
 800b7e2:	d139      	bne.n	800b858 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	220b      	movs	r2, #11
 800b7e8:	761a      	strb	r2, [r3, #24]
      break;
 800b7ea:	e035      	b.n	800b858 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	7e5b      	ldrb	r3, [r3, #25]
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	b2da      	uxtb	r2, r3
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	765a      	strb	r2, [r3, #25]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	7e5b      	ldrb	r3, [r3, #25]
 800b7fc:	2b02      	cmp	r3, #2
 800b7fe:	d806      	bhi.n	800b80e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2201      	movs	r2, #1
 800b804:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2201      	movs	r2, #1
 800b80a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b80c:	e025      	b.n	800b85a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b814:	2106      	movs	r1, #6
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2200      	movs	r2, #0
 800b81e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	795b      	ldrb	r3, [r3, #5]
 800b824:	4619      	mov	r1, r3
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 f90c 	bl	800ba44 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	791b      	ldrb	r3, [r3, #4]
 800b830:	4619      	mov	r1, r3
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 f906 	bl	800ba44 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b83e:	2302      	movs	r3, #2
 800b840:	73fb      	strb	r3, [r7, #15]
      break;
 800b842:	e00a      	b.n	800b85a <USBH_HandleControl+0x2de>

    default:
      break;
 800b844:	bf00      	nop
 800b846:	e008      	b.n	800b85a <USBH_HandleControl+0x2de>
      break;
 800b848:	bf00      	nop
 800b84a:	e006      	b.n	800b85a <USBH_HandleControl+0x2de>
      break;
 800b84c:	bf00      	nop
 800b84e:	e004      	b.n	800b85a <USBH_HandleControl+0x2de>
      break;
 800b850:	bf00      	nop
 800b852:	e002      	b.n	800b85a <USBH_HandleControl+0x2de>
      break;
 800b854:	bf00      	nop
 800b856:	e000      	b.n	800b85a <USBH_HandleControl+0x2de>
      break;
 800b858:	bf00      	nop
  }

  return status;
 800b85a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3710      	adds	r7, #16
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b088      	sub	sp, #32
 800b868:	af04      	add	r7, sp, #16
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	60b9      	str	r1, [r7, #8]
 800b86e:	4613      	mov	r3, r2
 800b870:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b872:	79f9      	ldrb	r1, [r7, #7]
 800b874:	2300      	movs	r3, #0
 800b876:	9303      	str	r3, [sp, #12]
 800b878:	2308      	movs	r3, #8
 800b87a:	9302      	str	r3, [sp, #8]
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	9301      	str	r3, [sp, #4]
 800b880:	2300      	movs	r3, #0
 800b882:	9300      	str	r3, [sp, #0]
 800b884:	2300      	movs	r3, #0
 800b886:	2200      	movs	r2, #0
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	f000 fb46 	bl	800bf1a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3710      	adds	r7, #16
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b088      	sub	sp, #32
 800b89c:	af04      	add	r7, sp, #16
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	4611      	mov	r1, r2
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	460b      	mov	r3, r1
 800b8a8:	80fb      	strh	r3, [r7, #6]
 800b8aa:	4613      	mov	r3, r2
 800b8ac:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d001      	beq.n	800b8bc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b8bc:	7979      	ldrb	r1, [r7, #5]
 800b8be:	7e3b      	ldrb	r3, [r7, #24]
 800b8c0:	9303      	str	r3, [sp, #12]
 800b8c2:	88fb      	ldrh	r3, [r7, #6]
 800b8c4:	9302      	str	r3, [sp, #8]
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	9301      	str	r3, [sp, #4]
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	9300      	str	r3, [sp, #0]
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	68f8      	ldr	r0, [r7, #12]
 800b8d4:	f000 fb21 	bl	800bf1a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b8d8:	2300      	movs	r3, #0
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3710      	adds	r7, #16
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b088      	sub	sp, #32
 800b8e6:	af04      	add	r7, sp, #16
 800b8e8:	60f8      	str	r0, [r7, #12]
 800b8ea:	60b9      	str	r1, [r7, #8]
 800b8ec:	4611      	mov	r1, r2
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	80fb      	strh	r3, [r7, #6]
 800b8f4:	4613      	mov	r3, r2
 800b8f6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b8f8:	7979      	ldrb	r1, [r7, #5]
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	9303      	str	r3, [sp, #12]
 800b8fe:	88fb      	ldrh	r3, [r7, #6]
 800b900:	9302      	str	r3, [sp, #8]
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	9301      	str	r3, [sp, #4]
 800b906:	2301      	movs	r3, #1
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	2300      	movs	r3, #0
 800b90c:	2201      	movs	r2, #1
 800b90e:	68f8      	ldr	r0, [r7, #12]
 800b910:	f000 fb03 	bl	800bf1a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b914:	2300      	movs	r3, #0

}
 800b916:	4618      	mov	r0, r3
 800b918:	3710      	adds	r7, #16
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}

0800b91e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b91e:	b580      	push	{r7, lr}
 800b920:	b088      	sub	sp, #32
 800b922:	af04      	add	r7, sp, #16
 800b924:	60f8      	str	r0, [r7, #12]
 800b926:	60b9      	str	r1, [r7, #8]
 800b928:	4611      	mov	r1, r2
 800b92a:	461a      	mov	r2, r3
 800b92c:	460b      	mov	r3, r1
 800b92e:	80fb      	strh	r3, [r7, #6]
 800b930:	4613      	mov	r3, r2
 800b932:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d001      	beq.n	800b942 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b93e:	2300      	movs	r3, #0
 800b940:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b942:	7979      	ldrb	r1, [r7, #5]
 800b944:	7e3b      	ldrb	r3, [r7, #24]
 800b946:	9303      	str	r3, [sp, #12]
 800b948:	88fb      	ldrh	r3, [r7, #6]
 800b94a:	9302      	str	r3, [sp, #8]
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	9301      	str	r3, [sp, #4]
 800b950:	2301      	movs	r3, #1
 800b952:	9300      	str	r3, [sp, #0]
 800b954:	2302      	movs	r3, #2
 800b956:	2200      	movs	r2, #0
 800b958:	68f8      	ldr	r0, [r7, #12]
 800b95a:	f000 fade 	bl	800bf1a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3710      	adds	r7, #16
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b088      	sub	sp, #32
 800b96c:	af04      	add	r7, sp, #16
 800b96e:	60f8      	str	r0, [r7, #12]
 800b970:	60b9      	str	r1, [r7, #8]
 800b972:	4611      	mov	r1, r2
 800b974:	461a      	mov	r2, r3
 800b976:	460b      	mov	r3, r1
 800b978:	80fb      	strh	r3, [r7, #6]
 800b97a:	4613      	mov	r3, r2
 800b97c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b97e:	7979      	ldrb	r1, [r7, #5]
 800b980:	2300      	movs	r3, #0
 800b982:	9303      	str	r3, [sp, #12]
 800b984:	88fb      	ldrh	r3, [r7, #6]
 800b986:	9302      	str	r3, [sp, #8]
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	9301      	str	r3, [sp, #4]
 800b98c:	2301      	movs	r3, #1
 800b98e:	9300      	str	r3, [sp, #0]
 800b990:	2302      	movs	r3, #2
 800b992:	2201      	movs	r2, #1
 800b994:	68f8      	ldr	r0, [r7, #12]
 800b996:	f000 fac0 	bl	800bf1a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b99a:	2300      	movs	r3, #0
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3710      	adds	r7, #16
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b086      	sub	sp, #24
 800b9a8:	af04      	add	r7, sp, #16
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	4608      	mov	r0, r1
 800b9ae:	4611      	mov	r1, r2
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	70fb      	strb	r3, [r7, #3]
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	70bb      	strb	r3, [r7, #2]
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b9be:	7878      	ldrb	r0, [r7, #1]
 800b9c0:	78ba      	ldrb	r2, [r7, #2]
 800b9c2:	78f9      	ldrb	r1, [r7, #3]
 800b9c4:	8b3b      	ldrh	r3, [r7, #24]
 800b9c6:	9302      	str	r3, [sp, #8]
 800b9c8:	7d3b      	ldrb	r3, [r7, #20]
 800b9ca:	9301      	str	r3, [sp, #4]
 800b9cc:	7c3b      	ldrb	r3, [r7, #16]
 800b9ce:	9300      	str	r3, [sp, #0]
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 fa53 	bl	800be7e <USBH_LL_OpenPipe>

  return USBH_OK;
 800b9d8:	2300      	movs	r3, #0
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3708      	adds	r7, #8
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b082      	sub	sp, #8
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b9ee:	78fb      	ldrb	r3, [r7, #3]
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 fa72 	bl	800bedc <USBH_LL_ClosePipe>

  return USBH_OK;
 800b9f8:	2300      	movs	r3, #0
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3708      	adds	r7, #8
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}

0800ba02 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ba02:	b580      	push	{r7, lr}
 800ba04:	b084      	sub	sp, #16
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
 800ba0a:	460b      	mov	r3, r1
 800ba0c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 f836 	bl	800ba80 <USBH_GetFreePipe>
 800ba14:	4603      	mov	r3, r0
 800ba16:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ba18:	89fb      	ldrh	r3, [r7, #14]
 800ba1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d00a      	beq.n	800ba38 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ba22:	78fa      	ldrb	r2, [r7, #3]
 800ba24:	89fb      	ldrh	r3, [r7, #14]
 800ba26:	f003 030f 	and.w	r3, r3, #15
 800ba2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ba2e:	6879      	ldr	r1, [r7, #4]
 800ba30:	33e0      	adds	r3, #224	@ 0xe0
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	440b      	add	r3, r1
 800ba36:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ba38:	89fb      	ldrh	r3, [r7, #14]
 800ba3a:	b2db      	uxtb	r3, r3
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3710      	adds	r7, #16
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b083      	sub	sp, #12
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ba50:	78fb      	ldrb	r3, [r7, #3]
 800ba52:	2b0f      	cmp	r3, #15
 800ba54:	d80d      	bhi.n	800ba72 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ba56:	78fb      	ldrb	r3, [r7, #3]
 800ba58:	687a      	ldr	r2, [r7, #4]
 800ba5a:	33e0      	adds	r3, #224	@ 0xe0
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	4413      	add	r3, r2
 800ba60:	685a      	ldr	r2, [r3, #4]
 800ba62:	78fb      	ldrb	r3, [r7, #3]
 800ba64:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ba68:	6879      	ldr	r1, [r7, #4]
 800ba6a:	33e0      	adds	r3, #224	@ 0xe0
 800ba6c:	009b      	lsls	r3, r3, #2
 800ba6e:	440b      	add	r3, r1
 800ba70:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ba72:	2300      	movs	r3, #0
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	370c      	adds	r7, #12
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr

0800ba80 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b085      	sub	sp, #20
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	73fb      	strb	r3, [r7, #15]
 800ba90:	e00f      	b.n	800bab2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ba92:	7bfb      	ldrb	r3, [r7, #15]
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	33e0      	adds	r3, #224	@ 0xe0
 800ba98:	009b      	lsls	r3, r3, #2
 800ba9a:	4413      	add	r3, r2
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d102      	bne.n	800baac <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800baa6:	7bfb      	ldrb	r3, [r7, #15]
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	e007      	b.n	800babc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800baac:	7bfb      	ldrb	r3, [r7, #15]
 800baae:	3301      	adds	r3, #1
 800bab0:	73fb      	strb	r3, [r7, #15]
 800bab2:	7bfb      	ldrb	r3, [r7, #15]
 800bab4:	2b0f      	cmp	r3, #15
 800bab6:	d9ec      	bls.n	800ba92 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bab8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800babc:	4618      	mov	r0, r3
 800babe:	3714      	adds	r7, #20
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr

0800bac8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800bacc:	2201      	movs	r2, #1
 800bace:	490e      	ldr	r1, [pc, #56]	@ (800bb08 <MX_USB_HOST_Init+0x40>)
 800bad0:	480e      	ldr	r0, [pc, #56]	@ (800bb0c <MX_USB_HOST_Init+0x44>)
 800bad2:	f7fe fbb7 	bl	800a244 <USBH_Init>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d001      	beq.n	800bae0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800badc:	f7f8 f804 	bl	8003ae8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800bae0:	490b      	ldr	r1, [pc, #44]	@ (800bb10 <MX_USB_HOST_Init+0x48>)
 800bae2:	480a      	ldr	r0, [pc, #40]	@ (800bb0c <MX_USB_HOST_Init+0x44>)
 800bae4:	f7fe fc3c 	bl	800a360 <USBH_RegisterClass>
 800bae8:	4603      	mov	r3, r0
 800baea:	2b00      	cmp	r3, #0
 800baec:	d001      	beq.n	800baf2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800baee:	f7f7 fffb 	bl	8003ae8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800baf2:	4806      	ldr	r0, [pc, #24]	@ (800bb0c <MX_USB_HOST_Init+0x44>)
 800baf4:	f7fe fcc0 	bl	800a478 <USBH_Start>
 800baf8:	4603      	mov	r3, r0
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d001      	beq.n	800bb02 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bafe:	f7f7 fff3 	bl	8003ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bb02:	bf00      	nop
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	0800bb29 	.word	0x0800bb29
 800bb0c:	20001af0 	.word	0x20001af0
 800bb10:	20000010 	.word	0x20000010

0800bb14 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800bb18:	4802      	ldr	r0, [pc, #8]	@ (800bb24 <MX_USB_HOST_Process+0x10>)
 800bb1a:	f7fe fcbd 	bl	800a498 <USBH_Process>
}
 800bb1e:	bf00      	nop
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	20001af0 	.word	0x20001af0

0800bb28 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	460b      	mov	r3, r1
 800bb32:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bb34:	78fb      	ldrb	r3, [r7, #3]
 800bb36:	3b01      	subs	r3, #1
 800bb38:	2b04      	cmp	r3, #4
 800bb3a:	d819      	bhi.n	800bb70 <USBH_UserProcess+0x48>
 800bb3c:	a201      	add	r2, pc, #4	@ (adr r2, 800bb44 <USBH_UserProcess+0x1c>)
 800bb3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb42:	bf00      	nop
 800bb44:	0800bb71 	.word	0x0800bb71
 800bb48:	0800bb61 	.word	0x0800bb61
 800bb4c:	0800bb71 	.word	0x0800bb71
 800bb50:	0800bb69 	.word	0x0800bb69
 800bb54:	0800bb59 	.word	0x0800bb59
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bb58:	4b09      	ldr	r3, [pc, #36]	@ (800bb80 <USBH_UserProcess+0x58>)
 800bb5a:	2203      	movs	r2, #3
 800bb5c:	701a      	strb	r2, [r3, #0]
  break;
 800bb5e:	e008      	b.n	800bb72 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bb60:	4b07      	ldr	r3, [pc, #28]	@ (800bb80 <USBH_UserProcess+0x58>)
 800bb62:	2202      	movs	r2, #2
 800bb64:	701a      	strb	r2, [r3, #0]
  break;
 800bb66:	e004      	b.n	800bb72 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bb68:	4b05      	ldr	r3, [pc, #20]	@ (800bb80 <USBH_UserProcess+0x58>)
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	701a      	strb	r2, [r3, #0]
  break;
 800bb6e:	e000      	b.n	800bb72 <USBH_UserProcess+0x4a>

  default:
  break;
 800bb70:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bb72:	bf00      	nop
 800bb74:	370c      	adds	r7, #12
 800bb76:	46bd      	mov	sp, r7
 800bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7c:	4770      	bx	lr
 800bb7e:	bf00      	nop
 800bb80:	20001ec8 	.word	0x20001ec8

0800bb84 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b08a      	sub	sp, #40	@ 0x28
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb8c:	f107 0314 	add.w	r3, r7, #20
 800bb90:	2200      	movs	r2, #0
 800bb92:	601a      	str	r2, [r3, #0]
 800bb94:	605a      	str	r2, [r3, #4]
 800bb96:	609a      	str	r2, [r3, #8]
 800bb98:	60da      	str	r2, [r3, #12]
 800bb9a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bba4:	d147      	bne.n	800bc36 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bba6:	2300      	movs	r3, #0
 800bba8:	613b      	str	r3, [r7, #16]
 800bbaa:	4b25      	ldr	r3, [pc, #148]	@ (800bc40 <HAL_HCD_MspInit+0xbc>)
 800bbac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbae:	4a24      	ldr	r2, [pc, #144]	@ (800bc40 <HAL_HCD_MspInit+0xbc>)
 800bbb0:	f043 0301 	orr.w	r3, r3, #1
 800bbb4:	6313      	str	r3, [r2, #48]	@ 0x30
 800bbb6:	4b22      	ldr	r3, [pc, #136]	@ (800bc40 <HAL_HCD_MspInit+0xbc>)
 800bbb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbba:	f003 0301 	and.w	r3, r3, #1
 800bbbe:	613b      	str	r3, [r7, #16]
 800bbc0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800bbc2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800bbc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbc8:	2302      	movs	r3, #2
 800bbca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bbd0:	2303      	movs	r3, #3
 800bbd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bbd4:	230a      	movs	r3, #10
 800bbd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bbd8:	f107 0314 	add.w	r3, r7, #20
 800bbdc:	4619      	mov	r1, r3
 800bbde:	4819      	ldr	r0, [pc, #100]	@ (800bc44 <HAL_HCD_MspInit+0xc0>)
 800bbe0:	f7f9 f812 	bl	8004c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800bbe4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bbe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bbea:	2300      	movs	r3, #0
 800bbec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800bbf2:	f107 0314 	add.w	r3, r7, #20
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	4812      	ldr	r0, [pc, #72]	@ (800bc44 <HAL_HCD_MspInit+0xc0>)
 800bbfa:	f7f9 f805 	bl	8004c08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bbfe:	4b10      	ldr	r3, [pc, #64]	@ (800bc40 <HAL_HCD_MspInit+0xbc>)
 800bc00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc02:	4a0f      	ldr	r2, [pc, #60]	@ (800bc40 <HAL_HCD_MspInit+0xbc>)
 800bc04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc08:	6353      	str	r3, [r2, #52]	@ 0x34
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	60fb      	str	r3, [r7, #12]
 800bc0e:	4b0c      	ldr	r3, [pc, #48]	@ (800bc40 <HAL_HCD_MspInit+0xbc>)
 800bc10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc12:	4a0b      	ldr	r2, [pc, #44]	@ (800bc40 <HAL_HCD_MspInit+0xbc>)
 800bc14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bc18:	6453      	str	r3, [r2, #68]	@ 0x44
 800bc1a:	4b09      	ldr	r3, [pc, #36]	@ (800bc40 <HAL_HCD_MspInit+0xbc>)
 800bc1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bc22:	60fb      	str	r3, [r7, #12]
 800bc24:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bc26:	2200      	movs	r2, #0
 800bc28:	2100      	movs	r1, #0
 800bc2a:	2043      	movs	r0, #67	@ 0x43
 800bc2c:	f7f8 fbef 	bl	800440e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bc30:	2043      	movs	r0, #67	@ 0x43
 800bc32:	f7f8 fc08 	bl	8004446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bc36:	bf00      	nop
 800bc38:	3728      	adds	r7, #40	@ 0x28
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	40023800 	.word	0x40023800
 800bc44:	40020000 	.word	0x40020000

0800bc48 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 800bc56:	4618      	mov	r0, r3
 800bc58:	f7fe fff5 	bl	800ac46 <USBH_LL_IncTimer>
}
 800bc5c:	bf00      	nop
 800bc5e:	3708      	adds	r7, #8
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b082      	sub	sp, #8
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7ff f82d 	bl	800acd2 <USBH_LL_Connect>
}
 800bc78:	bf00      	nop
 800bc7a:	3708      	adds	r7, #8
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b082      	sub	sp, #8
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7ff f836 	bl	800ad00 <USBH_LL_Disconnect>
}
 800bc94:	bf00      	nop
 800bc96:	3708      	adds	r7, #8
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b083      	sub	sp, #12
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	460b      	mov	r3, r1
 800bca6:	70fb      	strb	r3, [r7, #3]
 800bca8:	4613      	mov	r3, r2
 800bcaa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800bcac:	bf00      	nop
 800bcae:	370c      	adds	r7, #12
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7fe ffe7 	bl	800ac9a <USBH_LL_PortEnabled>
}
 800bccc:	bf00      	nop
 800bcce:	3708      	adds	r7, #8
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 800bce2:	4618      	mov	r0, r3
 800bce4:	f7fe ffe7 	bl	800acb6 <USBH_LL_PortDisabled>
}
 800bce8:	bf00      	nop
 800bcea:	3708      	adds	r7, #8
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d12a      	bne.n	800bd58 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800bd02:	4a18      	ldr	r2, [pc, #96]	@ (800bd64 <USBH_LL_Init+0x74>)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4a15      	ldr	r2, [pc, #84]	@ (800bd64 <USBH_LL_Init+0x74>)
 800bd0e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bd12:	4b14      	ldr	r3, [pc, #80]	@ (800bd64 <USBH_LL_Init+0x74>)
 800bd14:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bd18:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800bd1a:	4b12      	ldr	r3, [pc, #72]	@ (800bd64 <USBH_LL_Init+0x74>)
 800bd1c:	2208      	movs	r2, #8
 800bd1e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800bd20:	4b10      	ldr	r3, [pc, #64]	@ (800bd64 <USBH_LL_Init+0x74>)
 800bd22:	2201      	movs	r2, #1
 800bd24:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bd26:	4b0f      	ldr	r3, [pc, #60]	@ (800bd64 <USBH_LL_Init+0x74>)
 800bd28:	2200      	movs	r2, #0
 800bd2a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800bd2c:	4b0d      	ldr	r3, [pc, #52]	@ (800bd64 <USBH_LL_Init+0x74>)
 800bd2e:	2202      	movs	r2, #2
 800bd30:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800bd32:	4b0c      	ldr	r3, [pc, #48]	@ (800bd64 <USBH_LL_Init+0x74>)
 800bd34:	2201      	movs	r2, #1
 800bd36:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800bd38:	480a      	ldr	r0, [pc, #40]	@ (800bd64 <USBH_LL_Init+0x74>)
 800bd3a:	f7f9 f942 	bl	8004fc2 <HAL_HCD_Init>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d001      	beq.n	800bd48 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800bd44:	f7f7 fed0 	bl	8003ae8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800bd48:	4806      	ldr	r0, [pc, #24]	@ (800bd64 <USBH_LL_Init+0x74>)
 800bd4a:	f7f9 fd26 	bl	800579a <HAL_HCD_GetCurrentFrame>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	4619      	mov	r1, r3
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f7fe ff68 	bl	800ac28 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800bd58:	2300      	movs	r3, #0
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3708      	adds	r7, #8
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	20001ecc 	.word	0x20001ecc

0800bd68 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd70:	2300      	movs	r3, #0
 800bd72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd74:	2300      	movs	r3, #0
 800bd76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7f9 fc95 	bl	80056ae <HAL_HCD_Start>
 800bd84:	4603      	mov	r3, r0
 800bd86:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bd88:	7bfb      	ldrb	r3, [r7, #15]
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f000 f95c 	bl	800c048 <USBH_Get_USB_Status>
 800bd90:	4603      	mov	r3, r0
 800bd92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd94:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3710      	adds	r7, #16
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b084      	sub	sp, #16
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bda6:	2300      	movs	r3, #0
 800bda8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7f9 fc9d 	bl	80056f4 <HAL_HCD_Stop>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bdbe:	7bfb      	ldrb	r3, [r7, #15]
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f000 f941 	bl	800c048 <USBH_Get_USB_Status>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdca:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3710      	adds	r7, #16
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800bddc:	2301      	movs	r3, #1
 800bdde:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7f9 fce5 	bl	80057b6 <HAL_HCD_GetCurrentSpeed>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b02      	cmp	r3, #2
 800bdf0:	d00c      	beq.n	800be0c <USBH_LL_GetSpeed+0x38>
 800bdf2:	2b02      	cmp	r3, #2
 800bdf4:	d80d      	bhi.n	800be12 <USBH_LL_GetSpeed+0x3e>
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d002      	beq.n	800be00 <USBH_LL_GetSpeed+0x2c>
 800bdfa:	2b01      	cmp	r3, #1
 800bdfc:	d003      	beq.n	800be06 <USBH_LL_GetSpeed+0x32>
 800bdfe:	e008      	b.n	800be12 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800be00:	2300      	movs	r3, #0
 800be02:	73fb      	strb	r3, [r7, #15]
    break;
 800be04:	e008      	b.n	800be18 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800be06:	2301      	movs	r3, #1
 800be08:	73fb      	strb	r3, [r7, #15]
    break;
 800be0a:	e005      	b.n	800be18 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800be0c:	2302      	movs	r3, #2
 800be0e:	73fb      	strb	r3, [r7, #15]
    break;
 800be10:	e002      	b.n	800be18 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800be12:	2301      	movs	r3, #1
 800be14:	73fb      	strb	r3, [r7, #15]
    break;
 800be16:	bf00      	nop
  }
  return  speed;
 800be18:	7bfb      	ldrb	r3, [r7, #15]
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3710      	adds	r7, #16
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}

0800be22 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800be22:	b580      	push	{r7, lr}
 800be24:	b084      	sub	sp, #16
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be2a:	2300      	movs	r3, #0
 800be2c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be2e:	2300      	movs	r3, #0
 800be30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800be38:	4618      	mov	r0, r3
 800be3a:	f7f9 fc78 	bl	800572e <HAL_HCD_ResetPort>
 800be3e:	4603      	mov	r3, r0
 800be40:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800be42:	7bfb      	ldrb	r3, [r7, #15]
 800be44:	4618      	mov	r0, r3
 800be46:	f000 f8ff 	bl	800c048 <USBH_Get_USB_Status>
 800be4a:	4603      	mov	r3, r0
 800be4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800be50:	4618      	mov	r0, r3
 800be52:	3710      	adds	r7, #16
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	460b      	mov	r3, r1
 800be62:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800be6a:	78fa      	ldrb	r2, [r7, #3]
 800be6c:	4611      	mov	r1, r2
 800be6e:	4618      	mov	r0, r3
 800be70:	f7f9 fc7f 	bl	8005772 <HAL_HCD_HC_GetXferCount>
 800be74:	4603      	mov	r3, r0
}
 800be76:	4618      	mov	r0, r3
 800be78:	3708      	adds	r7, #8
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}

0800be7e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800be7e:	b590      	push	{r4, r7, lr}
 800be80:	b089      	sub	sp, #36	@ 0x24
 800be82:	af04      	add	r7, sp, #16
 800be84:	6078      	str	r0, [r7, #4]
 800be86:	4608      	mov	r0, r1
 800be88:	4611      	mov	r1, r2
 800be8a:	461a      	mov	r2, r3
 800be8c:	4603      	mov	r3, r0
 800be8e:	70fb      	strb	r3, [r7, #3]
 800be90:	460b      	mov	r3, r1
 800be92:	70bb      	strb	r3, [r7, #2]
 800be94:	4613      	mov	r3, r2
 800be96:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be98:	2300      	movs	r3, #0
 800be9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be9c:	2300      	movs	r3, #0
 800be9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800bea6:	787c      	ldrb	r4, [r7, #1]
 800bea8:	78ba      	ldrb	r2, [r7, #2]
 800beaa:	78f9      	ldrb	r1, [r7, #3]
 800beac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800beae:	9302      	str	r3, [sp, #8]
 800beb0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800beb4:	9301      	str	r3, [sp, #4]
 800beb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800beba:	9300      	str	r3, [sp, #0]
 800bebc:	4623      	mov	r3, r4
 800bebe:	f7f9 f8e2 	bl	8005086 <HAL_HCD_HC_Init>
 800bec2:	4603      	mov	r3, r0
 800bec4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bec6:	7bfb      	ldrb	r3, [r7, #15]
 800bec8:	4618      	mov	r0, r3
 800beca:	f000 f8bd 	bl	800c048 <USBH_Get_USB_Status>
 800bece:	4603      	mov	r3, r0
 800bed0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bed2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3714      	adds	r7, #20
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd90      	pop	{r4, r7, pc}

0800bedc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	460b      	mov	r3, r1
 800bee6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bee8:	2300      	movs	r3, #0
 800beea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800beec:	2300      	movs	r3, #0
 800beee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bef6:	78fa      	ldrb	r2, [r7, #3]
 800bef8:	4611      	mov	r1, r2
 800befa:	4618      	mov	r0, r3
 800befc:	f7f9 f952 	bl	80051a4 <HAL_HCD_HC_Halt>
 800bf00:	4603      	mov	r3, r0
 800bf02:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bf04:	7bfb      	ldrb	r3, [r7, #15]
 800bf06:	4618      	mov	r0, r3
 800bf08:	f000 f89e 	bl	800c048 <USBH_Get_USB_Status>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf10:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bf1a:	b590      	push	{r4, r7, lr}
 800bf1c:	b089      	sub	sp, #36	@ 0x24
 800bf1e:	af04      	add	r7, sp, #16
 800bf20:	6078      	str	r0, [r7, #4]
 800bf22:	4608      	mov	r0, r1
 800bf24:	4611      	mov	r1, r2
 800bf26:	461a      	mov	r2, r3
 800bf28:	4603      	mov	r3, r0
 800bf2a:	70fb      	strb	r3, [r7, #3]
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	70bb      	strb	r3, [r7, #2]
 800bf30:	4613      	mov	r3, r2
 800bf32:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf34:	2300      	movs	r3, #0
 800bf36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800bf42:	787c      	ldrb	r4, [r7, #1]
 800bf44:	78ba      	ldrb	r2, [r7, #2]
 800bf46:	78f9      	ldrb	r1, [r7, #3]
 800bf48:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800bf4c:	9303      	str	r3, [sp, #12]
 800bf4e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bf50:	9302      	str	r3, [sp, #8]
 800bf52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf54:	9301      	str	r3, [sp, #4]
 800bf56:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf5a:	9300      	str	r3, [sp, #0]
 800bf5c:	4623      	mov	r3, r4
 800bf5e:	f7f9 f945 	bl	80051ec <HAL_HCD_HC_SubmitRequest>
 800bf62:	4603      	mov	r3, r0
 800bf64:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bf66:	7bfb      	ldrb	r3, [r7, #15]
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f000 f86d 	bl	800c048 <USBH_Get_USB_Status>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf72:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3714      	adds	r7, #20
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd90      	pop	{r4, r7, pc}

0800bf7c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b082      	sub	sp, #8
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	460b      	mov	r3, r1
 800bf86:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bf8e:	78fa      	ldrb	r2, [r7, #3]
 800bf90:	4611      	mov	r1, r2
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7f9 fbd9 	bl	800574a <HAL_HCD_HC_GetURBState>
 800bf98:	4603      	mov	r3, r0
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3708      	adds	r7, #8
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}

0800bfa2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bfa2:	b580      	push	{r7, lr}
 800bfa4:	b082      	sub	sp, #8
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
 800bfaa:	460b      	mov	r3, r1
 800bfac:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d103      	bne.n	800bfc0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800bfb8:	78fb      	ldrb	r3, [r7, #3]
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f000 f870 	bl	800c0a0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bfc0:	20c8      	movs	r0, #200	@ 0xc8
 800bfc2:	f7f8 f925 	bl	8004210 <HAL_Delay>
  return USBH_OK;
 800bfc6:	2300      	movs	r3, #0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3708      	adds	r7, #8
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b085      	sub	sp, #20
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	460b      	mov	r3, r1
 800bfda:	70fb      	strb	r3, [r7, #3]
 800bfdc:	4613      	mov	r3, r2
 800bfde:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bfe6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bfe8:	78fb      	ldrb	r3, [r7, #3]
 800bfea:	68fa      	ldr	r2, [r7, #12]
 800bfec:	212c      	movs	r1, #44	@ 0x2c
 800bfee:	fb01 f303 	mul.w	r3, r1, r3
 800bff2:	4413      	add	r3, r2
 800bff4:	333b      	adds	r3, #59	@ 0x3b
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d009      	beq.n	800c010 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bffc:	78fb      	ldrb	r3, [r7, #3]
 800bffe:	68fa      	ldr	r2, [r7, #12]
 800c000:	212c      	movs	r1, #44	@ 0x2c
 800c002:	fb01 f303 	mul.w	r3, r1, r3
 800c006:	4413      	add	r3, r2
 800c008:	3354      	adds	r3, #84	@ 0x54
 800c00a:	78ba      	ldrb	r2, [r7, #2]
 800c00c:	701a      	strb	r2, [r3, #0]
 800c00e:	e008      	b.n	800c022 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c010:	78fb      	ldrb	r3, [r7, #3]
 800c012:	68fa      	ldr	r2, [r7, #12]
 800c014:	212c      	movs	r1, #44	@ 0x2c
 800c016:	fb01 f303 	mul.w	r3, r1, r3
 800c01a:	4413      	add	r3, r2
 800c01c:	3355      	adds	r3, #85	@ 0x55
 800c01e:	78ba      	ldrb	r2, [r7, #2]
 800c020:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c022:	2300      	movs	r3, #0
}
 800c024:	4618      	mov	r0, r3
 800c026:	3714      	adds	r7, #20
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr

0800c030 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f7f8 f8e9 	bl	8004210 <HAL_Delay>
}
 800c03e:	bf00      	nop
 800c040:	3708      	adds	r7, #8
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
	...

0800c048 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c048:	b480      	push	{r7}
 800c04a:	b085      	sub	sp, #20
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	4603      	mov	r3, r0
 800c050:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c052:	2300      	movs	r3, #0
 800c054:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c056:	79fb      	ldrb	r3, [r7, #7]
 800c058:	2b03      	cmp	r3, #3
 800c05a:	d817      	bhi.n	800c08c <USBH_Get_USB_Status+0x44>
 800c05c:	a201      	add	r2, pc, #4	@ (adr r2, 800c064 <USBH_Get_USB_Status+0x1c>)
 800c05e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c062:	bf00      	nop
 800c064:	0800c075 	.word	0x0800c075
 800c068:	0800c07b 	.word	0x0800c07b
 800c06c:	0800c081 	.word	0x0800c081
 800c070:	0800c087 	.word	0x0800c087
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c074:	2300      	movs	r3, #0
 800c076:	73fb      	strb	r3, [r7, #15]
    break;
 800c078:	e00b      	b.n	800c092 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c07a:	2302      	movs	r3, #2
 800c07c:	73fb      	strb	r3, [r7, #15]
    break;
 800c07e:	e008      	b.n	800c092 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c080:	2301      	movs	r3, #1
 800c082:	73fb      	strb	r3, [r7, #15]
    break;
 800c084:	e005      	b.n	800c092 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c086:	2302      	movs	r3, #2
 800c088:	73fb      	strb	r3, [r7, #15]
    break;
 800c08a:	e002      	b.n	800c092 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c08c:	2302      	movs	r3, #2
 800c08e:	73fb      	strb	r3, [r7, #15]
    break;
 800c090:	bf00      	nop
  }
  return usb_status;
 800c092:	7bfb      	ldrb	r3, [r7, #15]
}
 800c094:	4618      	mov	r0, r3
 800c096:	3714      	adds	r7, #20
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr

0800c0a0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c0aa:	79fb      	ldrb	r3, [r7, #7]
 800c0ac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c0ae:	79fb      	ldrb	r3, [r7, #7]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d102      	bne.n	800c0ba <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	73fb      	strb	r3, [r7, #15]
 800c0b8:	e001      	b.n	800c0be <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 800c0be:	7bfb      	ldrb	r3, [r7, #15]
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	2140      	movs	r1, #64	@ 0x40
 800c0c4:	4803      	ldr	r0, [pc, #12]	@ (800c0d4 <MX_DriverVbusFS+0x34>)
 800c0c6:	f7f8 ff63 	bl	8004f90 <HAL_GPIO_WritePin>
}
 800c0ca:	bf00      	nop
 800c0cc:	3710      	adds	r7, #16
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	bf00      	nop
 800c0d4:	40021800 	.word	0x40021800

0800c0d8 <malloc>:
 800c0d8:	4b02      	ldr	r3, [pc, #8]	@ (800c0e4 <malloc+0xc>)
 800c0da:	4601      	mov	r1, r0
 800c0dc:	6818      	ldr	r0, [r3, #0]
 800c0de:	f000 b82d 	b.w	800c13c <_malloc_r>
 800c0e2:	bf00      	nop
 800c0e4:	2000003c 	.word	0x2000003c

0800c0e8 <free>:
 800c0e8:	4b02      	ldr	r3, [pc, #8]	@ (800c0f4 <free+0xc>)
 800c0ea:	4601      	mov	r1, r0
 800c0ec:	6818      	ldr	r0, [r3, #0]
 800c0ee:	f002 bedb 	b.w	800eea8 <_free_r>
 800c0f2:	bf00      	nop
 800c0f4:	2000003c 	.word	0x2000003c

0800c0f8 <sbrk_aligned>:
 800c0f8:	b570      	push	{r4, r5, r6, lr}
 800c0fa:	4e0f      	ldr	r6, [pc, #60]	@ (800c138 <sbrk_aligned+0x40>)
 800c0fc:	460c      	mov	r4, r1
 800c0fe:	6831      	ldr	r1, [r6, #0]
 800c100:	4605      	mov	r5, r0
 800c102:	b911      	cbnz	r1, 800c10a <sbrk_aligned+0x12>
 800c104:	f002 f80e 	bl	800e124 <_sbrk_r>
 800c108:	6030      	str	r0, [r6, #0]
 800c10a:	4621      	mov	r1, r4
 800c10c:	4628      	mov	r0, r5
 800c10e:	f002 f809 	bl	800e124 <_sbrk_r>
 800c112:	1c43      	adds	r3, r0, #1
 800c114:	d103      	bne.n	800c11e <sbrk_aligned+0x26>
 800c116:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c11a:	4620      	mov	r0, r4
 800c11c:	bd70      	pop	{r4, r5, r6, pc}
 800c11e:	1cc4      	adds	r4, r0, #3
 800c120:	f024 0403 	bic.w	r4, r4, #3
 800c124:	42a0      	cmp	r0, r4
 800c126:	d0f8      	beq.n	800c11a <sbrk_aligned+0x22>
 800c128:	1a21      	subs	r1, r4, r0
 800c12a:	4628      	mov	r0, r5
 800c12c:	f001 fffa 	bl	800e124 <_sbrk_r>
 800c130:	3001      	adds	r0, #1
 800c132:	d1f2      	bne.n	800c11a <sbrk_aligned+0x22>
 800c134:	e7ef      	b.n	800c116 <sbrk_aligned+0x1e>
 800c136:	bf00      	nop
 800c138:	200021d0 	.word	0x200021d0

0800c13c <_malloc_r>:
 800c13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c140:	1ccd      	adds	r5, r1, #3
 800c142:	f025 0503 	bic.w	r5, r5, #3
 800c146:	3508      	adds	r5, #8
 800c148:	2d0c      	cmp	r5, #12
 800c14a:	bf38      	it	cc
 800c14c:	250c      	movcc	r5, #12
 800c14e:	2d00      	cmp	r5, #0
 800c150:	4606      	mov	r6, r0
 800c152:	db01      	blt.n	800c158 <_malloc_r+0x1c>
 800c154:	42a9      	cmp	r1, r5
 800c156:	d904      	bls.n	800c162 <_malloc_r+0x26>
 800c158:	230c      	movs	r3, #12
 800c15a:	6033      	str	r3, [r6, #0]
 800c15c:	2000      	movs	r0, #0
 800c15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c162:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c238 <_malloc_r+0xfc>
 800c166:	f000 f869 	bl	800c23c <__malloc_lock>
 800c16a:	f8d8 3000 	ldr.w	r3, [r8]
 800c16e:	461c      	mov	r4, r3
 800c170:	bb44      	cbnz	r4, 800c1c4 <_malloc_r+0x88>
 800c172:	4629      	mov	r1, r5
 800c174:	4630      	mov	r0, r6
 800c176:	f7ff ffbf 	bl	800c0f8 <sbrk_aligned>
 800c17a:	1c43      	adds	r3, r0, #1
 800c17c:	4604      	mov	r4, r0
 800c17e:	d158      	bne.n	800c232 <_malloc_r+0xf6>
 800c180:	f8d8 4000 	ldr.w	r4, [r8]
 800c184:	4627      	mov	r7, r4
 800c186:	2f00      	cmp	r7, #0
 800c188:	d143      	bne.n	800c212 <_malloc_r+0xd6>
 800c18a:	2c00      	cmp	r4, #0
 800c18c:	d04b      	beq.n	800c226 <_malloc_r+0xea>
 800c18e:	6823      	ldr	r3, [r4, #0]
 800c190:	4639      	mov	r1, r7
 800c192:	4630      	mov	r0, r6
 800c194:	eb04 0903 	add.w	r9, r4, r3
 800c198:	f001 ffc4 	bl	800e124 <_sbrk_r>
 800c19c:	4581      	cmp	r9, r0
 800c19e:	d142      	bne.n	800c226 <_malloc_r+0xea>
 800c1a0:	6821      	ldr	r1, [r4, #0]
 800c1a2:	1a6d      	subs	r5, r5, r1
 800c1a4:	4629      	mov	r1, r5
 800c1a6:	4630      	mov	r0, r6
 800c1a8:	f7ff ffa6 	bl	800c0f8 <sbrk_aligned>
 800c1ac:	3001      	adds	r0, #1
 800c1ae:	d03a      	beq.n	800c226 <_malloc_r+0xea>
 800c1b0:	6823      	ldr	r3, [r4, #0]
 800c1b2:	442b      	add	r3, r5
 800c1b4:	6023      	str	r3, [r4, #0]
 800c1b6:	f8d8 3000 	ldr.w	r3, [r8]
 800c1ba:	685a      	ldr	r2, [r3, #4]
 800c1bc:	bb62      	cbnz	r2, 800c218 <_malloc_r+0xdc>
 800c1be:	f8c8 7000 	str.w	r7, [r8]
 800c1c2:	e00f      	b.n	800c1e4 <_malloc_r+0xa8>
 800c1c4:	6822      	ldr	r2, [r4, #0]
 800c1c6:	1b52      	subs	r2, r2, r5
 800c1c8:	d420      	bmi.n	800c20c <_malloc_r+0xd0>
 800c1ca:	2a0b      	cmp	r2, #11
 800c1cc:	d917      	bls.n	800c1fe <_malloc_r+0xc2>
 800c1ce:	1961      	adds	r1, r4, r5
 800c1d0:	42a3      	cmp	r3, r4
 800c1d2:	6025      	str	r5, [r4, #0]
 800c1d4:	bf18      	it	ne
 800c1d6:	6059      	strne	r1, [r3, #4]
 800c1d8:	6863      	ldr	r3, [r4, #4]
 800c1da:	bf08      	it	eq
 800c1dc:	f8c8 1000 	streq.w	r1, [r8]
 800c1e0:	5162      	str	r2, [r4, r5]
 800c1e2:	604b      	str	r3, [r1, #4]
 800c1e4:	4630      	mov	r0, r6
 800c1e6:	f000 f82f 	bl	800c248 <__malloc_unlock>
 800c1ea:	f104 000b 	add.w	r0, r4, #11
 800c1ee:	1d23      	adds	r3, r4, #4
 800c1f0:	f020 0007 	bic.w	r0, r0, #7
 800c1f4:	1ac2      	subs	r2, r0, r3
 800c1f6:	bf1c      	itt	ne
 800c1f8:	1a1b      	subne	r3, r3, r0
 800c1fa:	50a3      	strne	r3, [r4, r2]
 800c1fc:	e7af      	b.n	800c15e <_malloc_r+0x22>
 800c1fe:	6862      	ldr	r2, [r4, #4]
 800c200:	42a3      	cmp	r3, r4
 800c202:	bf0c      	ite	eq
 800c204:	f8c8 2000 	streq.w	r2, [r8]
 800c208:	605a      	strne	r2, [r3, #4]
 800c20a:	e7eb      	b.n	800c1e4 <_malloc_r+0xa8>
 800c20c:	4623      	mov	r3, r4
 800c20e:	6864      	ldr	r4, [r4, #4]
 800c210:	e7ae      	b.n	800c170 <_malloc_r+0x34>
 800c212:	463c      	mov	r4, r7
 800c214:	687f      	ldr	r7, [r7, #4]
 800c216:	e7b6      	b.n	800c186 <_malloc_r+0x4a>
 800c218:	461a      	mov	r2, r3
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	42a3      	cmp	r3, r4
 800c21e:	d1fb      	bne.n	800c218 <_malloc_r+0xdc>
 800c220:	2300      	movs	r3, #0
 800c222:	6053      	str	r3, [r2, #4]
 800c224:	e7de      	b.n	800c1e4 <_malloc_r+0xa8>
 800c226:	230c      	movs	r3, #12
 800c228:	6033      	str	r3, [r6, #0]
 800c22a:	4630      	mov	r0, r6
 800c22c:	f000 f80c 	bl	800c248 <__malloc_unlock>
 800c230:	e794      	b.n	800c15c <_malloc_r+0x20>
 800c232:	6005      	str	r5, [r0, #0]
 800c234:	e7d6      	b.n	800c1e4 <_malloc_r+0xa8>
 800c236:	bf00      	nop
 800c238:	200021d4 	.word	0x200021d4

0800c23c <__malloc_lock>:
 800c23c:	4801      	ldr	r0, [pc, #4]	@ (800c244 <__malloc_lock+0x8>)
 800c23e:	f001 bfbf 	b.w	800e1c0 <__retarget_lock_acquire_recursive>
 800c242:	bf00      	nop
 800c244:	20002318 	.word	0x20002318

0800c248 <__malloc_unlock>:
 800c248:	4801      	ldr	r0, [pc, #4]	@ (800c250 <__malloc_unlock+0x8>)
 800c24a:	f001 bfba 	b.w	800e1c2 <__retarget_lock_release_recursive>
 800c24e:	bf00      	nop
 800c250:	20002318 	.word	0x20002318

0800c254 <__cvt>:
 800c254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c258:	ec57 6b10 	vmov	r6, r7, d0
 800c25c:	2f00      	cmp	r7, #0
 800c25e:	460c      	mov	r4, r1
 800c260:	4619      	mov	r1, r3
 800c262:	463b      	mov	r3, r7
 800c264:	bfbb      	ittet	lt
 800c266:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c26a:	461f      	movlt	r7, r3
 800c26c:	2300      	movge	r3, #0
 800c26e:	232d      	movlt	r3, #45	@ 0x2d
 800c270:	700b      	strb	r3, [r1, #0]
 800c272:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c274:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c278:	4691      	mov	r9, r2
 800c27a:	f023 0820 	bic.w	r8, r3, #32
 800c27e:	bfbc      	itt	lt
 800c280:	4632      	movlt	r2, r6
 800c282:	4616      	movlt	r6, r2
 800c284:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c288:	d005      	beq.n	800c296 <__cvt+0x42>
 800c28a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c28e:	d100      	bne.n	800c292 <__cvt+0x3e>
 800c290:	3401      	adds	r4, #1
 800c292:	2102      	movs	r1, #2
 800c294:	e000      	b.n	800c298 <__cvt+0x44>
 800c296:	2103      	movs	r1, #3
 800c298:	ab03      	add	r3, sp, #12
 800c29a:	9301      	str	r3, [sp, #4]
 800c29c:	ab02      	add	r3, sp, #8
 800c29e:	9300      	str	r3, [sp, #0]
 800c2a0:	ec47 6b10 	vmov	d0, r6, r7
 800c2a4:	4653      	mov	r3, sl
 800c2a6:	4622      	mov	r2, r4
 800c2a8:	f002 f83a 	bl	800e320 <_dtoa_r>
 800c2ac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c2b0:	4605      	mov	r5, r0
 800c2b2:	d119      	bne.n	800c2e8 <__cvt+0x94>
 800c2b4:	f019 0f01 	tst.w	r9, #1
 800c2b8:	d00e      	beq.n	800c2d8 <__cvt+0x84>
 800c2ba:	eb00 0904 	add.w	r9, r0, r4
 800c2be:	2200      	movs	r2, #0
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	4630      	mov	r0, r6
 800c2c4:	4639      	mov	r1, r7
 800c2c6:	f7f4 fc1f 	bl	8000b08 <__aeabi_dcmpeq>
 800c2ca:	b108      	cbz	r0, 800c2d0 <__cvt+0x7c>
 800c2cc:	f8cd 900c 	str.w	r9, [sp, #12]
 800c2d0:	2230      	movs	r2, #48	@ 0x30
 800c2d2:	9b03      	ldr	r3, [sp, #12]
 800c2d4:	454b      	cmp	r3, r9
 800c2d6:	d31e      	bcc.n	800c316 <__cvt+0xc2>
 800c2d8:	9b03      	ldr	r3, [sp, #12]
 800c2da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c2dc:	1b5b      	subs	r3, r3, r5
 800c2de:	4628      	mov	r0, r5
 800c2e0:	6013      	str	r3, [r2, #0]
 800c2e2:	b004      	add	sp, #16
 800c2e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c2ec:	eb00 0904 	add.w	r9, r0, r4
 800c2f0:	d1e5      	bne.n	800c2be <__cvt+0x6a>
 800c2f2:	7803      	ldrb	r3, [r0, #0]
 800c2f4:	2b30      	cmp	r3, #48	@ 0x30
 800c2f6:	d10a      	bne.n	800c30e <__cvt+0xba>
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	4630      	mov	r0, r6
 800c2fe:	4639      	mov	r1, r7
 800c300:	f7f4 fc02 	bl	8000b08 <__aeabi_dcmpeq>
 800c304:	b918      	cbnz	r0, 800c30e <__cvt+0xba>
 800c306:	f1c4 0401 	rsb	r4, r4, #1
 800c30a:	f8ca 4000 	str.w	r4, [sl]
 800c30e:	f8da 3000 	ldr.w	r3, [sl]
 800c312:	4499      	add	r9, r3
 800c314:	e7d3      	b.n	800c2be <__cvt+0x6a>
 800c316:	1c59      	adds	r1, r3, #1
 800c318:	9103      	str	r1, [sp, #12]
 800c31a:	701a      	strb	r2, [r3, #0]
 800c31c:	e7d9      	b.n	800c2d2 <__cvt+0x7e>

0800c31e <__exponent>:
 800c31e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c320:	2900      	cmp	r1, #0
 800c322:	bfba      	itte	lt
 800c324:	4249      	neglt	r1, r1
 800c326:	232d      	movlt	r3, #45	@ 0x2d
 800c328:	232b      	movge	r3, #43	@ 0x2b
 800c32a:	2909      	cmp	r1, #9
 800c32c:	7002      	strb	r2, [r0, #0]
 800c32e:	7043      	strb	r3, [r0, #1]
 800c330:	dd29      	ble.n	800c386 <__exponent+0x68>
 800c332:	f10d 0307 	add.w	r3, sp, #7
 800c336:	461d      	mov	r5, r3
 800c338:	270a      	movs	r7, #10
 800c33a:	461a      	mov	r2, r3
 800c33c:	fbb1 f6f7 	udiv	r6, r1, r7
 800c340:	fb07 1416 	mls	r4, r7, r6, r1
 800c344:	3430      	adds	r4, #48	@ 0x30
 800c346:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c34a:	460c      	mov	r4, r1
 800c34c:	2c63      	cmp	r4, #99	@ 0x63
 800c34e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800c352:	4631      	mov	r1, r6
 800c354:	dcf1      	bgt.n	800c33a <__exponent+0x1c>
 800c356:	3130      	adds	r1, #48	@ 0x30
 800c358:	1e94      	subs	r4, r2, #2
 800c35a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c35e:	1c41      	adds	r1, r0, #1
 800c360:	4623      	mov	r3, r4
 800c362:	42ab      	cmp	r3, r5
 800c364:	d30a      	bcc.n	800c37c <__exponent+0x5e>
 800c366:	f10d 0309 	add.w	r3, sp, #9
 800c36a:	1a9b      	subs	r3, r3, r2
 800c36c:	42ac      	cmp	r4, r5
 800c36e:	bf88      	it	hi
 800c370:	2300      	movhi	r3, #0
 800c372:	3302      	adds	r3, #2
 800c374:	4403      	add	r3, r0
 800c376:	1a18      	subs	r0, r3, r0
 800c378:	b003      	add	sp, #12
 800c37a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c37c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c380:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c384:	e7ed      	b.n	800c362 <__exponent+0x44>
 800c386:	2330      	movs	r3, #48	@ 0x30
 800c388:	3130      	adds	r1, #48	@ 0x30
 800c38a:	7083      	strb	r3, [r0, #2]
 800c38c:	70c1      	strb	r1, [r0, #3]
 800c38e:	1d03      	adds	r3, r0, #4
 800c390:	e7f1      	b.n	800c376 <__exponent+0x58>
	...

0800c394 <_printf_float>:
 800c394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c398:	b08d      	sub	sp, #52	@ 0x34
 800c39a:	460c      	mov	r4, r1
 800c39c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c3a0:	4616      	mov	r6, r2
 800c3a2:	461f      	mov	r7, r3
 800c3a4:	4605      	mov	r5, r0
 800c3a6:	f001 fe85 	bl	800e0b4 <_localeconv_r>
 800c3aa:	6803      	ldr	r3, [r0, #0]
 800c3ac:	9304      	str	r3, [sp, #16]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7f3 ff7e 	bl	80002b0 <strlen>
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3b8:	f8d8 3000 	ldr.w	r3, [r8]
 800c3bc:	9005      	str	r0, [sp, #20]
 800c3be:	3307      	adds	r3, #7
 800c3c0:	f023 0307 	bic.w	r3, r3, #7
 800c3c4:	f103 0208 	add.w	r2, r3, #8
 800c3c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c3cc:	f8d4 b000 	ldr.w	fp, [r4]
 800c3d0:	f8c8 2000 	str.w	r2, [r8]
 800c3d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c3d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c3dc:	9307      	str	r3, [sp, #28]
 800c3de:	f8cd 8018 	str.w	r8, [sp, #24]
 800c3e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c3e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3ea:	4b9c      	ldr	r3, [pc, #624]	@ (800c65c <_printf_float+0x2c8>)
 800c3ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c3f0:	f7f4 fbbc 	bl	8000b6c <__aeabi_dcmpun>
 800c3f4:	bb70      	cbnz	r0, 800c454 <_printf_float+0xc0>
 800c3f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3fa:	4b98      	ldr	r3, [pc, #608]	@ (800c65c <_printf_float+0x2c8>)
 800c3fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c400:	f7f4 fb96 	bl	8000b30 <__aeabi_dcmple>
 800c404:	bb30      	cbnz	r0, 800c454 <_printf_float+0xc0>
 800c406:	2200      	movs	r2, #0
 800c408:	2300      	movs	r3, #0
 800c40a:	4640      	mov	r0, r8
 800c40c:	4649      	mov	r1, r9
 800c40e:	f7f4 fb85 	bl	8000b1c <__aeabi_dcmplt>
 800c412:	b110      	cbz	r0, 800c41a <_printf_float+0x86>
 800c414:	232d      	movs	r3, #45	@ 0x2d
 800c416:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c41a:	4a91      	ldr	r2, [pc, #580]	@ (800c660 <_printf_float+0x2cc>)
 800c41c:	4b91      	ldr	r3, [pc, #580]	@ (800c664 <_printf_float+0x2d0>)
 800c41e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c422:	bf94      	ite	ls
 800c424:	4690      	movls	r8, r2
 800c426:	4698      	movhi	r8, r3
 800c428:	2303      	movs	r3, #3
 800c42a:	6123      	str	r3, [r4, #16]
 800c42c:	f02b 0304 	bic.w	r3, fp, #4
 800c430:	6023      	str	r3, [r4, #0]
 800c432:	f04f 0900 	mov.w	r9, #0
 800c436:	9700      	str	r7, [sp, #0]
 800c438:	4633      	mov	r3, r6
 800c43a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c43c:	4621      	mov	r1, r4
 800c43e:	4628      	mov	r0, r5
 800c440:	f000 f9d2 	bl	800c7e8 <_printf_common>
 800c444:	3001      	adds	r0, #1
 800c446:	f040 808d 	bne.w	800c564 <_printf_float+0x1d0>
 800c44a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c44e:	b00d      	add	sp, #52	@ 0x34
 800c450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c454:	4642      	mov	r2, r8
 800c456:	464b      	mov	r3, r9
 800c458:	4640      	mov	r0, r8
 800c45a:	4649      	mov	r1, r9
 800c45c:	f7f4 fb86 	bl	8000b6c <__aeabi_dcmpun>
 800c460:	b140      	cbz	r0, 800c474 <_printf_float+0xe0>
 800c462:	464b      	mov	r3, r9
 800c464:	2b00      	cmp	r3, #0
 800c466:	bfbc      	itt	lt
 800c468:	232d      	movlt	r3, #45	@ 0x2d
 800c46a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c46e:	4a7e      	ldr	r2, [pc, #504]	@ (800c668 <_printf_float+0x2d4>)
 800c470:	4b7e      	ldr	r3, [pc, #504]	@ (800c66c <_printf_float+0x2d8>)
 800c472:	e7d4      	b.n	800c41e <_printf_float+0x8a>
 800c474:	6863      	ldr	r3, [r4, #4]
 800c476:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c47a:	9206      	str	r2, [sp, #24]
 800c47c:	1c5a      	adds	r2, r3, #1
 800c47e:	d13b      	bne.n	800c4f8 <_printf_float+0x164>
 800c480:	2306      	movs	r3, #6
 800c482:	6063      	str	r3, [r4, #4]
 800c484:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c488:	2300      	movs	r3, #0
 800c48a:	6022      	str	r2, [r4, #0]
 800c48c:	9303      	str	r3, [sp, #12]
 800c48e:	ab0a      	add	r3, sp, #40	@ 0x28
 800c490:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c494:	ab09      	add	r3, sp, #36	@ 0x24
 800c496:	9300      	str	r3, [sp, #0]
 800c498:	6861      	ldr	r1, [r4, #4]
 800c49a:	ec49 8b10 	vmov	d0, r8, r9
 800c49e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c4a2:	4628      	mov	r0, r5
 800c4a4:	f7ff fed6 	bl	800c254 <__cvt>
 800c4a8:	9b06      	ldr	r3, [sp, #24]
 800c4aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c4ac:	2b47      	cmp	r3, #71	@ 0x47
 800c4ae:	4680      	mov	r8, r0
 800c4b0:	d129      	bne.n	800c506 <_printf_float+0x172>
 800c4b2:	1cc8      	adds	r0, r1, #3
 800c4b4:	db02      	blt.n	800c4bc <_printf_float+0x128>
 800c4b6:	6863      	ldr	r3, [r4, #4]
 800c4b8:	4299      	cmp	r1, r3
 800c4ba:	dd41      	ble.n	800c540 <_printf_float+0x1ac>
 800c4bc:	f1aa 0a02 	sub.w	sl, sl, #2
 800c4c0:	fa5f fa8a 	uxtb.w	sl, sl
 800c4c4:	3901      	subs	r1, #1
 800c4c6:	4652      	mov	r2, sl
 800c4c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c4cc:	9109      	str	r1, [sp, #36]	@ 0x24
 800c4ce:	f7ff ff26 	bl	800c31e <__exponent>
 800c4d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c4d4:	1813      	adds	r3, r2, r0
 800c4d6:	2a01      	cmp	r2, #1
 800c4d8:	4681      	mov	r9, r0
 800c4da:	6123      	str	r3, [r4, #16]
 800c4dc:	dc02      	bgt.n	800c4e4 <_printf_float+0x150>
 800c4de:	6822      	ldr	r2, [r4, #0]
 800c4e0:	07d2      	lsls	r2, r2, #31
 800c4e2:	d501      	bpl.n	800c4e8 <_printf_float+0x154>
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	6123      	str	r3, [r4, #16]
 800c4e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d0a2      	beq.n	800c436 <_printf_float+0xa2>
 800c4f0:	232d      	movs	r3, #45	@ 0x2d
 800c4f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c4f6:	e79e      	b.n	800c436 <_printf_float+0xa2>
 800c4f8:	9a06      	ldr	r2, [sp, #24]
 800c4fa:	2a47      	cmp	r2, #71	@ 0x47
 800c4fc:	d1c2      	bne.n	800c484 <_printf_float+0xf0>
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d1c0      	bne.n	800c484 <_printf_float+0xf0>
 800c502:	2301      	movs	r3, #1
 800c504:	e7bd      	b.n	800c482 <_printf_float+0xee>
 800c506:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c50a:	d9db      	bls.n	800c4c4 <_printf_float+0x130>
 800c50c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c510:	d118      	bne.n	800c544 <_printf_float+0x1b0>
 800c512:	2900      	cmp	r1, #0
 800c514:	6863      	ldr	r3, [r4, #4]
 800c516:	dd0b      	ble.n	800c530 <_printf_float+0x19c>
 800c518:	6121      	str	r1, [r4, #16]
 800c51a:	b913      	cbnz	r3, 800c522 <_printf_float+0x18e>
 800c51c:	6822      	ldr	r2, [r4, #0]
 800c51e:	07d0      	lsls	r0, r2, #31
 800c520:	d502      	bpl.n	800c528 <_printf_float+0x194>
 800c522:	3301      	adds	r3, #1
 800c524:	440b      	add	r3, r1
 800c526:	6123      	str	r3, [r4, #16]
 800c528:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c52a:	f04f 0900 	mov.w	r9, #0
 800c52e:	e7db      	b.n	800c4e8 <_printf_float+0x154>
 800c530:	b913      	cbnz	r3, 800c538 <_printf_float+0x1a4>
 800c532:	6822      	ldr	r2, [r4, #0]
 800c534:	07d2      	lsls	r2, r2, #31
 800c536:	d501      	bpl.n	800c53c <_printf_float+0x1a8>
 800c538:	3302      	adds	r3, #2
 800c53a:	e7f4      	b.n	800c526 <_printf_float+0x192>
 800c53c:	2301      	movs	r3, #1
 800c53e:	e7f2      	b.n	800c526 <_printf_float+0x192>
 800c540:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c544:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c546:	4299      	cmp	r1, r3
 800c548:	db05      	blt.n	800c556 <_printf_float+0x1c2>
 800c54a:	6823      	ldr	r3, [r4, #0]
 800c54c:	6121      	str	r1, [r4, #16]
 800c54e:	07d8      	lsls	r0, r3, #31
 800c550:	d5ea      	bpl.n	800c528 <_printf_float+0x194>
 800c552:	1c4b      	adds	r3, r1, #1
 800c554:	e7e7      	b.n	800c526 <_printf_float+0x192>
 800c556:	2900      	cmp	r1, #0
 800c558:	bfd4      	ite	le
 800c55a:	f1c1 0202 	rsble	r2, r1, #2
 800c55e:	2201      	movgt	r2, #1
 800c560:	4413      	add	r3, r2
 800c562:	e7e0      	b.n	800c526 <_printf_float+0x192>
 800c564:	6823      	ldr	r3, [r4, #0]
 800c566:	055a      	lsls	r2, r3, #21
 800c568:	d407      	bmi.n	800c57a <_printf_float+0x1e6>
 800c56a:	6923      	ldr	r3, [r4, #16]
 800c56c:	4642      	mov	r2, r8
 800c56e:	4631      	mov	r1, r6
 800c570:	4628      	mov	r0, r5
 800c572:	47b8      	blx	r7
 800c574:	3001      	adds	r0, #1
 800c576:	d12b      	bne.n	800c5d0 <_printf_float+0x23c>
 800c578:	e767      	b.n	800c44a <_printf_float+0xb6>
 800c57a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c57e:	f240 80dd 	bls.w	800c73c <_printf_float+0x3a8>
 800c582:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c586:	2200      	movs	r2, #0
 800c588:	2300      	movs	r3, #0
 800c58a:	f7f4 fabd 	bl	8000b08 <__aeabi_dcmpeq>
 800c58e:	2800      	cmp	r0, #0
 800c590:	d033      	beq.n	800c5fa <_printf_float+0x266>
 800c592:	4a37      	ldr	r2, [pc, #220]	@ (800c670 <_printf_float+0x2dc>)
 800c594:	2301      	movs	r3, #1
 800c596:	4631      	mov	r1, r6
 800c598:	4628      	mov	r0, r5
 800c59a:	47b8      	blx	r7
 800c59c:	3001      	adds	r0, #1
 800c59e:	f43f af54 	beq.w	800c44a <_printf_float+0xb6>
 800c5a2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c5a6:	4543      	cmp	r3, r8
 800c5a8:	db02      	blt.n	800c5b0 <_printf_float+0x21c>
 800c5aa:	6823      	ldr	r3, [r4, #0]
 800c5ac:	07d8      	lsls	r0, r3, #31
 800c5ae:	d50f      	bpl.n	800c5d0 <_printf_float+0x23c>
 800c5b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5b4:	4631      	mov	r1, r6
 800c5b6:	4628      	mov	r0, r5
 800c5b8:	47b8      	blx	r7
 800c5ba:	3001      	adds	r0, #1
 800c5bc:	f43f af45 	beq.w	800c44a <_printf_float+0xb6>
 800c5c0:	f04f 0900 	mov.w	r9, #0
 800c5c4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c5c8:	f104 0a1a 	add.w	sl, r4, #26
 800c5cc:	45c8      	cmp	r8, r9
 800c5ce:	dc09      	bgt.n	800c5e4 <_printf_float+0x250>
 800c5d0:	6823      	ldr	r3, [r4, #0]
 800c5d2:	079b      	lsls	r3, r3, #30
 800c5d4:	f100 8103 	bmi.w	800c7de <_printf_float+0x44a>
 800c5d8:	68e0      	ldr	r0, [r4, #12]
 800c5da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5dc:	4298      	cmp	r0, r3
 800c5de:	bfb8      	it	lt
 800c5e0:	4618      	movlt	r0, r3
 800c5e2:	e734      	b.n	800c44e <_printf_float+0xba>
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	4652      	mov	r2, sl
 800c5e8:	4631      	mov	r1, r6
 800c5ea:	4628      	mov	r0, r5
 800c5ec:	47b8      	blx	r7
 800c5ee:	3001      	adds	r0, #1
 800c5f0:	f43f af2b 	beq.w	800c44a <_printf_float+0xb6>
 800c5f4:	f109 0901 	add.w	r9, r9, #1
 800c5f8:	e7e8      	b.n	800c5cc <_printf_float+0x238>
 800c5fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	dc39      	bgt.n	800c674 <_printf_float+0x2e0>
 800c600:	4a1b      	ldr	r2, [pc, #108]	@ (800c670 <_printf_float+0x2dc>)
 800c602:	2301      	movs	r3, #1
 800c604:	4631      	mov	r1, r6
 800c606:	4628      	mov	r0, r5
 800c608:	47b8      	blx	r7
 800c60a:	3001      	adds	r0, #1
 800c60c:	f43f af1d 	beq.w	800c44a <_printf_float+0xb6>
 800c610:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c614:	ea59 0303 	orrs.w	r3, r9, r3
 800c618:	d102      	bne.n	800c620 <_printf_float+0x28c>
 800c61a:	6823      	ldr	r3, [r4, #0]
 800c61c:	07d9      	lsls	r1, r3, #31
 800c61e:	d5d7      	bpl.n	800c5d0 <_printf_float+0x23c>
 800c620:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c624:	4631      	mov	r1, r6
 800c626:	4628      	mov	r0, r5
 800c628:	47b8      	blx	r7
 800c62a:	3001      	adds	r0, #1
 800c62c:	f43f af0d 	beq.w	800c44a <_printf_float+0xb6>
 800c630:	f04f 0a00 	mov.w	sl, #0
 800c634:	f104 0b1a 	add.w	fp, r4, #26
 800c638:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c63a:	425b      	negs	r3, r3
 800c63c:	4553      	cmp	r3, sl
 800c63e:	dc01      	bgt.n	800c644 <_printf_float+0x2b0>
 800c640:	464b      	mov	r3, r9
 800c642:	e793      	b.n	800c56c <_printf_float+0x1d8>
 800c644:	2301      	movs	r3, #1
 800c646:	465a      	mov	r2, fp
 800c648:	4631      	mov	r1, r6
 800c64a:	4628      	mov	r0, r5
 800c64c:	47b8      	blx	r7
 800c64e:	3001      	adds	r0, #1
 800c650:	f43f aefb 	beq.w	800c44a <_printf_float+0xb6>
 800c654:	f10a 0a01 	add.w	sl, sl, #1
 800c658:	e7ee      	b.n	800c638 <_printf_float+0x2a4>
 800c65a:	bf00      	nop
 800c65c:	7fefffff 	.word	0x7fefffff
 800c660:	080129a9 	.word	0x080129a9
 800c664:	080129ad 	.word	0x080129ad
 800c668:	080129b1 	.word	0x080129b1
 800c66c:	080129b5 	.word	0x080129b5
 800c670:	08012c47 	.word	0x08012c47
 800c674:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c676:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c67a:	4553      	cmp	r3, sl
 800c67c:	bfa8      	it	ge
 800c67e:	4653      	movge	r3, sl
 800c680:	2b00      	cmp	r3, #0
 800c682:	4699      	mov	r9, r3
 800c684:	dc36      	bgt.n	800c6f4 <_printf_float+0x360>
 800c686:	f04f 0b00 	mov.w	fp, #0
 800c68a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c68e:	f104 021a 	add.w	r2, r4, #26
 800c692:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c694:	9306      	str	r3, [sp, #24]
 800c696:	eba3 0309 	sub.w	r3, r3, r9
 800c69a:	455b      	cmp	r3, fp
 800c69c:	dc31      	bgt.n	800c702 <_printf_float+0x36e>
 800c69e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6a0:	459a      	cmp	sl, r3
 800c6a2:	dc3a      	bgt.n	800c71a <_printf_float+0x386>
 800c6a4:	6823      	ldr	r3, [r4, #0]
 800c6a6:	07da      	lsls	r2, r3, #31
 800c6a8:	d437      	bmi.n	800c71a <_printf_float+0x386>
 800c6aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6ac:	ebaa 0903 	sub.w	r9, sl, r3
 800c6b0:	9b06      	ldr	r3, [sp, #24]
 800c6b2:	ebaa 0303 	sub.w	r3, sl, r3
 800c6b6:	4599      	cmp	r9, r3
 800c6b8:	bfa8      	it	ge
 800c6ba:	4699      	movge	r9, r3
 800c6bc:	f1b9 0f00 	cmp.w	r9, #0
 800c6c0:	dc33      	bgt.n	800c72a <_printf_float+0x396>
 800c6c2:	f04f 0800 	mov.w	r8, #0
 800c6c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c6ca:	f104 0b1a 	add.w	fp, r4, #26
 800c6ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6d0:	ebaa 0303 	sub.w	r3, sl, r3
 800c6d4:	eba3 0309 	sub.w	r3, r3, r9
 800c6d8:	4543      	cmp	r3, r8
 800c6da:	f77f af79 	ble.w	800c5d0 <_printf_float+0x23c>
 800c6de:	2301      	movs	r3, #1
 800c6e0:	465a      	mov	r2, fp
 800c6e2:	4631      	mov	r1, r6
 800c6e4:	4628      	mov	r0, r5
 800c6e6:	47b8      	blx	r7
 800c6e8:	3001      	adds	r0, #1
 800c6ea:	f43f aeae 	beq.w	800c44a <_printf_float+0xb6>
 800c6ee:	f108 0801 	add.w	r8, r8, #1
 800c6f2:	e7ec      	b.n	800c6ce <_printf_float+0x33a>
 800c6f4:	4642      	mov	r2, r8
 800c6f6:	4631      	mov	r1, r6
 800c6f8:	4628      	mov	r0, r5
 800c6fa:	47b8      	blx	r7
 800c6fc:	3001      	adds	r0, #1
 800c6fe:	d1c2      	bne.n	800c686 <_printf_float+0x2f2>
 800c700:	e6a3      	b.n	800c44a <_printf_float+0xb6>
 800c702:	2301      	movs	r3, #1
 800c704:	4631      	mov	r1, r6
 800c706:	4628      	mov	r0, r5
 800c708:	9206      	str	r2, [sp, #24]
 800c70a:	47b8      	blx	r7
 800c70c:	3001      	adds	r0, #1
 800c70e:	f43f ae9c 	beq.w	800c44a <_printf_float+0xb6>
 800c712:	9a06      	ldr	r2, [sp, #24]
 800c714:	f10b 0b01 	add.w	fp, fp, #1
 800c718:	e7bb      	b.n	800c692 <_printf_float+0x2fe>
 800c71a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c71e:	4631      	mov	r1, r6
 800c720:	4628      	mov	r0, r5
 800c722:	47b8      	blx	r7
 800c724:	3001      	adds	r0, #1
 800c726:	d1c0      	bne.n	800c6aa <_printf_float+0x316>
 800c728:	e68f      	b.n	800c44a <_printf_float+0xb6>
 800c72a:	9a06      	ldr	r2, [sp, #24]
 800c72c:	464b      	mov	r3, r9
 800c72e:	4442      	add	r2, r8
 800c730:	4631      	mov	r1, r6
 800c732:	4628      	mov	r0, r5
 800c734:	47b8      	blx	r7
 800c736:	3001      	adds	r0, #1
 800c738:	d1c3      	bne.n	800c6c2 <_printf_float+0x32e>
 800c73a:	e686      	b.n	800c44a <_printf_float+0xb6>
 800c73c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c740:	f1ba 0f01 	cmp.w	sl, #1
 800c744:	dc01      	bgt.n	800c74a <_printf_float+0x3b6>
 800c746:	07db      	lsls	r3, r3, #31
 800c748:	d536      	bpl.n	800c7b8 <_printf_float+0x424>
 800c74a:	2301      	movs	r3, #1
 800c74c:	4642      	mov	r2, r8
 800c74e:	4631      	mov	r1, r6
 800c750:	4628      	mov	r0, r5
 800c752:	47b8      	blx	r7
 800c754:	3001      	adds	r0, #1
 800c756:	f43f ae78 	beq.w	800c44a <_printf_float+0xb6>
 800c75a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c75e:	4631      	mov	r1, r6
 800c760:	4628      	mov	r0, r5
 800c762:	47b8      	blx	r7
 800c764:	3001      	adds	r0, #1
 800c766:	f43f ae70 	beq.w	800c44a <_printf_float+0xb6>
 800c76a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c76e:	2200      	movs	r2, #0
 800c770:	2300      	movs	r3, #0
 800c772:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c776:	f7f4 f9c7 	bl	8000b08 <__aeabi_dcmpeq>
 800c77a:	b9c0      	cbnz	r0, 800c7ae <_printf_float+0x41a>
 800c77c:	4653      	mov	r3, sl
 800c77e:	f108 0201 	add.w	r2, r8, #1
 800c782:	4631      	mov	r1, r6
 800c784:	4628      	mov	r0, r5
 800c786:	47b8      	blx	r7
 800c788:	3001      	adds	r0, #1
 800c78a:	d10c      	bne.n	800c7a6 <_printf_float+0x412>
 800c78c:	e65d      	b.n	800c44a <_printf_float+0xb6>
 800c78e:	2301      	movs	r3, #1
 800c790:	465a      	mov	r2, fp
 800c792:	4631      	mov	r1, r6
 800c794:	4628      	mov	r0, r5
 800c796:	47b8      	blx	r7
 800c798:	3001      	adds	r0, #1
 800c79a:	f43f ae56 	beq.w	800c44a <_printf_float+0xb6>
 800c79e:	f108 0801 	add.w	r8, r8, #1
 800c7a2:	45d0      	cmp	r8, sl
 800c7a4:	dbf3      	blt.n	800c78e <_printf_float+0x3fa>
 800c7a6:	464b      	mov	r3, r9
 800c7a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c7ac:	e6df      	b.n	800c56e <_printf_float+0x1da>
 800c7ae:	f04f 0800 	mov.w	r8, #0
 800c7b2:	f104 0b1a 	add.w	fp, r4, #26
 800c7b6:	e7f4      	b.n	800c7a2 <_printf_float+0x40e>
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	4642      	mov	r2, r8
 800c7bc:	e7e1      	b.n	800c782 <_printf_float+0x3ee>
 800c7be:	2301      	movs	r3, #1
 800c7c0:	464a      	mov	r2, r9
 800c7c2:	4631      	mov	r1, r6
 800c7c4:	4628      	mov	r0, r5
 800c7c6:	47b8      	blx	r7
 800c7c8:	3001      	adds	r0, #1
 800c7ca:	f43f ae3e 	beq.w	800c44a <_printf_float+0xb6>
 800c7ce:	f108 0801 	add.w	r8, r8, #1
 800c7d2:	68e3      	ldr	r3, [r4, #12]
 800c7d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c7d6:	1a5b      	subs	r3, r3, r1
 800c7d8:	4543      	cmp	r3, r8
 800c7da:	dcf0      	bgt.n	800c7be <_printf_float+0x42a>
 800c7dc:	e6fc      	b.n	800c5d8 <_printf_float+0x244>
 800c7de:	f04f 0800 	mov.w	r8, #0
 800c7e2:	f104 0919 	add.w	r9, r4, #25
 800c7e6:	e7f4      	b.n	800c7d2 <_printf_float+0x43e>

0800c7e8 <_printf_common>:
 800c7e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7ec:	4616      	mov	r6, r2
 800c7ee:	4698      	mov	r8, r3
 800c7f0:	688a      	ldr	r2, [r1, #8]
 800c7f2:	690b      	ldr	r3, [r1, #16]
 800c7f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	bfb8      	it	lt
 800c7fc:	4613      	movlt	r3, r2
 800c7fe:	6033      	str	r3, [r6, #0]
 800c800:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c804:	4607      	mov	r7, r0
 800c806:	460c      	mov	r4, r1
 800c808:	b10a      	cbz	r2, 800c80e <_printf_common+0x26>
 800c80a:	3301      	adds	r3, #1
 800c80c:	6033      	str	r3, [r6, #0]
 800c80e:	6823      	ldr	r3, [r4, #0]
 800c810:	0699      	lsls	r1, r3, #26
 800c812:	bf42      	ittt	mi
 800c814:	6833      	ldrmi	r3, [r6, #0]
 800c816:	3302      	addmi	r3, #2
 800c818:	6033      	strmi	r3, [r6, #0]
 800c81a:	6825      	ldr	r5, [r4, #0]
 800c81c:	f015 0506 	ands.w	r5, r5, #6
 800c820:	d106      	bne.n	800c830 <_printf_common+0x48>
 800c822:	f104 0a19 	add.w	sl, r4, #25
 800c826:	68e3      	ldr	r3, [r4, #12]
 800c828:	6832      	ldr	r2, [r6, #0]
 800c82a:	1a9b      	subs	r3, r3, r2
 800c82c:	42ab      	cmp	r3, r5
 800c82e:	dc26      	bgt.n	800c87e <_printf_common+0x96>
 800c830:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c834:	6822      	ldr	r2, [r4, #0]
 800c836:	3b00      	subs	r3, #0
 800c838:	bf18      	it	ne
 800c83a:	2301      	movne	r3, #1
 800c83c:	0692      	lsls	r2, r2, #26
 800c83e:	d42b      	bmi.n	800c898 <_printf_common+0xb0>
 800c840:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c844:	4641      	mov	r1, r8
 800c846:	4638      	mov	r0, r7
 800c848:	47c8      	blx	r9
 800c84a:	3001      	adds	r0, #1
 800c84c:	d01e      	beq.n	800c88c <_printf_common+0xa4>
 800c84e:	6823      	ldr	r3, [r4, #0]
 800c850:	6922      	ldr	r2, [r4, #16]
 800c852:	f003 0306 	and.w	r3, r3, #6
 800c856:	2b04      	cmp	r3, #4
 800c858:	bf02      	ittt	eq
 800c85a:	68e5      	ldreq	r5, [r4, #12]
 800c85c:	6833      	ldreq	r3, [r6, #0]
 800c85e:	1aed      	subeq	r5, r5, r3
 800c860:	68a3      	ldr	r3, [r4, #8]
 800c862:	bf0c      	ite	eq
 800c864:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c868:	2500      	movne	r5, #0
 800c86a:	4293      	cmp	r3, r2
 800c86c:	bfc4      	itt	gt
 800c86e:	1a9b      	subgt	r3, r3, r2
 800c870:	18ed      	addgt	r5, r5, r3
 800c872:	2600      	movs	r6, #0
 800c874:	341a      	adds	r4, #26
 800c876:	42b5      	cmp	r5, r6
 800c878:	d11a      	bne.n	800c8b0 <_printf_common+0xc8>
 800c87a:	2000      	movs	r0, #0
 800c87c:	e008      	b.n	800c890 <_printf_common+0xa8>
 800c87e:	2301      	movs	r3, #1
 800c880:	4652      	mov	r2, sl
 800c882:	4641      	mov	r1, r8
 800c884:	4638      	mov	r0, r7
 800c886:	47c8      	blx	r9
 800c888:	3001      	adds	r0, #1
 800c88a:	d103      	bne.n	800c894 <_printf_common+0xac>
 800c88c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c894:	3501      	adds	r5, #1
 800c896:	e7c6      	b.n	800c826 <_printf_common+0x3e>
 800c898:	18e1      	adds	r1, r4, r3
 800c89a:	1c5a      	adds	r2, r3, #1
 800c89c:	2030      	movs	r0, #48	@ 0x30
 800c89e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c8a2:	4422      	add	r2, r4
 800c8a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c8a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c8ac:	3302      	adds	r3, #2
 800c8ae:	e7c7      	b.n	800c840 <_printf_common+0x58>
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	4622      	mov	r2, r4
 800c8b4:	4641      	mov	r1, r8
 800c8b6:	4638      	mov	r0, r7
 800c8b8:	47c8      	blx	r9
 800c8ba:	3001      	adds	r0, #1
 800c8bc:	d0e6      	beq.n	800c88c <_printf_common+0xa4>
 800c8be:	3601      	adds	r6, #1
 800c8c0:	e7d9      	b.n	800c876 <_printf_common+0x8e>
	...

0800c8c4 <_printf_i>:
 800c8c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8c8:	7e0f      	ldrb	r7, [r1, #24]
 800c8ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c8cc:	2f78      	cmp	r7, #120	@ 0x78
 800c8ce:	4691      	mov	r9, r2
 800c8d0:	4680      	mov	r8, r0
 800c8d2:	460c      	mov	r4, r1
 800c8d4:	469a      	mov	sl, r3
 800c8d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c8da:	d807      	bhi.n	800c8ec <_printf_i+0x28>
 800c8dc:	2f62      	cmp	r7, #98	@ 0x62
 800c8de:	d80a      	bhi.n	800c8f6 <_printf_i+0x32>
 800c8e0:	2f00      	cmp	r7, #0
 800c8e2:	f000 80d2 	beq.w	800ca8a <_printf_i+0x1c6>
 800c8e6:	2f58      	cmp	r7, #88	@ 0x58
 800c8e8:	f000 80b9 	beq.w	800ca5e <_printf_i+0x19a>
 800c8ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c8f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c8f4:	e03a      	b.n	800c96c <_printf_i+0xa8>
 800c8f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c8fa:	2b15      	cmp	r3, #21
 800c8fc:	d8f6      	bhi.n	800c8ec <_printf_i+0x28>
 800c8fe:	a101      	add	r1, pc, #4	@ (adr r1, 800c904 <_printf_i+0x40>)
 800c900:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c904:	0800c95d 	.word	0x0800c95d
 800c908:	0800c971 	.word	0x0800c971
 800c90c:	0800c8ed 	.word	0x0800c8ed
 800c910:	0800c8ed 	.word	0x0800c8ed
 800c914:	0800c8ed 	.word	0x0800c8ed
 800c918:	0800c8ed 	.word	0x0800c8ed
 800c91c:	0800c971 	.word	0x0800c971
 800c920:	0800c8ed 	.word	0x0800c8ed
 800c924:	0800c8ed 	.word	0x0800c8ed
 800c928:	0800c8ed 	.word	0x0800c8ed
 800c92c:	0800c8ed 	.word	0x0800c8ed
 800c930:	0800ca71 	.word	0x0800ca71
 800c934:	0800c99b 	.word	0x0800c99b
 800c938:	0800ca2b 	.word	0x0800ca2b
 800c93c:	0800c8ed 	.word	0x0800c8ed
 800c940:	0800c8ed 	.word	0x0800c8ed
 800c944:	0800ca93 	.word	0x0800ca93
 800c948:	0800c8ed 	.word	0x0800c8ed
 800c94c:	0800c99b 	.word	0x0800c99b
 800c950:	0800c8ed 	.word	0x0800c8ed
 800c954:	0800c8ed 	.word	0x0800c8ed
 800c958:	0800ca33 	.word	0x0800ca33
 800c95c:	6833      	ldr	r3, [r6, #0]
 800c95e:	1d1a      	adds	r2, r3, #4
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	6032      	str	r2, [r6, #0]
 800c964:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c968:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c96c:	2301      	movs	r3, #1
 800c96e:	e09d      	b.n	800caac <_printf_i+0x1e8>
 800c970:	6833      	ldr	r3, [r6, #0]
 800c972:	6820      	ldr	r0, [r4, #0]
 800c974:	1d19      	adds	r1, r3, #4
 800c976:	6031      	str	r1, [r6, #0]
 800c978:	0606      	lsls	r6, r0, #24
 800c97a:	d501      	bpl.n	800c980 <_printf_i+0xbc>
 800c97c:	681d      	ldr	r5, [r3, #0]
 800c97e:	e003      	b.n	800c988 <_printf_i+0xc4>
 800c980:	0645      	lsls	r5, r0, #25
 800c982:	d5fb      	bpl.n	800c97c <_printf_i+0xb8>
 800c984:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c988:	2d00      	cmp	r5, #0
 800c98a:	da03      	bge.n	800c994 <_printf_i+0xd0>
 800c98c:	232d      	movs	r3, #45	@ 0x2d
 800c98e:	426d      	negs	r5, r5
 800c990:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c994:	4859      	ldr	r0, [pc, #356]	@ (800cafc <_printf_i+0x238>)
 800c996:	230a      	movs	r3, #10
 800c998:	e011      	b.n	800c9be <_printf_i+0xfa>
 800c99a:	6821      	ldr	r1, [r4, #0]
 800c99c:	6833      	ldr	r3, [r6, #0]
 800c99e:	0608      	lsls	r0, r1, #24
 800c9a0:	f853 5b04 	ldr.w	r5, [r3], #4
 800c9a4:	d402      	bmi.n	800c9ac <_printf_i+0xe8>
 800c9a6:	0649      	lsls	r1, r1, #25
 800c9a8:	bf48      	it	mi
 800c9aa:	b2ad      	uxthmi	r5, r5
 800c9ac:	2f6f      	cmp	r7, #111	@ 0x6f
 800c9ae:	4853      	ldr	r0, [pc, #332]	@ (800cafc <_printf_i+0x238>)
 800c9b0:	6033      	str	r3, [r6, #0]
 800c9b2:	bf14      	ite	ne
 800c9b4:	230a      	movne	r3, #10
 800c9b6:	2308      	moveq	r3, #8
 800c9b8:	2100      	movs	r1, #0
 800c9ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c9be:	6866      	ldr	r6, [r4, #4]
 800c9c0:	60a6      	str	r6, [r4, #8]
 800c9c2:	2e00      	cmp	r6, #0
 800c9c4:	bfa2      	ittt	ge
 800c9c6:	6821      	ldrge	r1, [r4, #0]
 800c9c8:	f021 0104 	bicge.w	r1, r1, #4
 800c9cc:	6021      	strge	r1, [r4, #0]
 800c9ce:	b90d      	cbnz	r5, 800c9d4 <_printf_i+0x110>
 800c9d0:	2e00      	cmp	r6, #0
 800c9d2:	d04b      	beq.n	800ca6c <_printf_i+0x1a8>
 800c9d4:	4616      	mov	r6, r2
 800c9d6:	fbb5 f1f3 	udiv	r1, r5, r3
 800c9da:	fb03 5711 	mls	r7, r3, r1, r5
 800c9de:	5dc7      	ldrb	r7, [r0, r7]
 800c9e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c9e4:	462f      	mov	r7, r5
 800c9e6:	42bb      	cmp	r3, r7
 800c9e8:	460d      	mov	r5, r1
 800c9ea:	d9f4      	bls.n	800c9d6 <_printf_i+0x112>
 800c9ec:	2b08      	cmp	r3, #8
 800c9ee:	d10b      	bne.n	800ca08 <_printf_i+0x144>
 800c9f0:	6823      	ldr	r3, [r4, #0]
 800c9f2:	07df      	lsls	r7, r3, #31
 800c9f4:	d508      	bpl.n	800ca08 <_printf_i+0x144>
 800c9f6:	6923      	ldr	r3, [r4, #16]
 800c9f8:	6861      	ldr	r1, [r4, #4]
 800c9fa:	4299      	cmp	r1, r3
 800c9fc:	bfde      	ittt	le
 800c9fe:	2330      	movle	r3, #48	@ 0x30
 800ca00:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ca04:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ca08:	1b92      	subs	r2, r2, r6
 800ca0a:	6122      	str	r2, [r4, #16]
 800ca0c:	f8cd a000 	str.w	sl, [sp]
 800ca10:	464b      	mov	r3, r9
 800ca12:	aa03      	add	r2, sp, #12
 800ca14:	4621      	mov	r1, r4
 800ca16:	4640      	mov	r0, r8
 800ca18:	f7ff fee6 	bl	800c7e8 <_printf_common>
 800ca1c:	3001      	adds	r0, #1
 800ca1e:	d14a      	bne.n	800cab6 <_printf_i+0x1f2>
 800ca20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca24:	b004      	add	sp, #16
 800ca26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca2a:	6823      	ldr	r3, [r4, #0]
 800ca2c:	f043 0320 	orr.w	r3, r3, #32
 800ca30:	6023      	str	r3, [r4, #0]
 800ca32:	4833      	ldr	r0, [pc, #204]	@ (800cb00 <_printf_i+0x23c>)
 800ca34:	2778      	movs	r7, #120	@ 0x78
 800ca36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ca3a:	6823      	ldr	r3, [r4, #0]
 800ca3c:	6831      	ldr	r1, [r6, #0]
 800ca3e:	061f      	lsls	r7, r3, #24
 800ca40:	f851 5b04 	ldr.w	r5, [r1], #4
 800ca44:	d402      	bmi.n	800ca4c <_printf_i+0x188>
 800ca46:	065f      	lsls	r7, r3, #25
 800ca48:	bf48      	it	mi
 800ca4a:	b2ad      	uxthmi	r5, r5
 800ca4c:	6031      	str	r1, [r6, #0]
 800ca4e:	07d9      	lsls	r1, r3, #31
 800ca50:	bf44      	itt	mi
 800ca52:	f043 0320 	orrmi.w	r3, r3, #32
 800ca56:	6023      	strmi	r3, [r4, #0]
 800ca58:	b11d      	cbz	r5, 800ca62 <_printf_i+0x19e>
 800ca5a:	2310      	movs	r3, #16
 800ca5c:	e7ac      	b.n	800c9b8 <_printf_i+0xf4>
 800ca5e:	4827      	ldr	r0, [pc, #156]	@ (800cafc <_printf_i+0x238>)
 800ca60:	e7e9      	b.n	800ca36 <_printf_i+0x172>
 800ca62:	6823      	ldr	r3, [r4, #0]
 800ca64:	f023 0320 	bic.w	r3, r3, #32
 800ca68:	6023      	str	r3, [r4, #0]
 800ca6a:	e7f6      	b.n	800ca5a <_printf_i+0x196>
 800ca6c:	4616      	mov	r6, r2
 800ca6e:	e7bd      	b.n	800c9ec <_printf_i+0x128>
 800ca70:	6833      	ldr	r3, [r6, #0]
 800ca72:	6825      	ldr	r5, [r4, #0]
 800ca74:	6961      	ldr	r1, [r4, #20]
 800ca76:	1d18      	adds	r0, r3, #4
 800ca78:	6030      	str	r0, [r6, #0]
 800ca7a:	062e      	lsls	r6, r5, #24
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	d501      	bpl.n	800ca84 <_printf_i+0x1c0>
 800ca80:	6019      	str	r1, [r3, #0]
 800ca82:	e002      	b.n	800ca8a <_printf_i+0x1c6>
 800ca84:	0668      	lsls	r0, r5, #25
 800ca86:	d5fb      	bpl.n	800ca80 <_printf_i+0x1bc>
 800ca88:	8019      	strh	r1, [r3, #0]
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	6123      	str	r3, [r4, #16]
 800ca8e:	4616      	mov	r6, r2
 800ca90:	e7bc      	b.n	800ca0c <_printf_i+0x148>
 800ca92:	6833      	ldr	r3, [r6, #0]
 800ca94:	1d1a      	adds	r2, r3, #4
 800ca96:	6032      	str	r2, [r6, #0]
 800ca98:	681e      	ldr	r6, [r3, #0]
 800ca9a:	6862      	ldr	r2, [r4, #4]
 800ca9c:	2100      	movs	r1, #0
 800ca9e:	4630      	mov	r0, r6
 800caa0:	f7f3 fbb6 	bl	8000210 <memchr>
 800caa4:	b108      	cbz	r0, 800caaa <_printf_i+0x1e6>
 800caa6:	1b80      	subs	r0, r0, r6
 800caa8:	6060      	str	r0, [r4, #4]
 800caaa:	6863      	ldr	r3, [r4, #4]
 800caac:	6123      	str	r3, [r4, #16]
 800caae:	2300      	movs	r3, #0
 800cab0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cab4:	e7aa      	b.n	800ca0c <_printf_i+0x148>
 800cab6:	6923      	ldr	r3, [r4, #16]
 800cab8:	4632      	mov	r2, r6
 800caba:	4649      	mov	r1, r9
 800cabc:	4640      	mov	r0, r8
 800cabe:	47d0      	blx	sl
 800cac0:	3001      	adds	r0, #1
 800cac2:	d0ad      	beq.n	800ca20 <_printf_i+0x15c>
 800cac4:	6823      	ldr	r3, [r4, #0]
 800cac6:	079b      	lsls	r3, r3, #30
 800cac8:	d413      	bmi.n	800caf2 <_printf_i+0x22e>
 800caca:	68e0      	ldr	r0, [r4, #12]
 800cacc:	9b03      	ldr	r3, [sp, #12]
 800cace:	4298      	cmp	r0, r3
 800cad0:	bfb8      	it	lt
 800cad2:	4618      	movlt	r0, r3
 800cad4:	e7a6      	b.n	800ca24 <_printf_i+0x160>
 800cad6:	2301      	movs	r3, #1
 800cad8:	4632      	mov	r2, r6
 800cada:	4649      	mov	r1, r9
 800cadc:	4640      	mov	r0, r8
 800cade:	47d0      	blx	sl
 800cae0:	3001      	adds	r0, #1
 800cae2:	d09d      	beq.n	800ca20 <_printf_i+0x15c>
 800cae4:	3501      	adds	r5, #1
 800cae6:	68e3      	ldr	r3, [r4, #12]
 800cae8:	9903      	ldr	r1, [sp, #12]
 800caea:	1a5b      	subs	r3, r3, r1
 800caec:	42ab      	cmp	r3, r5
 800caee:	dcf2      	bgt.n	800cad6 <_printf_i+0x212>
 800caf0:	e7eb      	b.n	800caca <_printf_i+0x206>
 800caf2:	2500      	movs	r5, #0
 800caf4:	f104 0619 	add.w	r6, r4, #25
 800caf8:	e7f5      	b.n	800cae6 <_printf_i+0x222>
 800cafa:	bf00      	nop
 800cafc:	080129b9 	.word	0x080129b9
 800cb00:	080129ca 	.word	0x080129ca

0800cb04 <_scanf_float>:
 800cb04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb08:	b087      	sub	sp, #28
 800cb0a:	4617      	mov	r7, r2
 800cb0c:	9303      	str	r3, [sp, #12]
 800cb0e:	688b      	ldr	r3, [r1, #8]
 800cb10:	1e5a      	subs	r2, r3, #1
 800cb12:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800cb16:	bf81      	itttt	hi
 800cb18:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800cb1c:	eb03 0b05 	addhi.w	fp, r3, r5
 800cb20:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800cb24:	608b      	strhi	r3, [r1, #8]
 800cb26:	680b      	ldr	r3, [r1, #0]
 800cb28:	460a      	mov	r2, r1
 800cb2a:	f04f 0500 	mov.w	r5, #0
 800cb2e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800cb32:	f842 3b1c 	str.w	r3, [r2], #28
 800cb36:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cb3a:	4680      	mov	r8, r0
 800cb3c:	460c      	mov	r4, r1
 800cb3e:	bf98      	it	ls
 800cb40:	f04f 0b00 	movls.w	fp, #0
 800cb44:	9201      	str	r2, [sp, #4]
 800cb46:	4616      	mov	r6, r2
 800cb48:	46aa      	mov	sl, r5
 800cb4a:	46a9      	mov	r9, r5
 800cb4c:	9502      	str	r5, [sp, #8]
 800cb4e:	68a2      	ldr	r2, [r4, #8]
 800cb50:	b152      	cbz	r2, 800cb68 <_scanf_float+0x64>
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	2b4e      	cmp	r3, #78	@ 0x4e
 800cb58:	d864      	bhi.n	800cc24 <_scanf_float+0x120>
 800cb5a:	2b40      	cmp	r3, #64	@ 0x40
 800cb5c:	d83c      	bhi.n	800cbd8 <_scanf_float+0xd4>
 800cb5e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800cb62:	b2c8      	uxtb	r0, r1
 800cb64:	280e      	cmp	r0, #14
 800cb66:	d93a      	bls.n	800cbde <_scanf_float+0xda>
 800cb68:	f1b9 0f00 	cmp.w	r9, #0
 800cb6c:	d003      	beq.n	800cb76 <_scanf_float+0x72>
 800cb6e:	6823      	ldr	r3, [r4, #0]
 800cb70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb74:	6023      	str	r3, [r4, #0]
 800cb76:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800cb7a:	f1ba 0f01 	cmp.w	sl, #1
 800cb7e:	f200 8117 	bhi.w	800cdb0 <_scanf_float+0x2ac>
 800cb82:	9b01      	ldr	r3, [sp, #4]
 800cb84:	429e      	cmp	r6, r3
 800cb86:	f200 8108 	bhi.w	800cd9a <_scanf_float+0x296>
 800cb8a:	2001      	movs	r0, #1
 800cb8c:	b007      	add	sp, #28
 800cb8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb92:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800cb96:	2a0d      	cmp	r2, #13
 800cb98:	d8e6      	bhi.n	800cb68 <_scanf_float+0x64>
 800cb9a:	a101      	add	r1, pc, #4	@ (adr r1, 800cba0 <_scanf_float+0x9c>)
 800cb9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cba0:	0800cce7 	.word	0x0800cce7
 800cba4:	0800cb69 	.word	0x0800cb69
 800cba8:	0800cb69 	.word	0x0800cb69
 800cbac:	0800cb69 	.word	0x0800cb69
 800cbb0:	0800cd47 	.word	0x0800cd47
 800cbb4:	0800cd1f 	.word	0x0800cd1f
 800cbb8:	0800cb69 	.word	0x0800cb69
 800cbbc:	0800cb69 	.word	0x0800cb69
 800cbc0:	0800ccf5 	.word	0x0800ccf5
 800cbc4:	0800cb69 	.word	0x0800cb69
 800cbc8:	0800cb69 	.word	0x0800cb69
 800cbcc:	0800cb69 	.word	0x0800cb69
 800cbd0:	0800cb69 	.word	0x0800cb69
 800cbd4:	0800ccad 	.word	0x0800ccad
 800cbd8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800cbdc:	e7db      	b.n	800cb96 <_scanf_float+0x92>
 800cbde:	290e      	cmp	r1, #14
 800cbe0:	d8c2      	bhi.n	800cb68 <_scanf_float+0x64>
 800cbe2:	a001      	add	r0, pc, #4	@ (adr r0, 800cbe8 <_scanf_float+0xe4>)
 800cbe4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cbe8:	0800cc9d 	.word	0x0800cc9d
 800cbec:	0800cb69 	.word	0x0800cb69
 800cbf0:	0800cc9d 	.word	0x0800cc9d
 800cbf4:	0800cd33 	.word	0x0800cd33
 800cbf8:	0800cb69 	.word	0x0800cb69
 800cbfc:	0800cc45 	.word	0x0800cc45
 800cc00:	0800cc83 	.word	0x0800cc83
 800cc04:	0800cc83 	.word	0x0800cc83
 800cc08:	0800cc83 	.word	0x0800cc83
 800cc0c:	0800cc83 	.word	0x0800cc83
 800cc10:	0800cc83 	.word	0x0800cc83
 800cc14:	0800cc83 	.word	0x0800cc83
 800cc18:	0800cc83 	.word	0x0800cc83
 800cc1c:	0800cc83 	.word	0x0800cc83
 800cc20:	0800cc83 	.word	0x0800cc83
 800cc24:	2b6e      	cmp	r3, #110	@ 0x6e
 800cc26:	d809      	bhi.n	800cc3c <_scanf_float+0x138>
 800cc28:	2b60      	cmp	r3, #96	@ 0x60
 800cc2a:	d8b2      	bhi.n	800cb92 <_scanf_float+0x8e>
 800cc2c:	2b54      	cmp	r3, #84	@ 0x54
 800cc2e:	d07b      	beq.n	800cd28 <_scanf_float+0x224>
 800cc30:	2b59      	cmp	r3, #89	@ 0x59
 800cc32:	d199      	bne.n	800cb68 <_scanf_float+0x64>
 800cc34:	2d07      	cmp	r5, #7
 800cc36:	d197      	bne.n	800cb68 <_scanf_float+0x64>
 800cc38:	2508      	movs	r5, #8
 800cc3a:	e02c      	b.n	800cc96 <_scanf_float+0x192>
 800cc3c:	2b74      	cmp	r3, #116	@ 0x74
 800cc3e:	d073      	beq.n	800cd28 <_scanf_float+0x224>
 800cc40:	2b79      	cmp	r3, #121	@ 0x79
 800cc42:	e7f6      	b.n	800cc32 <_scanf_float+0x12e>
 800cc44:	6821      	ldr	r1, [r4, #0]
 800cc46:	05c8      	lsls	r0, r1, #23
 800cc48:	d51b      	bpl.n	800cc82 <_scanf_float+0x17e>
 800cc4a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800cc4e:	6021      	str	r1, [r4, #0]
 800cc50:	f109 0901 	add.w	r9, r9, #1
 800cc54:	f1bb 0f00 	cmp.w	fp, #0
 800cc58:	d003      	beq.n	800cc62 <_scanf_float+0x15e>
 800cc5a:	3201      	adds	r2, #1
 800cc5c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800cc60:	60a2      	str	r2, [r4, #8]
 800cc62:	68a3      	ldr	r3, [r4, #8]
 800cc64:	3b01      	subs	r3, #1
 800cc66:	60a3      	str	r3, [r4, #8]
 800cc68:	6923      	ldr	r3, [r4, #16]
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	6123      	str	r3, [r4, #16]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	3b01      	subs	r3, #1
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	607b      	str	r3, [r7, #4]
 800cc76:	f340 8087 	ble.w	800cd88 <_scanf_float+0x284>
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	603b      	str	r3, [r7, #0]
 800cc80:	e765      	b.n	800cb4e <_scanf_float+0x4a>
 800cc82:	eb1a 0105 	adds.w	r1, sl, r5
 800cc86:	f47f af6f 	bne.w	800cb68 <_scanf_float+0x64>
 800cc8a:	6822      	ldr	r2, [r4, #0]
 800cc8c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800cc90:	6022      	str	r2, [r4, #0]
 800cc92:	460d      	mov	r5, r1
 800cc94:	468a      	mov	sl, r1
 800cc96:	f806 3b01 	strb.w	r3, [r6], #1
 800cc9a:	e7e2      	b.n	800cc62 <_scanf_float+0x15e>
 800cc9c:	6822      	ldr	r2, [r4, #0]
 800cc9e:	0610      	lsls	r0, r2, #24
 800cca0:	f57f af62 	bpl.w	800cb68 <_scanf_float+0x64>
 800cca4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cca8:	6022      	str	r2, [r4, #0]
 800ccaa:	e7f4      	b.n	800cc96 <_scanf_float+0x192>
 800ccac:	f1ba 0f00 	cmp.w	sl, #0
 800ccb0:	d10e      	bne.n	800ccd0 <_scanf_float+0x1cc>
 800ccb2:	f1b9 0f00 	cmp.w	r9, #0
 800ccb6:	d10e      	bne.n	800ccd6 <_scanf_float+0x1d2>
 800ccb8:	6822      	ldr	r2, [r4, #0]
 800ccba:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ccbe:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ccc2:	d108      	bne.n	800ccd6 <_scanf_float+0x1d2>
 800ccc4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ccc8:	6022      	str	r2, [r4, #0]
 800ccca:	f04f 0a01 	mov.w	sl, #1
 800ccce:	e7e2      	b.n	800cc96 <_scanf_float+0x192>
 800ccd0:	f1ba 0f02 	cmp.w	sl, #2
 800ccd4:	d055      	beq.n	800cd82 <_scanf_float+0x27e>
 800ccd6:	2d01      	cmp	r5, #1
 800ccd8:	d002      	beq.n	800cce0 <_scanf_float+0x1dc>
 800ccda:	2d04      	cmp	r5, #4
 800ccdc:	f47f af44 	bne.w	800cb68 <_scanf_float+0x64>
 800cce0:	3501      	adds	r5, #1
 800cce2:	b2ed      	uxtb	r5, r5
 800cce4:	e7d7      	b.n	800cc96 <_scanf_float+0x192>
 800cce6:	f1ba 0f01 	cmp.w	sl, #1
 800ccea:	f47f af3d 	bne.w	800cb68 <_scanf_float+0x64>
 800ccee:	f04f 0a02 	mov.w	sl, #2
 800ccf2:	e7d0      	b.n	800cc96 <_scanf_float+0x192>
 800ccf4:	b97d      	cbnz	r5, 800cd16 <_scanf_float+0x212>
 800ccf6:	f1b9 0f00 	cmp.w	r9, #0
 800ccfa:	f47f af38 	bne.w	800cb6e <_scanf_float+0x6a>
 800ccfe:	6822      	ldr	r2, [r4, #0]
 800cd00:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cd04:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cd08:	f040 8108 	bne.w	800cf1c <_scanf_float+0x418>
 800cd0c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cd10:	6022      	str	r2, [r4, #0]
 800cd12:	2501      	movs	r5, #1
 800cd14:	e7bf      	b.n	800cc96 <_scanf_float+0x192>
 800cd16:	2d03      	cmp	r5, #3
 800cd18:	d0e2      	beq.n	800cce0 <_scanf_float+0x1dc>
 800cd1a:	2d05      	cmp	r5, #5
 800cd1c:	e7de      	b.n	800ccdc <_scanf_float+0x1d8>
 800cd1e:	2d02      	cmp	r5, #2
 800cd20:	f47f af22 	bne.w	800cb68 <_scanf_float+0x64>
 800cd24:	2503      	movs	r5, #3
 800cd26:	e7b6      	b.n	800cc96 <_scanf_float+0x192>
 800cd28:	2d06      	cmp	r5, #6
 800cd2a:	f47f af1d 	bne.w	800cb68 <_scanf_float+0x64>
 800cd2e:	2507      	movs	r5, #7
 800cd30:	e7b1      	b.n	800cc96 <_scanf_float+0x192>
 800cd32:	6822      	ldr	r2, [r4, #0]
 800cd34:	0591      	lsls	r1, r2, #22
 800cd36:	f57f af17 	bpl.w	800cb68 <_scanf_float+0x64>
 800cd3a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800cd3e:	6022      	str	r2, [r4, #0]
 800cd40:	f8cd 9008 	str.w	r9, [sp, #8]
 800cd44:	e7a7      	b.n	800cc96 <_scanf_float+0x192>
 800cd46:	6822      	ldr	r2, [r4, #0]
 800cd48:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cd4c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cd50:	d006      	beq.n	800cd60 <_scanf_float+0x25c>
 800cd52:	0550      	lsls	r0, r2, #21
 800cd54:	f57f af08 	bpl.w	800cb68 <_scanf_float+0x64>
 800cd58:	f1b9 0f00 	cmp.w	r9, #0
 800cd5c:	f000 80de 	beq.w	800cf1c <_scanf_float+0x418>
 800cd60:	0591      	lsls	r1, r2, #22
 800cd62:	bf58      	it	pl
 800cd64:	9902      	ldrpl	r1, [sp, #8]
 800cd66:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cd6a:	bf58      	it	pl
 800cd6c:	eba9 0101 	subpl.w	r1, r9, r1
 800cd70:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800cd74:	bf58      	it	pl
 800cd76:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cd7a:	6022      	str	r2, [r4, #0]
 800cd7c:	f04f 0900 	mov.w	r9, #0
 800cd80:	e789      	b.n	800cc96 <_scanf_float+0x192>
 800cd82:	f04f 0a03 	mov.w	sl, #3
 800cd86:	e786      	b.n	800cc96 <_scanf_float+0x192>
 800cd88:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cd8c:	4639      	mov	r1, r7
 800cd8e:	4640      	mov	r0, r8
 800cd90:	4798      	blx	r3
 800cd92:	2800      	cmp	r0, #0
 800cd94:	f43f aedb 	beq.w	800cb4e <_scanf_float+0x4a>
 800cd98:	e6e6      	b.n	800cb68 <_scanf_float+0x64>
 800cd9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cda2:	463a      	mov	r2, r7
 800cda4:	4640      	mov	r0, r8
 800cda6:	4798      	blx	r3
 800cda8:	6923      	ldr	r3, [r4, #16]
 800cdaa:	3b01      	subs	r3, #1
 800cdac:	6123      	str	r3, [r4, #16]
 800cdae:	e6e8      	b.n	800cb82 <_scanf_float+0x7e>
 800cdb0:	1e6b      	subs	r3, r5, #1
 800cdb2:	2b06      	cmp	r3, #6
 800cdb4:	d824      	bhi.n	800ce00 <_scanf_float+0x2fc>
 800cdb6:	2d02      	cmp	r5, #2
 800cdb8:	d836      	bhi.n	800ce28 <_scanf_float+0x324>
 800cdba:	9b01      	ldr	r3, [sp, #4]
 800cdbc:	429e      	cmp	r6, r3
 800cdbe:	f67f aee4 	bls.w	800cb8a <_scanf_float+0x86>
 800cdc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cdc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cdca:	463a      	mov	r2, r7
 800cdcc:	4640      	mov	r0, r8
 800cdce:	4798      	blx	r3
 800cdd0:	6923      	ldr	r3, [r4, #16]
 800cdd2:	3b01      	subs	r3, #1
 800cdd4:	6123      	str	r3, [r4, #16]
 800cdd6:	e7f0      	b.n	800cdba <_scanf_float+0x2b6>
 800cdd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cddc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cde0:	463a      	mov	r2, r7
 800cde2:	4640      	mov	r0, r8
 800cde4:	4798      	blx	r3
 800cde6:	6923      	ldr	r3, [r4, #16]
 800cde8:	3b01      	subs	r3, #1
 800cdea:	6123      	str	r3, [r4, #16]
 800cdec:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800cdf0:	fa5f fa8a 	uxtb.w	sl, sl
 800cdf4:	f1ba 0f02 	cmp.w	sl, #2
 800cdf8:	d1ee      	bne.n	800cdd8 <_scanf_float+0x2d4>
 800cdfa:	3d03      	subs	r5, #3
 800cdfc:	b2ed      	uxtb	r5, r5
 800cdfe:	1b76      	subs	r6, r6, r5
 800ce00:	6823      	ldr	r3, [r4, #0]
 800ce02:	05da      	lsls	r2, r3, #23
 800ce04:	d530      	bpl.n	800ce68 <_scanf_float+0x364>
 800ce06:	055b      	lsls	r3, r3, #21
 800ce08:	d511      	bpl.n	800ce2e <_scanf_float+0x32a>
 800ce0a:	9b01      	ldr	r3, [sp, #4]
 800ce0c:	429e      	cmp	r6, r3
 800ce0e:	f67f aebc 	bls.w	800cb8a <_scanf_float+0x86>
 800ce12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ce16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ce1a:	463a      	mov	r2, r7
 800ce1c:	4640      	mov	r0, r8
 800ce1e:	4798      	blx	r3
 800ce20:	6923      	ldr	r3, [r4, #16]
 800ce22:	3b01      	subs	r3, #1
 800ce24:	6123      	str	r3, [r4, #16]
 800ce26:	e7f0      	b.n	800ce0a <_scanf_float+0x306>
 800ce28:	46aa      	mov	sl, r5
 800ce2a:	46b3      	mov	fp, r6
 800ce2c:	e7de      	b.n	800cdec <_scanf_float+0x2e8>
 800ce2e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ce32:	6923      	ldr	r3, [r4, #16]
 800ce34:	2965      	cmp	r1, #101	@ 0x65
 800ce36:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ce3a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800ce3e:	6123      	str	r3, [r4, #16]
 800ce40:	d00c      	beq.n	800ce5c <_scanf_float+0x358>
 800ce42:	2945      	cmp	r1, #69	@ 0x45
 800ce44:	d00a      	beq.n	800ce5c <_scanf_float+0x358>
 800ce46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ce4a:	463a      	mov	r2, r7
 800ce4c:	4640      	mov	r0, r8
 800ce4e:	4798      	blx	r3
 800ce50:	6923      	ldr	r3, [r4, #16]
 800ce52:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ce56:	3b01      	subs	r3, #1
 800ce58:	1eb5      	subs	r5, r6, #2
 800ce5a:	6123      	str	r3, [r4, #16]
 800ce5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ce60:	463a      	mov	r2, r7
 800ce62:	4640      	mov	r0, r8
 800ce64:	4798      	blx	r3
 800ce66:	462e      	mov	r6, r5
 800ce68:	6822      	ldr	r2, [r4, #0]
 800ce6a:	f012 0210 	ands.w	r2, r2, #16
 800ce6e:	d001      	beq.n	800ce74 <_scanf_float+0x370>
 800ce70:	2000      	movs	r0, #0
 800ce72:	e68b      	b.n	800cb8c <_scanf_float+0x88>
 800ce74:	7032      	strb	r2, [r6, #0]
 800ce76:	6823      	ldr	r3, [r4, #0]
 800ce78:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ce7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce80:	d11c      	bne.n	800cebc <_scanf_float+0x3b8>
 800ce82:	9b02      	ldr	r3, [sp, #8]
 800ce84:	454b      	cmp	r3, r9
 800ce86:	eba3 0209 	sub.w	r2, r3, r9
 800ce8a:	d123      	bne.n	800ced4 <_scanf_float+0x3d0>
 800ce8c:	9901      	ldr	r1, [sp, #4]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	4640      	mov	r0, r8
 800ce92:	f003 fb35 	bl	8010500 <_strtod_r>
 800ce96:	9b03      	ldr	r3, [sp, #12]
 800ce98:	6821      	ldr	r1, [r4, #0]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f011 0f02 	tst.w	r1, #2
 800cea0:	ec57 6b10 	vmov	r6, r7, d0
 800cea4:	f103 0204 	add.w	r2, r3, #4
 800cea8:	d01f      	beq.n	800ceea <_scanf_float+0x3e6>
 800ceaa:	9903      	ldr	r1, [sp, #12]
 800ceac:	600a      	str	r2, [r1, #0]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	e9c3 6700 	strd	r6, r7, [r3]
 800ceb4:	68e3      	ldr	r3, [r4, #12]
 800ceb6:	3301      	adds	r3, #1
 800ceb8:	60e3      	str	r3, [r4, #12]
 800ceba:	e7d9      	b.n	800ce70 <_scanf_float+0x36c>
 800cebc:	9b04      	ldr	r3, [sp, #16]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d0e4      	beq.n	800ce8c <_scanf_float+0x388>
 800cec2:	9905      	ldr	r1, [sp, #20]
 800cec4:	230a      	movs	r3, #10
 800cec6:	3101      	adds	r1, #1
 800cec8:	4640      	mov	r0, r8
 800ceca:	f003 fb99 	bl	8010600 <_strtol_r>
 800cece:	9b04      	ldr	r3, [sp, #16]
 800ced0:	9e05      	ldr	r6, [sp, #20]
 800ced2:	1ac2      	subs	r2, r0, r3
 800ced4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ced8:	429e      	cmp	r6, r3
 800ceda:	bf28      	it	cs
 800cedc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cee0:	4910      	ldr	r1, [pc, #64]	@ (800cf24 <_scanf_float+0x420>)
 800cee2:	4630      	mov	r0, r6
 800cee4:	f000 fd72 	bl	800d9cc <siprintf>
 800cee8:	e7d0      	b.n	800ce8c <_scanf_float+0x388>
 800ceea:	f011 0f04 	tst.w	r1, #4
 800ceee:	9903      	ldr	r1, [sp, #12]
 800cef0:	600a      	str	r2, [r1, #0]
 800cef2:	d1dc      	bne.n	800ceae <_scanf_float+0x3aa>
 800cef4:	681d      	ldr	r5, [r3, #0]
 800cef6:	4632      	mov	r2, r6
 800cef8:	463b      	mov	r3, r7
 800cefa:	4630      	mov	r0, r6
 800cefc:	4639      	mov	r1, r7
 800cefe:	f7f3 fe35 	bl	8000b6c <__aeabi_dcmpun>
 800cf02:	b128      	cbz	r0, 800cf10 <_scanf_float+0x40c>
 800cf04:	4808      	ldr	r0, [pc, #32]	@ (800cf28 <_scanf_float+0x424>)
 800cf06:	f001 f973 	bl	800e1f0 <nanf>
 800cf0a:	ed85 0a00 	vstr	s0, [r5]
 800cf0e:	e7d1      	b.n	800ceb4 <_scanf_float+0x3b0>
 800cf10:	4630      	mov	r0, r6
 800cf12:	4639      	mov	r1, r7
 800cf14:	f7f3 fe88 	bl	8000c28 <__aeabi_d2f>
 800cf18:	6028      	str	r0, [r5, #0]
 800cf1a:	e7cb      	b.n	800ceb4 <_scanf_float+0x3b0>
 800cf1c:	f04f 0900 	mov.w	r9, #0
 800cf20:	e629      	b.n	800cb76 <_scanf_float+0x72>
 800cf22:	bf00      	nop
 800cf24:	080129db 	.word	0x080129db
 800cf28:	08012c8f 	.word	0x08012c8f

0800cf2c <_fclose_r>:
 800cf2c:	b570      	push	{r4, r5, r6, lr}
 800cf2e:	4605      	mov	r5, r0
 800cf30:	460c      	mov	r4, r1
 800cf32:	b1b1      	cbz	r1, 800cf62 <_fclose_r+0x36>
 800cf34:	b118      	cbz	r0, 800cf3e <_fclose_r+0x12>
 800cf36:	6a03      	ldr	r3, [r0, #32]
 800cf38:	b90b      	cbnz	r3, 800cf3e <_fclose_r+0x12>
 800cf3a:	f000 fa99 	bl	800d470 <__sinit>
 800cf3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cf40:	07de      	lsls	r6, r3, #31
 800cf42:	d405      	bmi.n	800cf50 <_fclose_r+0x24>
 800cf44:	89a3      	ldrh	r3, [r4, #12]
 800cf46:	0598      	lsls	r0, r3, #22
 800cf48:	d402      	bmi.n	800cf50 <_fclose_r+0x24>
 800cf4a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf4c:	f001 f938 	bl	800e1c0 <__retarget_lock_acquire_recursive>
 800cf50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf54:	b943      	cbnz	r3, 800cf68 <_fclose_r+0x3c>
 800cf56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cf58:	07d9      	lsls	r1, r3, #31
 800cf5a:	d402      	bmi.n	800cf62 <_fclose_r+0x36>
 800cf5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf5e:	f001 f930 	bl	800e1c2 <__retarget_lock_release_recursive>
 800cf62:	2600      	movs	r6, #0
 800cf64:	4630      	mov	r0, r6
 800cf66:	bd70      	pop	{r4, r5, r6, pc}
 800cf68:	4621      	mov	r1, r4
 800cf6a:	4628      	mov	r0, r5
 800cf6c:	f000 f860 	bl	800d030 <__sflush_r>
 800cf70:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cf72:	4606      	mov	r6, r0
 800cf74:	b133      	cbz	r3, 800cf84 <_fclose_r+0x58>
 800cf76:	6a21      	ldr	r1, [r4, #32]
 800cf78:	4628      	mov	r0, r5
 800cf7a:	4798      	blx	r3
 800cf7c:	2800      	cmp	r0, #0
 800cf7e:	bfb8      	it	lt
 800cf80:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 800cf84:	89a3      	ldrh	r3, [r4, #12]
 800cf86:	061a      	lsls	r2, r3, #24
 800cf88:	d503      	bpl.n	800cf92 <_fclose_r+0x66>
 800cf8a:	6921      	ldr	r1, [r4, #16]
 800cf8c:	4628      	mov	r0, r5
 800cf8e:	f001 ff8b 	bl	800eea8 <_free_r>
 800cf92:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf94:	b141      	cbz	r1, 800cfa8 <_fclose_r+0x7c>
 800cf96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf9a:	4299      	cmp	r1, r3
 800cf9c:	d002      	beq.n	800cfa4 <_fclose_r+0x78>
 800cf9e:	4628      	mov	r0, r5
 800cfa0:	f001 ff82 	bl	800eea8 <_free_r>
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	6363      	str	r3, [r4, #52]	@ 0x34
 800cfa8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cfaa:	b121      	cbz	r1, 800cfb6 <_fclose_r+0x8a>
 800cfac:	4628      	mov	r0, r5
 800cfae:	f001 ff7b 	bl	800eea8 <_free_r>
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	64a3      	str	r3, [r4, #72]	@ 0x48
 800cfb6:	f000 f9fd 	bl	800d3b4 <__sfp_lock_acquire>
 800cfba:	2300      	movs	r3, #0
 800cfbc:	81a3      	strh	r3, [r4, #12]
 800cfbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cfc0:	07db      	lsls	r3, r3, #31
 800cfc2:	d402      	bmi.n	800cfca <_fclose_r+0x9e>
 800cfc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cfc6:	f001 f8fc 	bl	800e1c2 <__retarget_lock_release_recursive>
 800cfca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cfcc:	f001 f8f7 	bl	800e1be <__retarget_lock_close_recursive>
 800cfd0:	f000 f9f6 	bl	800d3c0 <__sfp_lock_release>
 800cfd4:	e7c6      	b.n	800cf64 <_fclose_r+0x38>
	...

0800cfd8 <fclose>:
 800cfd8:	4b02      	ldr	r3, [pc, #8]	@ (800cfe4 <fclose+0xc>)
 800cfda:	4601      	mov	r1, r0
 800cfdc:	6818      	ldr	r0, [r3, #0]
 800cfde:	f7ff bfa5 	b.w	800cf2c <_fclose_r>
 800cfe2:	bf00      	nop
 800cfe4:	2000003c 	.word	0x2000003c

0800cfe8 <feof>:
 800cfe8:	b538      	push	{r3, r4, r5, lr}
 800cfea:	4b10      	ldr	r3, [pc, #64]	@ (800d02c <feof+0x44>)
 800cfec:	4604      	mov	r4, r0
 800cfee:	6818      	ldr	r0, [r3, #0]
 800cff0:	b118      	cbz	r0, 800cffa <feof+0x12>
 800cff2:	6a03      	ldr	r3, [r0, #32]
 800cff4:	b90b      	cbnz	r3, 800cffa <feof+0x12>
 800cff6:	f000 fa3b 	bl	800d470 <__sinit>
 800cffa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cffc:	07d8      	lsls	r0, r3, #31
 800cffe:	d405      	bmi.n	800d00c <feof+0x24>
 800d000:	89a3      	ldrh	r3, [r4, #12]
 800d002:	0599      	lsls	r1, r3, #22
 800d004:	d402      	bmi.n	800d00c <feof+0x24>
 800d006:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d008:	f001 f8da 	bl	800e1c0 <__retarget_lock_acquire_recursive>
 800d00c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d00e:	89a5      	ldrh	r5, [r4, #12]
 800d010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d014:	07d2      	lsls	r2, r2, #31
 800d016:	f3c5 1540 	ubfx	r5, r5, #5, #1
 800d01a:	d404      	bmi.n	800d026 <feof+0x3e>
 800d01c:	059b      	lsls	r3, r3, #22
 800d01e:	d402      	bmi.n	800d026 <feof+0x3e>
 800d020:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d022:	f001 f8ce 	bl	800e1c2 <__retarget_lock_release_recursive>
 800d026:	4628      	mov	r0, r5
 800d028:	bd38      	pop	{r3, r4, r5, pc}
 800d02a:	bf00      	nop
 800d02c:	2000003c 	.word	0x2000003c

0800d030 <__sflush_r>:
 800d030:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d038:	0716      	lsls	r6, r2, #28
 800d03a:	4605      	mov	r5, r0
 800d03c:	460c      	mov	r4, r1
 800d03e:	d454      	bmi.n	800d0ea <__sflush_r+0xba>
 800d040:	684b      	ldr	r3, [r1, #4]
 800d042:	2b00      	cmp	r3, #0
 800d044:	dc02      	bgt.n	800d04c <__sflush_r+0x1c>
 800d046:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d048:	2b00      	cmp	r3, #0
 800d04a:	dd48      	ble.n	800d0de <__sflush_r+0xae>
 800d04c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d04e:	2e00      	cmp	r6, #0
 800d050:	d045      	beq.n	800d0de <__sflush_r+0xae>
 800d052:	2300      	movs	r3, #0
 800d054:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d058:	682f      	ldr	r7, [r5, #0]
 800d05a:	6a21      	ldr	r1, [r4, #32]
 800d05c:	602b      	str	r3, [r5, #0]
 800d05e:	d030      	beq.n	800d0c2 <__sflush_r+0x92>
 800d060:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d062:	89a3      	ldrh	r3, [r4, #12]
 800d064:	0759      	lsls	r1, r3, #29
 800d066:	d505      	bpl.n	800d074 <__sflush_r+0x44>
 800d068:	6863      	ldr	r3, [r4, #4]
 800d06a:	1ad2      	subs	r2, r2, r3
 800d06c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d06e:	b10b      	cbz	r3, 800d074 <__sflush_r+0x44>
 800d070:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d072:	1ad2      	subs	r2, r2, r3
 800d074:	2300      	movs	r3, #0
 800d076:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d078:	6a21      	ldr	r1, [r4, #32]
 800d07a:	4628      	mov	r0, r5
 800d07c:	47b0      	blx	r6
 800d07e:	1c43      	adds	r3, r0, #1
 800d080:	89a3      	ldrh	r3, [r4, #12]
 800d082:	d106      	bne.n	800d092 <__sflush_r+0x62>
 800d084:	6829      	ldr	r1, [r5, #0]
 800d086:	291d      	cmp	r1, #29
 800d088:	d82b      	bhi.n	800d0e2 <__sflush_r+0xb2>
 800d08a:	4a2a      	ldr	r2, [pc, #168]	@ (800d134 <__sflush_r+0x104>)
 800d08c:	410a      	asrs	r2, r1
 800d08e:	07d6      	lsls	r6, r2, #31
 800d090:	d427      	bmi.n	800d0e2 <__sflush_r+0xb2>
 800d092:	2200      	movs	r2, #0
 800d094:	6062      	str	r2, [r4, #4]
 800d096:	04d9      	lsls	r1, r3, #19
 800d098:	6922      	ldr	r2, [r4, #16]
 800d09a:	6022      	str	r2, [r4, #0]
 800d09c:	d504      	bpl.n	800d0a8 <__sflush_r+0x78>
 800d09e:	1c42      	adds	r2, r0, #1
 800d0a0:	d101      	bne.n	800d0a6 <__sflush_r+0x76>
 800d0a2:	682b      	ldr	r3, [r5, #0]
 800d0a4:	b903      	cbnz	r3, 800d0a8 <__sflush_r+0x78>
 800d0a6:	6560      	str	r0, [r4, #84]	@ 0x54
 800d0a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d0aa:	602f      	str	r7, [r5, #0]
 800d0ac:	b1b9      	cbz	r1, 800d0de <__sflush_r+0xae>
 800d0ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d0b2:	4299      	cmp	r1, r3
 800d0b4:	d002      	beq.n	800d0bc <__sflush_r+0x8c>
 800d0b6:	4628      	mov	r0, r5
 800d0b8:	f001 fef6 	bl	800eea8 <_free_r>
 800d0bc:	2300      	movs	r3, #0
 800d0be:	6363      	str	r3, [r4, #52]	@ 0x34
 800d0c0:	e00d      	b.n	800d0de <__sflush_r+0xae>
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	4628      	mov	r0, r5
 800d0c6:	47b0      	blx	r6
 800d0c8:	4602      	mov	r2, r0
 800d0ca:	1c50      	adds	r0, r2, #1
 800d0cc:	d1c9      	bne.n	800d062 <__sflush_r+0x32>
 800d0ce:	682b      	ldr	r3, [r5, #0]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d0c6      	beq.n	800d062 <__sflush_r+0x32>
 800d0d4:	2b1d      	cmp	r3, #29
 800d0d6:	d001      	beq.n	800d0dc <__sflush_r+0xac>
 800d0d8:	2b16      	cmp	r3, #22
 800d0da:	d11e      	bne.n	800d11a <__sflush_r+0xea>
 800d0dc:	602f      	str	r7, [r5, #0]
 800d0de:	2000      	movs	r0, #0
 800d0e0:	e022      	b.n	800d128 <__sflush_r+0xf8>
 800d0e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0e6:	b21b      	sxth	r3, r3
 800d0e8:	e01b      	b.n	800d122 <__sflush_r+0xf2>
 800d0ea:	690f      	ldr	r7, [r1, #16]
 800d0ec:	2f00      	cmp	r7, #0
 800d0ee:	d0f6      	beq.n	800d0de <__sflush_r+0xae>
 800d0f0:	0793      	lsls	r3, r2, #30
 800d0f2:	680e      	ldr	r6, [r1, #0]
 800d0f4:	bf08      	it	eq
 800d0f6:	694b      	ldreq	r3, [r1, #20]
 800d0f8:	600f      	str	r7, [r1, #0]
 800d0fa:	bf18      	it	ne
 800d0fc:	2300      	movne	r3, #0
 800d0fe:	eba6 0807 	sub.w	r8, r6, r7
 800d102:	608b      	str	r3, [r1, #8]
 800d104:	f1b8 0f00 	cmp.w	r8, #0
 800d108:	dde9      	ble.n	800d0de <__sflush_r+0xae>
 800d10a:	6a21      	ldr	r1, [r4, #32]
 800d10c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d10e:	4643      	mov	r3, r8
 800d110:	463a      	mov	r2, r7
 800d112:	4628      	mov	r0, r5
 800d114:	47b0      	blx	r6
 800d116:	2800      	cmp	r0, #0
 800d118:	dc08      	bgt.n	800d12c <__sflush_r+0xfc>
 800d11a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d11e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d122:	81a3      	strh	r3, [r4, #12]
 800d124:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d12c:	4407      	add	r7, r0
 800d12e:	eba8 0800 	sub.w	r8, r8, r0
 800d132:	e7e7      	b.n	800d104 <__sflush_r+0xd4>
 800d134:	dfbffffe 	.word	0xdfbffffe

0800d138 <_fflush_r>:
 800d138:	b538      	push	{r3, r4, r5, lr}
 800d13a:	690b      	ldr	r3, [r1, #16]
 800d13c:	4605      	mov	r5, r0
 800d13e:	460c      	mov	r4, r1
 800d140:	b913      	cbnz	r3, 800d148 <_fflush_r+0x10>
 800d142:	2500      	movs	r5, #0
 800d144:	4628      	mov	r0, r5
 800d146:	bd38      	pop	{r3, r4, r5, pc}
 800d148:	b118      	cbz	r0, 800d152 <_fflush_r+0x1a>
 800d14a:	6a03      	ldr	r3, [r0, #32]
 800d14c:	b90b      	cbnz	r3, 800d152 <_fflush_r+0x1a>
 800d14e:	f000 f98f 	bl	800d470 <__sinit>
 800d152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d0f3      	beq.n	800d142 <_fflush_r+0xa>
 800d15a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d15c:	07d0      	lsls	r0, r2, #31
 800d15e:	d404      	bmi.n	800d16a <_fflush_r+0x32>
 800d160:	0599      	lsls	r1, r3, #22
 800d162:	d402      	bmi.n	800d16a <_fflush_r+0x32>
 800d164:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d166:	f001 f82b 	bl	800e1c0 <__retarget_lock_acquire_recursive>
 800d16a:	4628      	mov	r0, r5
 800d16c:	4621      	mov	r1, r4
 800d16e:	f7ff ff5f 	bl	800d030 <__sflush_r>
 800d172:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d174:	07da      	lsls	r2, r3, #31
 800d176:	4605      	mov	r5, r0
 800d178:	d4e4      	bmi.n	800d144 <_fflush_r+0xc>
 800d17a:	89a3      	ldrh	r3, [r4, #12]
 800d17c:	059b      	lsls	r3, r3, #22
 800d17e:	d4e1      	bmi.n	800d144 <_fflush_r+0xc>
 800d180:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d182:	f001 f81e 	bl	800e1c2 <__retarget_lock_release_recursive>
 800d186:	e7dd      	b.n	800d144 <_fflush_r+0xc>

0800d188 <fflush>:
 800d188:	4601      	mov	r1, r0
 800d18a:	b920      	cbnz	r0, 800d196 <fflush+0xe>
 800d18c:	4a04      	ldr	r2, [pc, #16]	@ (800d1a0 <fflush+0x18>)
 800d18e:	4905      	ldr	r1, [pc, #20]	@ (800d1a4 <fflush+0x1c>)
 800d190:	4805      	ldr	r0, [pc, #20]	@ (800d1a8 <fflush+0x20>)
 800d192:	f000 b9d7 	b.w	800d544 <_fwalk_sglue>
 800d196:	4b05      	ldr	r3, [pc, #20]	@ (800d1ac <fflush+0x24>)
 800d198:	6818      	ldr	r0, [r3, #0]
 800d19a:	f7ff bfcd 	b.w	800d138 <_fflush_r>
 800d19e:	bf00      	nop
 800d1a0:	20000030 	.word	0x20000030
 800d1a4:	0800d139 	.word	0x0800d139
 800d1a8:	20000040 	.word	0x20000040
 800d1ac:	2000003c 	.word	0x2000003c

0800d1b0 <_fgetpos_r>:
 800d1b0:	b510      	push	{r4, lr}
 800d1b2:	4614      	mov	r4, r2
 800d1b4:	f000 f9c4 	bl	800d540 <_ftell_r>
 800d1b8:	1c43      	adds	r3, r0, #1
 800d1ba:	6020      	str	r0, [r4, #0]
 800d1bc:	4258      	negs	r0, r3
 800d1be:	4158      	adcs	r0, r3
 800d1c0:	bd10      	pop	{r4, pc}
	...

0800d1c4 <fgetpos>:
 800d1c4:	4b02      	ldr	r3, [pc, #8]	@ (800d1d0 <fgetpos+0xc>)
 800d1c6:	460a      	mov	r2, r1
 800d1c8:	4601      	mov	r1, r0
 800d1ca:	6818      	ldr	r0, [r3, #0]
 800d1cc:	f7ff bff0 	b.w	800d1b0 <_fgetpos_r>
 800d1d0:	2000003c 	.word	0x2000003c

0800d1d4 <_fgets_r>:
 800d1d4:	2a01      	cmp	r2, #1
 800d1d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1da:	4681      	mov	r9, r0
 800d1dc:	460e      	mov	r6, r1
 800d1de:	4615      	mov	r5, r2
 800d1e0:	461c      	mov	r4, r3
 800d1e2:	dd21      	ble.n	800d228 <_fgets_r+0x54>
 800d1e4:	b118      	cbz	r0, 800d1ee <_fgets_r+0x1a>
 800d1e6:	6a03      	ldr	r3, [r0, #32]
 800d1e8:	b90b      	cbnz	r3, 800d1ee <_fgets_r+0x1a>
 800d1ea:	f000 f941 	bl	800d470 <__sinit>
 800d1ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d1f0:	07db      	lsls	r3, r3, #31
 800d1f2:	d405      	bmi.n	800d200 <_fgets_r+0x2c>
 800d1f4:	89a3      	ldrh	r3, [r4, #12]
 800d1f6:	059f      	lsls	r7, r3, #22
 800d1f8:	d402      	bmi.n	800d200 <_fgets_r+0x2c>
 800d1fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d1fc:	f000 ffe0 	bl	800e1c0 <__retarget_lock_acquire_recursive>
 800d200:	3d01      	subs	r5, #1
 800d202:	4637      	mov	r7, r6
 800d204:	6863      	ldr	r3, [r4, #4]
 800d206:	b99b      	cbnz	r3, 800d230 <_fgets_r+0x5c>
 800d208:	4621      	mov	r1, r4
 800d20a:	4648      	mov	r0, r9
 800d20c:	f000 fa9e 	bl	800d74c <__srefill_r>
 800d210:	b168      	cbz	r0, 800d22e <_fgets_r+0x5a>
 800d212:	42b7      	cmp	r7, r6
 800d214:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d216:	d139      	bne.n	800d28c <_fgets_r+0xb8>
 800d218:	07d8      	lsls	r0, r3, #31
 800d21a:	d405      	bmi.n	800d228 <_fgets_r+0x54>
 800d21c:	89a3      	ldrh	r3, [r4, #12]
 800d21e:	0599      	lsls	r1, r3, #22
 800d220:	d402      	bmi.n	800d228 <_fgets_r+0x54>
 800d222:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d224:	f000 ffcd 	bl	800e1c2 <__retarget_lock_release_recursive>
 800d228:	2000      	movs	r0, #0
 800d22a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d22e:	6863      	ldr	r3, [r4, #4]
 800d230:	f8d4 a000 	ldr.w	sl, [r4]
 800d234:	42ab      	cmp	r3, r5
 800d236:	bf28      	it	cs
 800d238:	462b      	movcs	r3, r5
 800d23a:	461a      	mov	r2, r3
 800d23c:	210a      	movs	r1, #10
 800d23e:	4650      	mov	r0, sl
 800d240:	4698      	mov	r8, r3
 800d242:	f7f2 ffe5 	bl	8000210 <memchr>
 800d246:	6863      	ldr	r3, [r4, #4]
 800d248:	b188      	cbz	r0, 800d26e <_fgets_r+0x9a>
 800d24a:	3001      	adds	r0, #1
 800d24c:	eba0 050a 	sub.w	r5, r0, sl
 800d250:	1b5b      	subs	r3, r3, r5
 800d252:	e9c4 0300 	strd	r0, r3, [r4]
 800d256:	462a      	mov	r2, r5
 800d258:	4651      	mov	r1, sl
 800d25a:	4638      	mov	r0, r7
 800d25c:	f000 ffba 	bl	800e1d4 <memcpy>
 800d260:	2300      	movs	r3, #0
 800d262:	557b      	strb	r3, [r7, r5]
 800d264:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d266:	07da      	lsls	r2, r3, #31
 800d268:	d513      	bpl.n	800d292 <_fgets_r+0xbe>
 800d26a:	4630      	mov	r0, r6
 800d26c:	e7dd      	b.n	800d22a <_fgets_r+0x56>
 800d26e:	eba3 0308 	sub.w	r3, r3, r8
 800d272:	6063      	str	r3, [r4, #4]
 800d274:	6823      	ldr	r3, [r4, #0]
 800d276:	4443      	add	r3, r8
 800d278:	4638      	mov	r0, r7
 800d27a:	6023      	str	r3, [r4, #0]
 800d27c:	4642      	mov	r2, r8
 800d27e:	4651      	mov	r1, sl
 800d280:	f000 ffa8 	bl	800e1d4 <memcpy>
 800d284:	ebb5 0508 	subs.w	r5, r5, r8
 800d288:	4447      	add	r7, r8
 800d28a:	d1bb      	bne.n	800d204 <_fgets_r+0x30>
 800d28c:	2300      	movs	r3, #0
 800d28e:	703b      	strb	r3, [r7, #0]
 800d290:	e7e8      	b.n	800d264 <_fgets_r+0x90>
 800d292:	89a3      	ldrh	r3, [r4, #12]
 800d294:	059b      	lsls	r3, r3, #22
 800d296:	d4e8      	bmi.n	800d26a <_fgets_r+0x96>
 800d298:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d29a:	f000 ff92 	bl	800e1c2 <__retarget_lock_release_recursive>
 800d29e:	e7e4      	b.n	800d26a <_fgets_r+0x96>

0800d2a0 <fgets>:
 800d2a0:	4613      	mov	r3, r2
 800d2a2:	460a      	mov	r2, r1
 800d2a4:	4601      	mov	r1, r0
 800d2a6:	4802      	ldr	r0, [pc, #8]	@ (800d2b0 <fgets+0x10>)
 800d2a8:	6800      	ldr	r0, [r0, #0]
 800d2aa:	f7ff bf93 	b.w	800d1d4 <_fgets_r>
 800d2ae:	bf00      	nop
 800d2b0:	2000003c 	.word	0x2000003c

0800d2b4 <std>:
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	b510      	push	{r4, lr}
 800d2b8:	4604      	mov	r4, r0
 800d2ba:	e9c0 3300 	strd	r3, r3, [r0]
 800d2be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d2c2:	6083      	str	r3, [r0, #8]
 800d2c4:	8181      	strh	r1, [r0, #12]
 800d2c6:	6643      	str	r3, [r0, #100]	@ 0x64
 800d2c8:	81c2      	strh	r2, [r0, #14]
 800d2ca:	6183      	str	r3, [r0, #24]
 800d2cc:	4619      	mov	r1, r3
 800d2ce:	2208      	movs	r2, #8
 800d2d0:	305c      	adds	r0, #92	@ 0x5c
 800d2d2:	f000 fecd 	bl	800e070 <memset>
 800d2d6:	4b0d      	ldr	r3, [pc, #52]	@ (800d30c <std+0x58>)
 800d2d8:	6263      	str	r3, [r4, #36]	@ 0x24
 800d2da:	4b0d      	ldr	r3, [pc, #52]	@ (800d310 <std+0x5c>)
 800d2dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d2de:	4b0d      	ldr	r3, [pc, #52]	@ (800d314 <std+0x60>)
 800d2e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d2e2:	4b0d      	ldr	r3, [pc, #52]	@ (800d318 <std+0x64>)
 800d2e4:	6323      	str	r3, [r4, #48]	@ 0x30
 800d2e6:	4b0d      	ldr	r3, [pc, #52]	@ (800d31c <std+0x68>)
 800d2e8:	6224      	str	r4, [r4, #32]
 800d2ea:	429c      	cmp	r4, r3
 800d2ec:	d006      	beq.n	800d2fc <std+0x48>
 800d2ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d2f2:	4294      	cmp	r4, r2
 800d2f4:	d002      	beq.n	800d2fc <std+0x48>
 800d2f6:	33d0      	adds	r3, #208	@ 0xd0
 800d2f8:	429c      	cmp	r4, r3
 800d2fa:	d105      	bne.n	800d308 <std+0x54>
 800d2fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d304:	f000 bf5a 	b.w	800e1bc <__retarget_lock_init_recursive>
 800d308:	bd10      	pop	{r4, pc}
 800d30a:	bf00      	nop
 800d30c:	0800da0d 	.word	0x0800da0d
 800d310:	0800da2f 	.word	0x0800da2f
 800d314:	0800da67 	.word	0x0800da67
 800d318:	0800da8b 	.word	0x0800da8b
 800d31c:	200021d8 	.word	0x200021d8

0800d320 <stdio_exit_handler>:
 800d320:	4a02      	ldr	r2, [pc, #8]	@ (800d32c <stdio_exit_handler+0xc>)
 800d322:	4903      	ldr	r1, [pc, #12]	@ (800d330 <stdio_exit_handler+0x10>)
 800d324:	4803      	ldr	r0, [pc, #12]	@ (800d334 <stdio_exit_handler+0x14>)
 800d326:	f000 b90d 	b.w	800d544 <_fwalk_sglue>
 800d32a:	bf00      	nop
 800d32c:	20000030 	.word	0x20000030
 800d330:	0800d139 	.word	0x0800d139
 800d334:	20000040 	.word	0x20000040

0800d338 <cleanup_stdio>:
 800d338:	6841      	ldr	r1, [r0, #4]
 800d33a:	4b0c      	ldr	r3, [pc, #48]	@ (800d36c <cleanup_stdio+0x34>)
 800d33c:	4299      	cmp	r1, r3
 800d33e:	b510      	push	{r4, lr}
 800d340:	4604      	mov	r4, r0
 800d342:	d001      	beq.n	800d348 <cleanup_stdio+0x10>
 800d344:	f7ff fef8 	bl	800d138 <_fflush_r>
 800d348:	68a1      	ldr	r1, [r4, #8]
 800d34a:	4b09      	ldr	r3, [pc, #36]	@ (800d370 <cleanup_stdio+0x38>)
 800d34c:	4299      	cmp	r1, r3
 800d34e:	d002      	beq.n	800d356 <cleanup_stdio+0x1e>
 800d350:	4620      	mov	r0, r4
 800d352:	f7ff fef1 	bl	800d138 <_fflush_r>
 800d356:	68e1      	ldr	r1, [r4, #12]
 800d358:	4b06      	ldr	r3, [pc, #24]	@ (800d374 <cleanup_stdio+0x3c>)
 800d35a:	4299      	cmp	r1, r3
 800d35c:	d004      	beq.n	800d368 <cleanup_stdio+0x30>
 800d35e:	4620      	mov	r0, r4
 800d360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d364:	f7ff bee8 	b.w	800d138 <_fflush_r>
 800d368:	bd10      	pop	{r4, pc}
 800d36a:	bf00      	nop
 800d36c:	200021d8 	.word	0x200021d8
 800d370:	20002240 	.word	0x20002240
 800d374:	200022a8 	.word	0x200022a8

0800d378 <global_stdio_init.part.0>:
 800d378:	b510      	push	{r4, lr}
 800d37a:	4b0b      	ldr	r3, [pc, #44]	@ (800d3a8 <global_stdio_init.part.0+0x30>)
 800d37c:	4c0b      	ldr	r4, [pc, #44]	@ (800d3ac <global_stdio_init.part.0+0x34>)
 800d37e:	4a0c      	ldr	r2, [pc, #48]	@ (800d3b0 <global_stdio_init.part.0+0x38>)
 800d380:	601a      	str	r2, [r3, #0]
 800d382:	4620      	mov	r0, r4
 800d384:	2200      	movs	r2, #0
 800d386:	2104      	movs	r1, #4
 800d388:	f7ff ff94 	bl	800d2b4 <std>
 800d38c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d390:	2201      	movs	r2, #1
 800d392:	2109      	movs	r1, #9
 800d394:	f7ff ff8e 	bl	800d2b4 <std>
 800d398:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d39c:	2202      	movs	r2, #2
 800d39e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3a2:	2112      	movs	r1, #18
 800d3a4:	f7ff bf86 	b.w	800d2b4 <std>
 800d3a8:	20002310 	.word	0x20002310
 800d3ac:	200021d8 	.word	0x200021d8
 800d3b0:	0800d321 	.word	0x0800d321

0800d3b4 <__sfp_lock_acquire>:
 800d3b4:	4801      	ldr	r0, [pc, #4]	@ (800d3bc <__sfp_lock_acquire+0x8>)
 800d3b6:	f000 bf03 	b.w	800e1c0 <__retarget_lock_acquire_recursive>
 800d3ba:	bf00      	nop
 800d3bc:	20002319 	.word	0x20002319

0800d3c0 <__sfp_lock_release>:
 800d3c0:	4801      	ldr	r0, [pc, #4]	@ (800d3c8 <__sfp_lock_release+0x8>)
 800d3c2:	f000 befe 	b.w	800e1c2 <__retarget_lock_release_recursive>
 800d3c6:	bf00      	nop
 800d3c8:	20002319 	.word	0x20002319

0800d3cc <__sfp>:
 800d3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ce:	4607      	mov	r7, r0
 800d3d0:	f7ff fff0 	bl	800d3b4 <__sfp_lock_acquire>
 800d3d4:	4b23      	ldr	r3, [pc, #140]	@ (800d464 <__sfp+0x98>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	b90b      	cbnz	r3, 800d3de <__sfp+0x12>
 800d3da:	f7ff ffcd 	bl	800d378 <global_stdio_init.part.0>
 800d3de:	4e22      	ldr	r6, [pc, #136]	@ (800d468 <__sfp+0x9c>)
 800d3e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d3e4:	3b01      	subs	r3, #1
 800d3e6:	d50f      	bpl.n	800d408 <__sfp+0x3c>
 800d3e8:	6835      	ldr	r5, [r6, #0]
 800d3ea:	2d00      	cmp	r5, #0
 800d3ec:	d137      	bne.n	800d45e <__sfp+0x92>
 800d3ee:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 800d3f2:	4638      	mov	r0, r7
 800d3f4:	f7fe fea2 	bl	800c13c <_malloc_r>
 800d3f8:	4604      	mov	r4, r0
 800d3fa:	bb28      	cbnz	r0, 800d448 <__sfp+0x7c>
 800d3fc:	6030      	str	r0, [r6, #0]
 800d3fe:	f7ff ffdf 	bl	800d3c0 <__sfp_lock_release>
 800d402:	230c      	movs	r3, #12
 800d404:	603b      	str	r3, [r7, #0]
 800d406:	e01b      	b.n	800d440 <__sfp+0x74>
 800d408:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d40c:	b9d5      	cbnz	r5, 800d444 <__sfp+0x78>
 800d40e:	4b17      	ldr	r3, [pc, #92]	@ (800d46c <__sfp+0xa0>)
 800d410:	60e3      	str	r3, [r4, #12]
 800d412:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d416:	6665      	str	r5, [r4, #100]	@ 0x64
 800d418:	f000 fed0 	bl	800e1bc <__retarget_lock_init_recursive>
 800d41c:	f7ff ffd0 	bl	800d3c0 <__sfp_lock_release>
 800d420:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d424:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d428:	6025      	str	r5, [r4, #0]
 800d42a:	61a5      	str	r5, [r4, #24]
 800d42c:	2208      	movs	r2, #8
 800d42e:	4629      	mov	r1, r5
 800d430:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 800d434:	f000 fe1c 	bl	800e070 <memset>
 800d438:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800d43c:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 800d440:	4620      	mov	r0, r4
 800d442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d444:	3468      	adds	r4, #104	@ 0x68
 800d446:	e7cd      	b.n	800d3e4 <__sfp+0x18>
 800d448:	2304      	movs	r3, #4
 800d44a:	6005      	str	r5, [r0, #0]
 800d44c:	6043      	str	r3, [r0, #4]
 800d44e:	300c      	adds	r0, #12
 800d450:	60a0      	str	r0, [r4, #8]
 800d452:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 800d456:	4629      	mov	r1, r5
 800d458:	f000 fe0a 	bl	800e070 <memset>
 800d45c:	6034      	str	r4, [r6, #0]
 800d45e:	6836      	ldr	r6, [r6, #0]
 800d460:	e7be      	b.n	800d3e0 <__sfp+0x14>
 800d462:	bf00      	nop
 800d464:	20002310 	.word	0x20002310
 800d468:	20000030 	.word	0x20000030
 800d46c:	ffff0001 	.word	0xffff0001

0800d470 <__sinit>:
 800d470:	b510      	push	{r4, lr}
 800d472:	4604      	mov	r4, r0
 800d474:	f7ff ff9e 	bl	800d3b4 <__sfp_lock_acquire>
 800d478:	6a23      	ldr	r3, [r4, #32]
 800d47a:	b11b      	cbz	r3, 800d484 <__sinit+0x14>
 800d47c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d480:	f7ff bf9e 	b.w	800d3c0 <__sfp_lock_release>
 800d484:	4b04      	ldr	r3, [pc, #16]	@ (800d498 <__sinit+0x28>)
 800d486:	6223      	str	r3, [r4, #32]
 800d488:	4b04      	ldr	r3, [pc, #16]	@ (800d49c <__sinit+0x2c>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d1f5      	bne.n	800d47c <__sinit+0xc>
 800d490:	f7ff ff72 	bl	800d378 <global_stdio_init.part.0>
 800d494:	e7f2      	b.n	800d47c <__sinit+0xc>
 800d496:	bf00      	nop
 800d498:	0800d339 	.word	0x0800d339
 800d49c:	20002310 	.word	0x20002310

0800d4a0 <fiprintf>:
 800d4a0:	b40e      	push	{r1, r2, r3}
 800d4a2:	b503      	push	{r0, r1, lr}
 800d4a4:	4601      	mov	r1, r0
 800d4a6:	ab03      	add	r3, sp, #12
 800d4a8:	4805      	ldr	r0, [pc, #20]	@ (800d4c0 <fiprintf+0x20>)
 800d4aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4ae:	6800      	ldr	r0, [r0, #0]
 800d4b0:	9301      	str	r3, [sp, #4]
 800d4b2:	f003 fa29 	bl	8010908 <_vfiprintf_r>
 800d4b6:	b002      	add	sp, #8
 800d4b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4bc:	b003      	add	sp, #12
 800d4be:	4770      	bx	lr
 800d4c0:	2000003c 	.word	0x2000003c

0800d4c4 <_fputc_r>:
 800d4c4:	b570      	push	{r4, r5, r6, lr}
 800d4c6:	460e      	mov	r6, r1
 800d4c8:	4614      	mov	r4, r2
 800d4ca:	4605      	mov	r5, r0
 800d4cc:	b118      	cbz	r0, 800d4d6 <_fputc_r+0x12>
 800d4ce:	6a03      	ldr	r3, [r0, #32]
 800d4d0:	b90b      	cbnz	r3, 800d4d6 <_fputc_r+0x12>
 800d4d2:	f7ff ffcd 	bl	800d470 <__sinit>
 800d4d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d4d8:	07d8      	lsls	r0, r3, #31
 800d4da:	d405      	bmi.n	800d4e8 <_fputc_r+0x24>
 800d4dc:	89a3      	ldrh	r3, [r4, #12]
 800d4de:	0599      	lsls	r1, r3, #22
 800d4e0:	d402      	bmi.n	800d4e8 <_fputc_r+0x24>
 800d4e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d4e4:	f000 fe6c 	bl	800e1c0 <__retarget_lock_acquire_recursive>
 800d4e8:	4622      	mov	r2, r4
 800d4ea:	4628      	mov	r0, r5
 800d4ec:	4631      	mov	r1, r6
 800d4ee:	f000 f8e3 	bl	800d6b8 <_putc_r>
 800d4f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d4f4:	07da      	lsls	r2, r3, #31
 800d4f6:	4605      	mov	r5, r0
 800d4f8:	d405      	bmi.n	800d506 <_fputc_r+0x42>
 800d4fa:	89a3      	ldrh	r3, [r4, #12]
 800d4fc:	059b      	lsls	r3, r3, #22
 800d4fe:	d402      	bmi.n	800d506 <_fputc_r+0x42>
 800d500:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d502:	f000 fe5e 	bl	800e1c2 <__retarget_lock_release_recursive>
 800d506:	4628      	mov	r0, r5
 800d508:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d50c <fputc>:
 800d50c:	4b02      	ldr	r3, [pc, #8]	@ (800d518 <fputc+0xc>)
 800d50e:	460a      	mov	r2, r1
 800d510:	4601      	mov	r1, r0
 800d512:	6818      	ldr	r0, [r3, #0]
 800d514:	f7ff bfd6 	b.w	800d4c4 <_fputc_r>
 800d518:	2000003c 	.word	0x2000003c

0800d51c <fiscanf>:
 800d51c:	b40e      	push	{r1, r2, r3}
 800d51e:	b503      	push	{r0, r1, lr}
 800d520:	4601      	mov	r1, r0
 800d522:	ab03      	add	r3, sp, #12
 800d524:	4805      	ldr	r0, [pc, #20]	@ (800d53c <fiscanf+0x20>)
 800d526:	f853 2b04 	ldr.w	r2, [r3], #4
 800d52a:	6800      	ldr	r0, [r0, #0]
 800d52c:	9301      	str	r3, [sp, #4]
 800d52e:	f003 fc9f 	bl	8010e70 <_vfiscanf_r>
 800d532:	b002      	add	sp, #8
 800d534:	f85d eb04 	ldr.w	lr, [sp], #4
 800d538:	b003      	add	sp, #12
 800d53a:	4770      	bx	lr
 800d53c:	2000003c 	.word	0x2000003c

0800d540 <_ftell_r>:
 800d540:	f000 bbfc 	b.w	800dd3c <_ftello_r>

0800d544 <_fwalk_sglue>:
 800d544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d548:	4607      	mov	r7, r0
 800d54a:	4688      	mov	r8, r1
 800d54c:	4614      	mov	r4, r2
 800d54e:	2600      	movs	r6, #0
 800d550:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d554:	f1b9 0901 	subs.w	r9, r9, #1
 800d558:	d505      	bpl.n	800d566 <_fwalk_sglue+0x22>
 800d55a:	6824      	ldr	r4, [r4, #0]
 800d55c:	2c00      	cmp	r4, #0
 800d55e:	d1f7      	bne.n	800d550 <_fwalk_sglue+0xc>
 800d560:	4630      	mov	r0, r6
 800d562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d566:	89ab      	ldrh	r3, [r5, #12]
 800d568:	2b01      	cmp	r3, #1
 800d56a:	d907      	bls.n	800d57c <_fwalk_sglue+0x38>
 800d56c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d570:	3301      	adds	r3, #1
 800d572:	d003      	beq.n	800d57c <_fwalk_sglue+0x38>
 800d574:	4629      	mov	r1, r5
 800d576:	4638      	mov	r0, r7
 800d578:	47c0      	blx	r8
 800d57a:	4306      	orrs	r6, r0
 800d57c:	3568      	adds	r5, #104	@ 0x68
 800d57e:	e7e9      	b.n	800d554 <_fwalk_sglue+0x10>

0800d580 <_fwrite_r>:
 800d580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d584:	9c08      	ldr	r4, [sp, #32]
 800d586:	468a      	mov	sl, r1
 800d588:	4690      	mov	r8, r2
 800d58a:	fb02 f903 	mul.w	r9, r2, r3
 800d58e:	4606      	mov	r6, r0
 800d590:	b118      	cbz	r0, 800d59a <_fwrite_r+0x1a>
 800d592:	6a03      	ldr	r3, [r0, #32]
 800d594:	b90b      	cbnz	r3, 800d59a <_fwrite_r+0x1a>
 800d596:	f7ff ff6b 	bl	800d470 <__sinit>
 800d59a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d59c:	07dd      	lsls	r5, r3, #31
 800d59e:	d405      	bmi.n	800d5ac <_fwrite_r+0x2c>
 800d5a0:	89a3      	ldrh	r3, [r4, #12]
 800d5a2:	0598      	lsls	r0, r3, #22
 800d5a4:	d402      	bmi.n	800d5ac <_fwrite_r+0x2c>
 800d5a6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d5a8:	f000 fe0a 	bl	800e1c0 <__retarget_lock_acquire_recursive>
 800d5ac:	89a3      	ldrh	r3, [r4, #12]
 800d5ae:	0719      	lsls	r1, r3, #28
 800d5b0:	d516      	bpl.n	800d5e0 <_fwrite_r+0x60>
 800d5b2:	6923      	ldr	r3, [r4, #16]
 800d5b4:	b1a3      	cbz	r3, 800d5e0 <_fwrite_r+0x60>
 800d5b6:	2500      	movs	r5, #0
 800d5b8:	454d      	cmp	r5, r9
 800d5ba:	d01f      	beq.n	800d5fc <_fwrite_r+0x7c>
 800d5bc:	68a7      	ldr	r7, [r4, #8]
 800d5be:	f81a 1005 	ldrb.w	r1, [sl, r5]
 800d5c2:	3f01      	subs	r7, #1
 800d5c4:	2f00      	cmp	r7, #0
 800d5c6:	60a7      	str	r7, [r4, #8]
 800d5c8:	da04      	bge.n	800d5d4 <_fwrite_r+0x54>
 800d5ca:	69a3      	ldr	r3, [r4, #24]
 800d5cc:	429f      	cmp	r7, r3
 800d5ce:	db0f      	blt.n	800d5f0 <_fwrite_r+0x70>
 800d5d0:	290a      	cmp	r1, #10
 800d5d2:	d00d      	beq.n	800d5f0 <_fwrite_r+0x70>
 800d5d4:	6823      	ldr	r3, [r4, #0]
 800d5d6:	1c5a      	adds	r2, r3, #1
 800d5d8:	6022      	str	r2, [r4, #0]
 800d5da:	7019      	strb	r1, [r3, #0]
 800d5dc:	3501      	adds	r5, #1
 800d5de:	e7eb      	b.n	800d5b8 <_fwrite_r+0x38>
 800d5e0:	4621      	mov	r1, r4
 800d5e2:	4630      	mov	r0, r6
 800d5e4:	f000 fb54 	bl	800dc90 <__swsetup_r>
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	d0e4      	beq.n	800d5b6 <_fwrite_r+0x36>
 800d5ec:	2500      	movs	r5, #0
 800d5ee:	e005      	b.n	800d5fc <_fwrite_r+0x7c>
 800d5f0:	4622      	mov	r2, r4
 800d5f2:	4630      	mov	r0, r6
 800d5f4:	f000 fb0e 	bl	800dc14 <__swbuf_r>
 800d5f8:	3001      	adds	r0, #1
 800d5fa:	d1ef      	bne.n	800d5dc <_fwrite_r+0x5c>
 800d5fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d5fe:	07da      	lsls	r2, r3, #31
 800d600:	d405      	bmi.n	800d60e <_fwrite_r+0x8e>
 800d602:	89a3      	ldrh	r3, [r4, #12]
 800d604:	059b      	lsls	r3, r3, #22
 800d606:	d402      	bmi.n	800d60e <_fwrite_r+0x8e>
 800d608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d60a:	f000 fdda 	bl	800e1c2 <__retarget_lock_release_recursive>
 800d60e:	fbb5 f0f8 	udiv	r0, r5, r8
 800d612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800d618 <fwrite>:
 800d618:	b507      	push	{r0, r1, r2, lr}
 800d61a:	9300      	str	r3, [sp, #0]
 800d61c:	4613      	mov	r3, r2
 800d61e:	460a      	mov	r2, r1
 800d620:	4601      	mov	r1, r0
 800d622:	4803      	ldr	r0, [pc, #12]	@ (800d630 <fwrite+0x18>)
 800d624:	6800      	ldr	r0, [r0, #0]
 800d626:	f7ff ffab 	bl	800d580 <_fwrite_r>
 800d62a:	b003      	add	sp, #12
 800d62c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d630:	2000003c 	.word	0x2000003c

0800d634 <getc>:
 800d634:	b538      	push	{r3, r4, r5, lr}
 800d636:	4b16      	ldr	r3, [pc, #88]	@ (800d690 <getc+0x5c>)
 800d638:	681d      	ldr	r5, [r3, #0]
 800d63a:	4604      	mov	r4, r0
 800d63c:	b125      	cbz	r5, 800d648 <getc+0x14>
 800d63e:	6a2b      	ldr	r3, [r5, #32]
 800d640:	b913      	cbnz	r3, 800d648 <getc+0x14>
 800d642:	4628      	mov	r0, r5
 800d644:	f7ff ff14 	bl	800d470 <__sinit>
 800d648:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d64a:	07d8      	lsls	r0, r3, #31
 800d64c:	d405      	bmi.n	800d65a <getc+0x26>
 800d64e:	89a3      	ldrh	r3, [r4, #12]
 800d650:	0599      	lsls	r1, r3, #22
 800d652:	d402      	bmi.n	800d65a <getc+0x26>
 800d654:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d656:	f000 fdb3 	bl	800e1c0 <__retarget_lock_acquire_recursive>
 800d65a:	6863      	ldr	r3, [r4, #4]
 800d65c:	3b01      	subs	r3, #1
 800d65e:	2b00      	cmp	r3, #0
 800d660:	6063      	str	r3, [r4, #4]
 800d662:	da0f      	bge.n	800d684 <getc+0x50>
 800d664:	4628      	mov	r0, r5
 800d666:	4621      	mov	r1, r4
 800d668:	f000 f8e4 	bl	800d834 <__srget_r>
 800d66c:	4605      	mov	r5, r0
 800d66e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d670:	07da      	lsls	r2, r3, #31
 800d672:	d405      	bmi.n	800d680 <getc+0x4c>
 800d674:	89a3      	ldrh	r3, [r4, #12]
 800d676:	059b      	lsls	r3, r3, #22
 800d678:	d402      	bmi.n	800d680 <getc+0x4c>
 800d67a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d67c:	f000 fda1 	bl	800e1c2 <__retarget_lock_release_recursive>
 800d680:	4628      	mov	r0, r5
 800d682:	bd38      	pop	{r3, r4, r5, pc}
 800d684:	6823      	ldr	r3, [r4, #0]
 800d686:	1c5a      	adds	r2, r3, #1
 800d688:	6022      	str	r2, [r4, #0]
 800d68a:	781d      	ldrb	r5, [r3, #0]
 800d68c:	e7ef      	b.n	800d66e <getc+0x3a>
 800d68e:	bf00      	nop
 800d690:	2000003c 	.word	0x2000003c

0800d694 <iprintf>:
 800d694:	b40f      	push	{r0, r1, r2, r3}
 800d696:	b507      	push	{r0, r1, r2, lr}
 800d698:	4906      	ldr	r1, [pc, #24]	@ (800d6b4 <iprintf+0x20>)
 800d69a:	ab04      	add	r3, sp, #16
 800d69c:	6808      	ldr	r0, [r1, #0]
 800d69e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6a2:	6881      	ldr	r1, [r0, #8]
 800d6a4:	9301      	str	r3, [sp, #4]
 800d6a6:	f003 f92f 	bl	8010908 <_vfiprintf_r>
 800d6aa:	b003      	add	sp, #12
 800d6ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6b0:	b004      	add	sp, #16
 800d6b2:	4770      	bx	lr
 800d6b4:	2000003c 	.word	0x2000003c

0800d6b8 <_putc_r>:
 800d6b8:	b570      	push	{r4, r5, r6, lr}
 800d6ba:	460d      	mov	r5, r1
 800d6bc:	4614      	mov	r4, r2
 800d6be:	4606      	mov	r6, r0
 800d6c0:	b118      	cbz	r0, 800d6ca <_putc_r+0x12>
 800d6c2:	6a03      	ldr	r3, [r0, #32]
 800d6c4:	b90b      	cbnz	r3, 800d6ca <_putc_r+0x12>
 800d6c6:	f7ff fed3 	bl	800d470 <__sinit>
 800d6ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d6cc:	07d8      	lsls	r0, r3, #31
 800d6ce:	d405      	bmi.n	800d6dc <_putc_r+0x24>
 800d6d0:	89a3      	ldrh	r3, [r4, #12]
 800d6d2:	0599      	lsls	r1, r3, #22
 800d6d4:	d402      	bmi.n	800d6dc <_putc_r+0x24>
 800d6d6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6d8:	f000 fd72 	bl	800e1c0 <__retarget_lock_acquire_recursive>
 800d6dc:	68a3      	ldr	r3, [r4, #8]
 800d6de:	3b01      	subs	r3, #1
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	60a3      	str	r3, [r4, #8]
 800d6e4:	da05      	bge.n	800d6f2 <_putc_r+0x3a>
 800d6e6:	69a2      	ldr	r2, [r4, #24]
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	db12      	blt.n	800d712 <_putc_r+0x5a>
 800d6ec:	b2eb      	uxtb	r3, r5
 800d6ee:	2b0a      	cmp	r3, #10
 800d6f0:	d00f      	beq.n	800d712 <_putc_r+0x5a>
 800d6f2:	6823      	ldr	r3, [r4, #0]
 800d6f4:	1c5a      	adds	r2, r3, #1
 800d6f6:	6022      	str	r2, [r4, #0]
 800d6f8:	701d      	strb	r5, [r3, #0]
 800d6fa:	b2ed      	uxtb	r5, r5
 800d6fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d6fe:	07da      	lsls	r2, r3, #31
 800d700:	d405      	bmi.n	800d70e <_putc_r+0x56>
 800d702:	89a3      	ldrh	r3, [r4, #12]
 800d704:	059b      	lsls	r3, r3, #22
 800d706:	d402      	bmi.n	800d70e <_putc_r+0x56>
 800d708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d70a:	f000 fd5a 	bl	800e1c2 <__retarget_lock_release_recursive>
 800d70e:	4628      	mov	r0, r5
 800d710:	bd70      	pop	{r4, r5, r6, pc}
 800d712:	4629      	mov	r1, r5
 800d714:	4622      	mov	r2, r4
 800d716:	4630      	mov	r0, r6
 800d718:	f000 fa7c 	bl	800dc14 <__swbuf_r>
 800d71c:	4605      	mov	r5, r0
 800d71e:	e7ed      	b.n	800d6fc <_putc_r+0x44>

0800d720 <putchar>:
 800d720:	4b02      	ldr	r3, [pc, #8]	@ (800d72c <putchar+0xc>)
 800d722:	4601      	mov	r1, r0
 800d724:	6818      	ldr	r0, [r3, #0]
 800d726:	6882      	ldr	r2, [r0, #8]
 800d728:	f7ff bfc6 	b.w	800d6b8 <_putc_r>
 800d72c:	2000003c 	.word	0x2000003c

0800d730 <lflush>:
 800d730:	898b      	ldrh	r3, [r1, #12]
 800d732:	f003 0309 	and.w	r3, r3, #9
 800d736:	2b09      	cmp	r3, #9
 800d738:	d103      	bne.n	800d742 <lflush+0x12>
 800d73a:	4b03      	ldr	r3, [pc, #12]	@ (800d748 <lflush+0x18>)
 800d73c:	6818      	ldr	r0, [r3, #0]
 800d73e:	f7ff bcfb 	b.w	800d138 <_fflush_r>
 800d742:	2000      	movs	r0, #0
 800d744:	4770      	bx	lr
 800d746:	bf00      	nop
 800d748:	2000003c 	.word	0x2000003c

0800d74c <__srefill_r>:
 800d74c:	b570      	push	{r4, r5, r6, lr}
 800d74e:	460c      	mov	r4, r1
 800d750:	4605      	mov	r5, r0
 800d752:	b118      	cbz	r0, 800d75c <__srefill_r+0x10>
 800d754:	6a03      	ldr	r3, [r0, #32]
 800d756:	b90b      	cbnz	r3, 800d75c <__srefill_r+0x10>
 800d758:	f7ff fe8a 	bl	800d470 <__sinit>
 800d75c:	2300      	movs	r3, #0
 800d75e:	6063      	str	r3, [r4, #4]
 800d760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d764:	069e      	lsls	r6, r3, #26
 800d766:	d408      	bmi.n	800d77a <__srefill_r+0x2e>
 800d768:	0758      	lsls	r0, r3, #29
 800d76a:	d445      	bmi.n	800d7f8 <__srefill_r+0xac>
 800d76c:	06d9      	lsls	r1, r3, #27
 800d76e:	d407      	bmi.n	800d780 <__srefill_r+0x34>
 800d770:	2209      	movs	r2, #9
 800d772:	602a      	str	r2, [r5, #0]
 800d774:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d778:	81a3      	strh	r3, [r4, #12]
 800d77a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d77e:	bd70      	pop	{r4, r5, r6, pc}
 800d780:	071a      	lsls	r2, r3, #28
 800d782:	d50b      	bpl.n	800d79c <__srefill_r+0x50>
 800d784:	4621      	mov	r1, r4
 800d786:	4628      	mov	r0, r5
 800d788:	f7ff fcd6 	bl	800d138 <_fflush_r>
 800d78c:	2800      	cmp	r0, #0
 800d78e:	d1f4      	bne.n	800d77a <__srefill_r+0x2e>
 800d790:	89a3      	ldrh	r3, [r4, #12]
 800d792:	60a0      	str	r0, [r4, #8]
 800d794:	f023 0308 	bic.w	r3, r3, #8
 800d798:	81a3      	strh	r3, [r4, #12]
 800d79a:	61a0      	str	r0, [r4, #24]
 800d79c:	89a3      	ldrh	r3, [r4, #12]
 800d79e:	f043 0304 	orr.w	r3, r3, #4
 800d7a2:	81a3      	strh	r3, [r4, #12]
 800d7a4:	6923      	ldr	r3, [r4, #16]
 800d7a6:	b91b      	cbnz	r3, 800d7b0 <__srefill_r+0x64>
 800d7a8:	4621      	mov	r1, r4
 800d7aa:	4628      	mov	r0, r5
 800d7ac:	f003 fd1e 	bl	80111ec <__smakebuf_r>
 800d7b0:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800d7b4:	07b3      	lsls	r3, r6, #30
 800d7b6:	d00f      	beq.n	800d7d8 <__srefill_r+0x8c>
 800d7b8:	2301      	movs	r3, #1
 800d7ba:	4a1b      	ldr	r2, [pc, #108]	@ (800d828 <__srefill_r+0xdc>)
 800d7bc:	491b      	ldr	r1, [pc, #108]	@ (800d82c <__srefill_r+0xe0>)
 800d7be:	481c      	ldr	r0, [pc, #112]	@ (800d830 <__srefill_r+0xe4>)
 800d7c0:	81a3      	strh	r3, [r4, #12]
 800d7c2:	f7ff febf 	bl	800d544 <_fwalk_sglue>
 800d7c6:	81a6      	strh	r6, [r4, #12]
 800d7c8:	f006 0609 	and.w	r6, r6, #9
 800d7cc:	2e09      	cmp	r6, #9
 800d7ce:	d103      	bne.n	800d7d8 <__srefill_r+0x8c>
 800d7d0:	4621      	mov	r1, r4
 800d7d2:	4628      	mov	r0, r5
 800d7d4:	f7ff fc2c 	bl	800d030 <__sflush_r>
 800d7d8:	6922      	ldr	r2, [r4, #16]
 800d7da:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800d7dc:	6963      	ldr	r3, [r4, #20]
 800d7de:	6a21      	ldr	r1, [r4, #32]
 800d7e0:	6022      	str	r2, [r4, #0]
 800d7e2:	4628      	mov	r0, r5
 800d7e4:	47b0      	blx	r6
 800d7e6:	2800      	cmp	r0, #0
 800d7e8:	6060      	str	r0, [r4, #4]
 800d7ea:	dc17      	bgt.n	800d81c <__srefill_r+0xd0>
 800d7ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7f0:	d116      	bne.n	800d820 <__srefill_r+0xd4>
 800d7f2:	f043 0320 	orr.w	r3, r3, #32
 800d7f6:	e7bf      	b.n	800d778 <__srefill_r+0x2c>
 800d7f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d7fa:	2900      	cmp	r1, #0
 800d7fc:	d0d2      	beq.n	800d7a4 <__srefill_r+0x58>
 800d7fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d802:	4299      	cmp	r1, r3
 800d804:	d002      	beq.n	800d80c <__srefill_r+0xc0>
 800d806:	4628      	mov	r0, r5
 800d808:	f001 fb4e 	bl	800eea8 <_free_r>
 800d80c:	2300      	movs	r3, #0
 800d80e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d810:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d812:	6063      	str	r3, [r4, #4]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d0c5      	beq.n	800d7a4 <__srefill_r+0x58>
 800d818:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d81a:	6023      	str	r3, [r4, #0]
 800d81c:	2000      	movs	r0, #0
 800d81e:	e7ae      	b.n	800d77e <__srefill_r+0x32>
 800d820:	2200      	movs	r2, #0
 800d822:	6062      	str	r2, [r4, #4]
 800d824:	e7a6      	b.n	800d774 <__srefill_r+0x28>
 800d826:	bf00      	nop
 800d828:	20000030 	.word	0x20000030
 800d82c:	0800d731 	.word	0x0800d731
 800d830:	20000040 	.word	0x20000040

0800d834 <__srget_r>:
 800d834:	b538      	push	{r3, r4, r5, lr}
 800d836:	460c      	mov	r4, r1
 800d838:	4605      	mov	r5, r0
 800d83a:	b118      	cbz	r0, 800d844 <__srget_r+0x10>
 800d83c:	6a03      	ldr	r3, [r0, #32]
 800d83e:	b90b      	cbnz	r3, 800d844 <__srget_r+0x10>
 800d840:	f7ff fe16 	bl	800d470 <__sinit>
 800d844:	4621      	mov	r1, r4
 800d846:	4628      	mov	r0, r5
 800d848:	f7ff ff80 	bl	800d74c <__srefill_r>
 800d84c:	b938      	cbnz	r0, 800d85e <__srget_r+0x2a>
 800d84e:	6863      	ldr	r3, [r4, #4]
 800d850:	3b01      	subs	r3, #1
 800d852:	6063      	str	r3, [r4, #4]
 800d854:	6823      	ldr	r3, [r4, #0]
 800d856:	1c5a      	adds	r2, r3, #1
 800d858:	6022      	str	r2, [r4, #0]
 800d85a:	7818      	ldrb	r0, [r3, #0]
 800d85c:	bd38      	pop	{r3, r4, r5, pc}
 800d85e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d862:	e7fb      	b.n	800d85c <__srget_r+0x28>

0800d864 <setvbuf>:
 800d864:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d868:	461d      	mov	r5, r3
 800d86a:	4b57      	ldr	r3, [pc, #348]	@ (800d9c8 <setvbuf+0x164>)
 800d86c:	681f      	ldr	r7, [r3, #0]
 800d86e:	4604      	mov	r4, r0
 800d870:	460e      	mov	r6, r1
 800d872:	4690      	mov	r8, r2
 800d874:	b127      	cbz	r7, 800d880 <setvbuf+0x1c>
 800d876:	6a3b      	ldr	r3, [r7, #32]
 800d878:	b913      	cbnz	r3, 800d880 <setvbuf+0x1c>
 800d87a:	4638      	mov	r0, r7
 800d87c:	f7ff fdf8 	bl	800d470 <__sinit>
 800d880:	f1b8 0f02 	cmp.w	r8, #2
 800d884:	d006      	beq.n	800d894 <setvbuf+0x30>
 800d886:	f1b8 0f01 	cmp.w	r8, #1
 800d88a:	f200 809a 	bhi.w	800d9c2 <setvbuf+0x15e>
 800d88e:	2d00      	cmp	r5, #0
 800d890:	f2c0 8097 	blt.w	800d9c2 <setvbuf+0x15e>
 800d894:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d896:	07d9      	lsls	r1, r3, #31
 800d898:	d405      	bmi.n	800d8a6 <setvbuf+0x42>
 800d89a:	89a3      	ldrh	r3, [r4, #12]
 800d89c:	059a      	lsls	r2, r3, #22
 800d89e:	d402      	bmi.n	800d8a6 <setvbuf+0x42>
 800d8a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8a2:	f000 fc8d 	bl	800e1c0 <__retarget_lock_acquire_recursive>
 800d8a6:	4621      	mov	r1, r4
 800d8a8:	4638      	mov	r0, r7
 800d8aa:	f7ff fc45 	bl	800d138 <_fflush_r>
 800d8ae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d8b0:	b141      	cbz	r1, 800d8c4 <setvbuf+0x60>
 800d8b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d8b6:	4299      	cmp	r1, r3
 800d8b8:	d002      	beq.n	800d8c0 <setvbuf+0x5c>
 800d8ba:	4638      	mov	r0, r7
 800d8bc:	f001 faf4 	bl	800eea8 <_free_r>
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	6363      	str	r3, [r4, #52]	@ 0x34
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	61a3      	str	r3, [r4, #24]
 800d8c8:	6063      	str	r3, [r4, #4]
 800d8ca:	89a3      	ldrh	r3, [r4, #12]
 800d8cc:	061b      	lsls	r3, r3, #24
 800d8ce:	d503      	bpl.n	800d8d8 <setvbuf+0x74>
 800d8d0:	6921      	ldr	r1, [r4, #16]
 800d8d2:	4638      	mov	r0, r7
 800d8d4:	f001 fae8 	bl	800eea8 <_free_r>
 800d8d8:	89a3      	ldrh	r3, [r4, #12]
 800d8da:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800d8de:	f023 0303 	bic.w	r3, r3, #3
 800d8e2:	f1b8 0f02 	cmp.w	r8, #2
 800d8e6:	81a3      	strh	r3, [r4, #12]
 800d8e8:	d061      	beq.n	800d9ae <setvbuf+0x14a>
 800d8ea:	ab01      	add	r3, sp, #4
 800d8ec:	466a      	mov	r2, sp
 800d8ee:	4621      	mov	r1, r4
 800d8f0:	4638      	mov	r0, r7
 800d8f2:	f003 fc55 	bl	80111a0 <__swhatbuf_r>
 800d8f6:	89a3      	ldrh	r3, [r4, #12]
 800d8f8:	4318      	orrs	r0, r3
 800d8fa:	81a0      	strh	r0, [r4, #12]
 800d8fc:	bb2d      	cbnz	r5, 800d94a <setvbuf+0xe6>
 800d8fe:	9d00      	ldr	r5, [sp, #0]
 800d900:	4628      	mov	r0, r5
 800d902:	f7fe fbe9 	bl	800c0d8 <malloc>
 800d906:	4606      	mov	r6, r0
 800d908:	2800      	cmp	r0, #0
 800d90a:	d152      	bne.n	800d9b2 <setvbuf+0x14e>
 800d90c:	f8dd 9000 	ldr.w	r9, [sp]
 800d910:	45a9      	cmp	r9, r5
 800d912:	d140      	bne.n	800d996 <setvbuf+0x132>
 800d914:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800d918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d91c:	f043 0202 	orr.w	r2, r3, #2
 800d920:	81a2      	strh	r2, [r4, #12]
 800d922:	2200      	movs	r2, #0
 800d924:	60a2      	str	r2, [r4, #8]
 800d926:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800d92a:	6022      	str	r2, [r4, #0]
 800d92c:	6122      	str	r2, [r4, #16]
 800d92e:	2201      	movs	r2, #1
 800d930:	6162      	str	r2, [r4, #20]
 800d932:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d934:	07d6      	lsls	r6, r2, #31
 800d936:	d404      	bmi.n	800d942 <setvbuf+0xde>
 800d938:	0598      	lsls	r0, r3, #22
 800d93a:	d402      	bmi.n	800d942 <setvbuf+0xde>
 800d93c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d93e:	f000 fc40 	bl	800e1c2 <__retarget_lock_release_recursive>
 800d942:	4628      	mov	r0, r5
 800d944:	b003      	add	sp, #12
 800d946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d94a:	2e00      	cmp	r6, #0
 800d94c:	d0d8      	beq.n	800d900 <setvbuf+0x9c>
 800d94e:	6a3b      	ldr	r3, [r7, #32]
 800d950:	b913      	cbnz	r3, 800d958 <setvbuf+0xf4>
 800d952:	4638      	mov	r0, r7
 800d954:	f7ff fd8c 	bl	800d470 <__sinit>
 800d958:	f1b8 0f01 	cmp.w	r8, #1
 800d95c:	bf08      	it	eq
 800d95e:	89a3      	ldrheq	r3, [r4, #12]
 800d960:	6026      	str	r6, [r4, #0]
 800d962:	bf04      	itt	eq
 800d964:	f043 0301 	orreq.w	r3, r3, #1
 800d968:	81a3      	strheq	r3, [r4, #12]
 800d96a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d96e:	f013 0208 	ands.w	r2, r3, #8
 800d972:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800d976:	d01e      	beq.n	800d9b6 <setvbuf+0x152>
 800d978:	07d9      	lsls	r1, r3, #31
 800d97a:	bf41      	itttt	mi
 800d97c:	2200      	movmi	r2, #0
 800d97e:	426d      	negmi	r5, r5
 800d980:	60a2      	strmi	r2, [r4, #8]
 800d982:	61a5      	strmi	r5, [r4, #24]
 800d984:	bf58      	it	pl
 800d986:	60a5      	strpl	r5, [r4, #8]
 800d988:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d98a:	07d2      	lsls	r2, r2, #31
 800d98c:	d401      	bmi.n	800d992 <setvbuf+0x12e>
 800d98e:	059b      	lsls	r3, r3, #22
 800d990:	d513      	bpl.n	800d9ba <setvbuf+0x156>
 800d992:	2500      	movs	r5, #0
 800d994:	e7d5      	b.n	800d942 <setvbuf+0xde>
 800d996:	4648      	mov	r0, r9
 800d998:	f7fe fb9e 	bl	800c0d8 <malloc>
 800d99c:	4606      	mov	r6, r0
 800d99e:	2800      	cmp	r0, #0
 800d9a0:	d0b8      	beq.n	800d914 <setvbuf+0xb0>
 800d9a2:	89a3      	ldrh	r3, [r4, #12]
 800d9a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9a8:	81a3      	strh	r3, [r4, #12]
 800d9aa:	464d      	mov	r5, r9
 800d9ac:	e7cf      	b.n	800d94e <setvbuf+0xea>
 800d9ae:	2500      	movs	r5, #0
 800d9b0:	e7b2      	b.n	800d918 <setvbuf+0xb4>
 800d9b2:	46a9      	mov	r9, r5
 800d9b4:	e7f5      	b.n	800d9a2 <setvbuf+0x13e>
 800d9b6:	60a2      	str	r2, [r4, #8]
 800d9b8:	e7e6      	b.n	800d988 <setvbuf+0x124>
 800d9ba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9bc:	f000 fc01 	bl	800e1c2 <__retarget_lock_release_recursive>
 800d9c0:	e7e7      	b.n	800d992 <setvbuf+0x12e>
 800d9c2:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800d9c6:	e7bc      	b.n	800d942 <setvbuf+0xde>
 800d9c8:	2000003c 	.word	0x2000003c

0800d9cc <siprintf>:
 800d9cc:	b40e      	push	{r1, r2, r3}
 800d9ce:	b500      	push	{lr}
 800d9d0:	b09c      	sub	sp, #112	@ 0x70
 800d9d2:	ab1d      	add	r3, sp, #116	@ 0x74
 800d9d4:	9002      	str	r0, [sp, #8]
 800d9d6:	9006      	str	r0, [sp, #24]
 800d9d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d9dc:	4809      	ldr	r0, [pc, #36]	@ (800da04 <siprintf+0x38>)
 800d9de:	9107      	str	r1, [sp, #28]
 800d9e0:	9104      	str	r1, [sp, #16]
 800d9e2:	4909      	ldr	r1, [pc, #36]	@ (800da08 <siprintf+0x3c>)
 800d9e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9e8:	9105      	str	r1, [sp, #20]
 800d9ea:	6800      	ldr	r0, [r0, #0]
 800d9ec:	9301      	str	r3, [sp, #4]
 800d9ee:	a902      	add	r1, sp, #8
 800d9f0:	f002 fe64 	bl	80106bc <_svfiprintf_r>
 800d9f4:	9b02      	ldr	r3, [sp, #8]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	701a      	strb	r2, [r3, #0]
 800d9fa:	b01c      	add	sp, #112	@ 0x70
 800d9fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800da00:	b003      	add	sp, #12
 800da02:	4770      	bx	lr
 800da04:	2000003c 	.word	0x2000003c
 800da08:	ffff0208 	.word	0xffff0208

0800da0c <__sread>:
 800da0c:	b510      	push	{r4, lr}
 800da0e:	460c      	mov	r4, r1
 800da10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da14:	f000 fb74 	bl	800e100 <_read_r>
 800da18:	2800      	cmp	r0, #0
 800da1a:	bfab      	itete	ge
 800da1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800da1e:	89a3      	ldrhlt	r3, [r4, #12]
 800da20:	181b      	addge	r3, r3, r0
 800da22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800da26:	bfac      	ite	ge
 800da28:	6563      	strge	r3, [r4, #84]	@ 0x54
 800da2a:	81a3      	strhlt	r3, [r4, #12]
 800da2c:	bd10      	pop	{r4, pc}

0800da2e <__swrite>:
 800da2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da32:	461f      	mov	r7, r3
 800da34:	898b      	ldrh	r3, [r1, #12]
 800da36:	05db      	lsls	r3, r3, #23
 800da38:	4605      	mov	r5, r0
 800da3a:	460c      	mov	r4, r1
 800da3c:	4616      	mov	r6, r2
 800da3e:	d505      	bpl.n	800da4c <__swrite+0x1e>
 800da40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da44:	2302      	movs	r3, #2
 800da46:	2200      	movs	r2, #0
 800da48:	f000 fb48 	bl	800e0dc <_lseek_r>
 800da4c:	89a3      	ldrh	r3, [r4, #12]
 800da4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800da56:	81a3      	strh	r3, [r4, #12]
 800da58:	4632      	mov	r2, r6
 800da5a:	463b      	mov	r3, r7
 800da5c:	4628      	mov	r0, r5
 800da5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da62:	f000 bb6f 	b.w	800e144 <_write_r>

0800da66 <__sseek>:
 800da66:	b510      	push	{r4, lr}
 800da68:	460c      	mov	r4, r1
 800da6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da6e:	f000 fb35 	bl	800e0dc <_lseek_r>
 800da72:	1c43      	adds	r3, r0, #1
 800da74:	89a3      	ldrh	r3, [r4, #12]
 800da76:	bf15      	itete	ne
 800da78:	6560      	strne	r0, [r4, #84]	@ 0x54
 800da7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800da7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800da82:	81a3      	strheq	r3, [r4, #12]
 800da84:	bf18      	it	ne
 800da86:	81a3      	strhne	r3, [r4, #12]
 800da88:	bd10      	pop	{r4, pc}

0800da8a <__sclose>:
 800da8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da8e:	f000 bb15 	b.w	800e0bc <_close_r>

0800da92 <__submore>:
 800da92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da96:	460c      	mov	r4, r1
 800da98:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800da9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da9e:	4299      	cmp	r1, r3
 800daa0:	d11d      	bne.n	800dade <__submore+0x4c>
 800daa2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800daa6:	f7fe fb49 	bl	800c13c <_malloc_r>
 800daaa:	b918      	cbnz	r0, 800dab4 <__submore+0x22>
 800daac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dab4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dab8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800daba:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800dabe:	6360      	str	r0, [r4, #52]	@ 0x34
 800dac0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800dac4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800dac8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800dacc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800dad0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800dad4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800dad8:	6020      	str	r0, [r4, #0]
 800dada:	2000      	movs	r0, #0
 800dadc:	e7e8      	b.n	800dab0 <__submore+0x1e>
 800dade:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800dae0:	0077      	lsls	r7, r6, #1
 800dae2:	463a      	mov	r2, r7
 800dae4:	f001 fedc 	bl	800f8a0 <_realloc_r>
 800dae8:	4605      	mov	r5, r0
 800daea:	2800      	cmp	r0, #0
 800daec:	d0de      	beq.n	800daac <__submore+0x1a>
 800daee:	eb00 0806 	add.w	r8, r0, r6
 800daf2:	4601      	mov	r1, r0
 800daf4:	4632      	mov	r2, r6
 800daf6:	4640      	mov	r0, r8
 800daf8:	f000 fb6c 	bl	800e1d4 <memcpy>
 800dafc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800db00:	f8c4 8000 	str.w	r8, [r4]
 800db04:	e7e9      	b.n	800dada <__submore+0x48>

0800db06 <_ungetc_r>:
 800db06:	b570      	push	{r4, r5, r6, lr}
 800db08:	460d      	mov	r5, r1
 800db0a:	1c69      	adds	r1, r5, #1
 800db0c:	4606      	mov	r6, r0
 800db0e:	4614      	mov	r4, r2
 800db10:	d01e      	beq.n	800db50 <_ungetc_r+0x4a>
 800db12:	b118      	cbz	r0, 800db1c <_ungetc_r+0x16>
 800db14:	6a03      	ldr	r3, [r0, #32]
 800db16:	b90b      	cbnz	r3, 800db1c <_ungetc_r+0x16>
 800db18:	f7ff fcaa 	bl	800d470 <__sinit>
 800db1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800db1e:	07da      	lsls	r2, r3, #31
 800db20:	d405      	bmi.n	800db2e <_ungetc_r+0x28>
 800db22:	89a3      	ldrh	r3, [r4, #12]
 800db24:	059b      	lsls	r3, r3, #22
 800db26:	d402      	bmi.n	800db2e <_ungetc_r+0x28>
 800db28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db2a:	f000 fb49 	bl	800e1c0 <__retarget_lock_acquire_recursive>
 800db2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db32:	f023 0220 	bic.w	r2, r3, #32
 800db36:	0758      	lsls	r0, r3, #29
 800db38:	81a2      	strh	r2, [r4, #12]
 800db3a:	d422      	bmi.n	800db82 <_ungetc_r+0x7c>
 800db3c:	06d9      	lsls	r1, r3, #27
 800db3e:	d40a      	bmi.n	800db56 <_ungetc_r+0x50>
 800db40:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800db42:	07d2      	lsls	r2, r2, #31
 800db44:	d404      	bmi.n	800db50 <_ungetc_r+0x4a>
 800db46:	0599      	lsls	r1, r3, #22
 800db48:	d402      	bmi.n	800db50 <_ungetc_r+0x4a>
 800db4a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db4c:	f000 fb39 	bl	800e1c2 <__retarget_lock_release_recursive>
 800db50:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800db54:	e046      	b.n	800dbe4 <_ungetc_r+0xde>
 800db56:	071b      	lsls	r3, r3, #28
 800db58:	d50f      	bpl.n	800db7a <_ungetc_r+0x74>
 800db5a:	4621      	mov	r1, r4
 800db5c:	4630      	mov	r0, r6
 800db5e:	f7ff faeb 	bl	800d138 <_fflush_r>
 800db62:	b120      	cbz	r0, 800db6e <_ungetc_r+0x68>
 800db64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800db66:	07d8      	lsls	r0, r3, #31
 800db68:	d4f2      	bmi.n	800db50 <_ungetc_r+0x4a>
 800db6a:	89a3      	ldrh	r3, [r4, #12]
 800db6c:	e7eb      	b.n	800db46 <_ungetc_r+0x40>
 800db6e:	89a3      	ldrh	r3, [r4, #12]
 800db70:	60a0      	str	r0, [r4, #8]
 800db72:	f023 0308 	bic.w	r3, r3, #8
 800db76:	81a3      	strh	r3, [r4, #12]
 800db78:	61a0      	str	r0, [r4, #24]
 800db7a:	89a3      	ldrh	r3, [r4, #12]
 800db7c:	f043 0304 	orr.w	r3, r3, #4
 800db80:	81a3      	strh	r3, [r4, #12]
 800db82:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800db84:	6862      	ldr	r2, [r4, #4]
 800db86:	b2ed      	uxtb	r5, r5
 800db88:	b1d3      	cbz	r3, 800dbc0 <_ungetc_r+0xba>
 800db8a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800db8c:	4293      	cmp	r3, r2
 800db8e:	dc05      	bgt.n	800db9c <_ungetc_r+0x96>
 800db90:	4621      	mov	r1, r4
 800db92:	4630      	mov	r0, r6
 800db94:	f7ff ff7d 	bl	800da92 <__submore>
 800db98:	2800      	cmp	r0, #0
 800db9a:	d1e3      	bne.n	800db64 <_ungetc_r+0x5e>
 800db9c:	6823      	ldr	r3, [r4, #0]
 800db9e:	1e5a      	subs	r2, r3, #1
 800dba0:	6022      	str	r2, [r4, #0]
 800dba2:	f803 5c01 	strb.w	r5, [r3, #-1]
 800dba6:	6863      	ldr	r3, [r4, #4]
 800dba8:	3301      	adds	r3, #1
 800dbaa:	6063      	str	r3, [r4, #4]
 800dbac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dbae:	07da      	lsls	r2, r3, #31
 800dbb0:	d418      	bmi.n	800dbe4 <_ungetc_r+0xde>
 800dbb2:	89a3      	ldrh	r3, [r4, #12]
 800dbb4:	059b      	lsls	r3, r3, #22
 800dbb6:	d415      	bmi.n	800dbe4 <_ungetc_r+0xde>
 800dbb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dbba:	f000 fb02 	bl	800e1c2 <__retarget_lock_release_recursive>
 800dbbe:	e011      	b.n	800dbe4 <_ungetc_r+0xde>
 800dbc0:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800dbc2:	6920      	ldr	r0, [r4, #16]
 800dbc4:	6823      	ldr	r3, [r4, #0]
 800dbc6:	f001 0101 	and.w	r1, r1, #1
 800dbca:	b168      	cbz	r0, 800dbe8 <_ungetc_r+0xe2>
 800dbcc:	4298      	cmp	r0, r3
 800dbce:	d20b      	bcs.n	800dbe8 <_ungetc_r+0xe2>
 800dbd0:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800dbd4:	42a8      	cmp	r0, r5
 800dbd6:	d107      	bne.n	800dbe8 <_ungetc_r+0xe2>
 800dbd8:	3b01      	subs	r3, #1
 800dbda:	3201      	adds	r2, #1
 800dbdc:	6023      	str	r3, [r4, #0]
 800dbde:	6062      	str	r2, [r4, #4]
 800dbe0:	2900      	cmp	r1, #0
 800dbe2:	d0e6      	beq.n	800dbb2 <_ungetc_r+0xac>
 800dbe4:	4628      	mov	r0, r5
 800dbe6:	bd70      	pop	{r4, r5, r6, pc}
 800dbe8:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800dbec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dbf0:	6363      	str	r3, [r4, #52]	@ 0x34
 800dbf2:	2303      	movs	r3, #3
 800dbf4:	63a3      	str	r3, [r4, #56]	@ 0x38
 800dbf6:	4623      	mov	r3, r4
 800dbf8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800dbfc:	6023      	str	r3, [r4, #0]
 800dbfe:	2301      	movs	r3, #1
 800dc00:	6063      	str	r3, [r4, #4]
 800dc02:	e7ed      	b.n	800dbe0 <_ungetc_r+0xda>

0800dc04 <ungetc>:
 800dc04:	4b02      	ldr	r3, [pc, #8]	@ (800dc10 <ungetc+0xc>)
 800dc06:	460a      	mov	r2, r1
 800dc08:	4601      	mov	r1, r0
 800dc0a:	6818      	ldr	r0, [r3, #0]
 800dc0c:	f7ff bf7b 	b.w	800db06 <_ungetc_r>
 800dc10:	2000003c 	.word	0x2000003c

0800dc14 <__swbuf_r>:
 800dc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc16:	460e      	mov	r6, r1
 800dc18:	4614      	mov	r4, r2
 800dc1a:	4605      	mov	r5, r0
 800dc1c:	b118      	cbz	r0, 800dc26 <__swbuf_r+0x12>
 800dc1e:	6a03      	ldr	r3, [r0, #32]
 800dc20:	b90b      	cbnz	r3, 800dc26 <__swbuf_r+0x12>
 800dc22:	f7ff fc25 	bl	800d470 <__sinit>
 800dc26:	69a3      	ldr	r3, [r4, #24]
 800dc28:	60a3      	str	r3, [r4, #8]
 800dc2a:	89a3      	ldrh	r3, [r4, #12]
 800dc2c:	071a      	lsls	r2, r3, #28
 800dc2e:	d501      	bpl.n	800dc34 <__swbuf_r+0x20>
 800dc30:	6923      	ldr	r3, [r4, #16]
 800dc32:	b943      	cbnz	r3, 800dc46 <__swbuf_r+0x32>
 800dc34:	4621      	mov	r1, r4
 800dc36:	4628      	mov	r0, r5
 800dc38:	f000 f82a 	bl	800dc90 <__swsetup_r>
 800dc3c:	b118      	cbz	r0, 800dc46 <__swbuf_r+0x32>
 800dc3e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800dc42:	4638      	mov	r0, r7
 800dc44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc46:	6823      	ldr	r3, [r4, #0]
 800dc48:	6922      	ldr	r2, [r4, #16]
 800dc4a:	1a98      	subs	r0, r3, r2
 800dc4c:	6963      	ldr	r3, [r4, #20]
 800dc4e:	b2f6      	uxtb	r6, r6
 800dc50:	4283      	cmp	r3, r0
 800dc52:	4637      	mov	r7, r6
 800dc54:	dc05      	bgt.n	800dc62 <__swbuf_r+0x4e>
 800dc56:	4621      	mov	r1, r4
 800dc58:	4628      	mov	r0, r5
 800dc5a:	f7ff fa6d 	bl	800d138 <_fflush_r>
 800dc5e:	2800      	cmp	r0, #0
 800dc60:	d1ed      	bne.n	800dc3e <__swbuf_r+0x2a>
 800dc62:	68a3      	ldr	r3, [r4, #8]
 800dc64:	3b01      	subs	r3, #1
 800dc66:	60a3      	str	r3, [r4, #8]
 800dc68:	6823      	ldr	r3, [r4, #0]
 800dc6a:	1c5a      	adds	r2, r3, #1
 800dc6c:	6022      	str	r2, [r4, #0]
 800dc6e:	701e      	strb	r6, [r3, #0]
 800dc70:	6962      	ldr	r2, [r4, #20]
 800dc72:	1c43      	adds	r3, r0, #1
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d004      	beq.n	800dc82 <__swbuf_r+0x6e>
 800dc78:	89a3      	ldrh	r3, [r4, #12]
 800dc7a:	07db      	lsls	r3, r3, #31
 800dc7c:	d5e1      	bpl.n	800dc42 <__swbuf_r+0x2e>
 800dc7e:	2e0a      	cmp	r6, #10
 800dc80:	d1df      	bne.n	800dc42 <__swbuf_r+0x2e>
 800dc82:	4621      	mov	r1, r4
 800dc84:	4628      	mov	r0, r5
 800dc86:	f7ff fa57 	bl	800d138 <_fflush_r>
 800dc8a:	2800      	cmp	r0, #0
 800dc8c:	d0d9      	beq.n	800dc42 <__swbuf_r+0x2e>
 800dc8e:	e7d6      	b.n	800dc3e <__swbuf_r+0x2a>

0800dc90 <__swsetup_r>:
 800dc90:	b538      	push	{r3, r4, r5, lr}
 800dc92:	4b29      	ldr	r3, [pc, #164]	@ (800dd38 <__swsetup_r+0xa8>)
 800dc94:	4605      	mov	r5, r0
 800dc96:	6818      	ldr	r0, [r3, #0]
 800dc98:	460c      	mov	r4, r1
 800dc9a:	b118      	cbz	r0, 800dca4 <__swsetup_r+0x14>
 800dc9c:	6a03      	ldr	r3, [r0, #32]
 800dc9e:	b90b      	cbnz	r3, 800dca4 <__swsetup_r+0x14>
 800dca0:	f7ff fbe6 	bl	800d470 <__sinit>
 800dca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dca8:	0719      	lsls	r1, r3, #28
 800dcaa:	d422      	bmi.n	800dcf2 <__swsetup_r+0x62>
 800dcac:	06da      	lsls	r2, r3, #27
 800dcae:	d407      	bmi.n	800dcc0 <__swsetup_r+0x30>
 800dcb0:	2209      	movs	r2, #9
 800dcb2:	602a      	str	r2, [r5, #0]
 800dcb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcb8:	81a3      	strh	r3, [r4, #12]
 800dcba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dcbe:	e033      	b.n	800dd28 <__swsetup_r+0x98>
 800dcc0:	0758      	lsls	r0, r3, #29
 800dcc2:	d512      	bpl.n	800dcea <__swsetup_r+0x5a>
 800dcc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dcc6:	b141      	cbz	r1, 800dcda <__swsetup_r+0x4a>
 800dcc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dccc:	4299      	cmp	r1, r3
 800dcce:	d002      	beq.n	800dcd6 <__swsetup_r+0x46>
 800dcd0:	4628      	mov	r0, r5
 800dcd2:	f001 f8e9 	bl	800eea8 <_free_r>
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	6363      	str	r3, [r4, #52]	@ 0x34
 800dcda:	89a3      	ldrh	r3, [r4, #12]
 800dcdc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dce0:	81a3      	strh	r3, [r4, #12]
 800dce2:	2300      	movs	r3, #0
 800dce4:	6063      	str	r3, [r4, #4]
 800dce6:	6923      	ldr	r3, [r4, #16]
 800dce8:	6023      	str	r3, [r4, #0]
 800dcea:	89a3      	ldrh	r3, [r4, #12]
 800dcec:	f043 0308 	orr.w	r3, r3, #8
 800dcf0:	81a3      	strh	r3, [r4, #12]
 800dcf2:	6923      	ldr	r3, [r4, #16]
 800dcf4:	b94b      	cbnz	r3, 800dd0a <__swsetup_r+0x7a>
 800dcf6:	89a3      	ldrh	r3, [r4, #12]
 800dcf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dcfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd00:	d003      	beq.n	800dd0a <__swsetup_r+0x7a>
 800dd02:	4621      	mov	r1, r4
 800dd04:	4628      	mov	r0, r5
 800dd06:	f003 fa71 	bl	80111ec <__smakebuf_r>
 800dd0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd0e:	f013 0201 	ands.w	r2, r3, #1
 800dd12:	d00a      	beq.n	800dd2a <__swsetup_r+0x9a>
 800dd14:	2200      	movs	r2, #0
 800dd16:	60a2      	str	r2, [r4, #8]
 800dd18:	6962      	ldr	r2, [r4, #20]
 800dd1a:	4252      	negs	r2, r2
 800dd1c:	61a2      	str	r2, [r4, #24]
 800dd1e:	6922      	ldr	r2, [r4, #16]
 800dd20:	b942      	cbnz	r2, 800dd34 <__swsetup_r+0xa4>
 800dd22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dd26:	d1c5      	bne.n	800dcb4 <__swsetup_r+0x24>
 800dd28:	bd38      	pop	{r3, r4, r5, pc}
 800dd2a:	0799      	lsls	r1, r3, #30
 800dd2c:	bf58      	it	pl
 800dd2e:	6962      	ldrpl	r2, [r4, #20]
 800dd30:	60a2      	str	r2, [r4, #8]
 800dd32:	e7f4      	b.n	800dd1e <__swsetup_r+0x8e>
 800dd34:	2000      	movs	r0, #0
 800dd36:	e7f7      	b.n	800dd28 <__swsetup_r+0x98>
 800dd38:	2000003c 	.word	0x2000003c

0800dd3c <_ftello_r>:
 800dd3c:	b570      	push	{r4, r5, r6, lr}
 800dd3e:	460c      	mov	r4, r1
 800dd40:	4605      	mov	r5, r0
 800dd42:	b118      	cbz	r0, 800dd4c <_ftello_r+0x10>
 800dd44:	6a03      	ldr	r3, [r0, #32]
 800dd46:	b90b      	cbnz	r3, 800dd4c <_ftello_r+0x10>
 800dd48:	f7ff fb92 	bl	800d470 <__sinit>
 800dd4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dd4e:	07db      	lsls	r3, r3, #31
 800dd50:	d405      	bmi.n	800dd5e <_ftello_r+0x22>
 800dd52:	89a3      	ldrh	r3, [r4, #12]
 800dd54:	059e      	lsls	r6, r3, #22
 800dd56:	d402      	bmi.n	800dd5e <_ftello_r+0x22>
 800dd58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd5a:	f000 fa31 	bl	800e1c0 <__retarget_lock_acquire_recursive>
 800dd5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dd60:	b976      	cbnz	r6, 800dd80 <_ftello_r+0x44>
 800dd62:	231d      	movs	r3, #29
 800dd64:	602b      	str	r3, [r5, #0]
 800dd66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dd68:	07da      	lsls	r2, r3, #31
 800dd6a:	d405      	bmi.n	800dd78 <_ftello_r+0x3c>
 800dd6c:	89a3      	ldrh	r3, [r4, #12]
 800dd6e:	059b      	lsls	r3, r3, #22
 800dd70:	d402      	bmi.n	800dd78 <_ftello_r+0x3c>
 800dd72:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd74:	f000 fa25 	bl	800e1c2 <__retarget_lock_release_recursive>
 800dd78:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800dd7c:	4628      	mov	r0, r5
 800dd7e:	bd70      	pop	{r4, r5, r6, pc}
 800dd80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd84:	f002 030c 	and.w	r3, r2, #12
 800dd88:	2b08      	cmp	r3, #8
 800dd8a:	d110      	bne.n	800ddae <_ftello_r+0x72>
 800dd8c:	6823      	ldr	r3, [r4, #0]
 800dd8e:	b173      	cbz	r3, 800ddae <_ftello_r+0x72>
 800dd90:	6921      	ldr	r1, [r4, #16]
 800dd92:	1a5b      	subs	r3, r3, r1
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	dd0a      	ble.n	800ddae <_ftello_r+0x72>
 800dd98:	05d0      	lsls	r0, r2, #23
 800dd9a:	d508      	bpl.n	800ddae <_ftello_r+0x72>
 800dd9c:	2302      	movs	r3, #2
 800dd9e:	2200      	movs	r2, #0
 800dda0:	6a21      	ldr	r1, [r4, #32]
 800dda2:	4628      	mov	r0, r5
 800dda4:	47b0      	blx	r6
 800dda6:	1c41      	adds	r1, r0, #1
 800dda8:	4605      	mov	r5, r0
 800ddaa:	d104      	bne.n	800ddb6 <_ftello_r+0x7a>
 800ddac:	e7db      	b.n	800dd66 <_ftello_r+0x2a>
 800ddae:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ddb2:	d013      	beq.n	800dddc <_ftello_r+0xa0>
 800ddb4:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 800ddb6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ddba:	0756      	lsls	r6, r2, #29
 800ddbc:	d510      	bpl.n	800dde0 <_ftello_r+0xa4>
 800ddbe:	6863      	ldr	r3, [r4, #4]
 800ddc0:	1aed      	subs	r5, r5, r3
 800ddc2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ddc4:	b10b      	cbz	r3, 800ddca <_ftello_r+0x8e>
 800ddc6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ddc8:	1aed      	subs	r5, r5, r3
 800ddca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ddcc:	07d9      	lsls	r1, r3, #31
 800ddce:	d4d5      	bmi.n	800dd7c <_ftello_r+0x40>
 800ddd0:	0593      	lsls	r3, r2, #22
 800ddd2:	d4d3      	bmi.n	800dd7c <_ftello_r+0x40>
 800ddd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ddd6:	f000 f9f4 	bl	800e1c2 <__retarget_lock_release_recursive>
 800ddda:	e7cf      	b.n	800dd7c <_ftello_r+0x40>
 800dddc:	2301      	movs	r3, #1
 800ddde:	e7df      	b.n	800dda0 <_ftello_r+0x64>
 800dde0:	0710      	lsls	r0, r2, #28
 800dde2:	d5f2      	bpl.n	800ddca <_ftello_r+0x8e>
 800dde4:	6823      	ldr	r3, [r4, #0]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d0ef      	beq.n	800ddca <_ftello_r+0x8e>
 800ddea:	6921      	ldr	r1, [r4, #16]
 800ddec:	1a5b      	subs	r3, r3, r1
 800ddee:	441d      	add	r5, r3
 800ddf0:	e7eb      	b.n	800ddca <_ftello_r+0x8e>

0800ddf2 <fmemseeker>:
 800ddf2:	2b01      	cmp	r3, #1
 800ddf4:	b510      	push	{r4, lr}
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	4610      	mov	r0, r2
 800ddfa:	d11d      	bne.n	800de38 <fmemseeker+0x46>
 800ddfc:	688b      	ldr	r3, [r1, #8]
 800ddfe:	4418      	add	r0, r3
 800de00:	2800      	cmp	r0, #0
 800de02:	db1d      	blt.n	800de40 <fmemseeker+0x4e>
 800de04:	690b      	ldr	r3, [r1, #16]
 800de06:	4283      	cmp	r3, r0
 800de08:	d31f      	bcc.n	800de4a <fmemseeker+0x58>
 800de0a:	7d4b      	ldrb	r3, [r1, #21]
 800de0c:	b143      	cbz	r3, 800de20 <fmemseeker+0x2e>
 800de0e:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 800de12:	4293      	cmp	r3, r2
 800de14:	d204      	bcs.n	800de20 <fmemseeker+0x2e>
 800de16:	684a      	ldr	r2, [r1, #4]
 800de18:	7d8c      	ldrb	r4, [r1, #22]
 800de1a:	54d4      	strb	r4, [r2, r3]
 800de1c:	2300      	movs	r3, #0
 800de1e:	758b      	strb	r3, [r1, #22]
 800de20:	7d4b      	ldrb	r3, [r1, #21]
 800de22:	6088      	str	r0, [r1, #8]
 800de24:	b13b      	cbz	r3, 800de36 <fmemseeker+0x44>
 800de26:	68cb      	ldr	r3, [r1, #12]
 800de28:	4298      	cmp	r0, r3
 800de2a:	d204      	bcs.n	800de36 <fmemseeker+0x44>
 800de2c:	684b      	ldr	r3, [r1, #4]
 800de2e:	5c1a      	ldrb	r2, [r3, r0]
 800de30:	758a      	strb	r2, [r1, #22]
 800de32:	2200      	movs	r2, #0
 800de34:	541a      	strb	r2, [r3, r0]
 800de36:	bd10      	pop	{r4, pc}
 800de38:	2b02      	cmp	r3, #2
 800de3a:	d1e1      	bne.n	800de00 <fmemseeker+0xe>
 800de3c:	68cb      	ldr	r3, [r1, #12]
 800de3e:	e7de      	b.n	800ddfe <fmemseeker+0xc>
 800de40:	2316      	movs	r3, #22
 800de42:	6023      	str	r3, [r4, #0]
 800de44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800de48:	e7f5      	b.n	800de36 <fmemseeker+0x44>
 800de4a:	231c      	movs	r3, #28
 800de4c:	e7f9      	b.n	800de42 <fmemseeker+0x50>

0800de4e <fmemcloser>:
 800de4e:	b508      	push	{r3, lr}
 800de50:	6809      	ldr	r1, [r1, #0]
 800de52:	f001 f829 	bl	800eea8 <_free_r>
 800de56:	2000      	movs	r0, #0
 800de58:	bd08      	pop	{r3, pc}

0800de5a <fmemwriter>:
 800de5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de5c:	460c      	mov	r4, r1
 800de5e:	461d      	mov	r5, r3
 800de60:	68cb      	ldr	r3, [r1, #12]
 800de62:	7d09      	ldrb	r1, [r1, #20]
 800de64:	4606      	mov	r6, r0
 800de66:	4617      	mov	r7, r2
 800de68:	b341      	cbz	r1, 800debc <fmemwriter+0x62>
 800de6a:	60a3      	str	r3, [r4, #8]
 800de6c:	68a3      	ldr	r3, [r4, #8]
 800de6e:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800de72:	7d61      	ldrb	r1, [r4, #21]
 800de74:	18e8      	adds	r0, r5, r3
 800de76:	ebac 0201 	sub.w	r2, ip, r1
 800de7a:	4290      	cmp	r0, r2
 800de7c:	bf88      	it	hi
 800de7e:	ebac 0503 	subhi.w	r5, ip, r3
 800de82:	68e0      	ldr	r0, [r4, #12]
 800de84:	442b      	add	r3, r5
 800de86:	bf8c      	ite	hi
 800de88:	460a      	movhi	r2, r1
 800de8a:	2200      	movls	r2, #0
 800de8c:	4283      	cmp	r3, r0
 800de8e:	d91e      	bls.n	800dece <fmemwriter+0x74>
 800de90:	60e3      	str	r3, [r4, #12]
 800de92:	1a9b      	subs	r3, r3, r2
 800de94:	459c      	cmp	ip, r3
 800de96:	d903      	bls.n	800dea0 <fmemwriter+0x46>
 800de98:	6860      	ldr	r0, [r4, #4]
 800de9a:	2100      	movs	r1, #0
 800de9c:	54c1      	strb	r1, [r0, r3]
 800de9e:	75a1      	strb	r1, [r4, #22]
 800dea0:	68a3      	ldr	r3, [r4, #8]
 800dea2:	4295      	cmp	r5, r2
 800dea4:	eb05 0103 	add.w	r1, r5, r3
 800dea8:	60a1      	str	r1, [r4, #8]
 800deaa:	d01c      	beq.n	800dee6 <fmemwriter+0x8c>
 800deac:	6860      	ldr	r0, [r4, #4]
 800deae:	1aaa      	subs	r2, r5, r2
 800deb0:	4639      	mov	r1, r7
 800deb2:	4418      	add	r0, r3
 800deb4:	f000 f98e 	bl	800e1d4 <memcpy>
 800deb8:	4628      	mov	r0, r5
 800deba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800debc:	68a2      	ldr	r2, [r4, #8]
 800debe:	429a      	cmp	r2, r3
 800dec0:	d9d4      	bls.n	800de6c <fmemwriter+0x12>
 800dec2:	6860      	ldr	r0, [r4, #4]
 800dec4:	1ad2      	subs	r2, r2, r3
 800dec6:	4418      	add	r0, r3
 800dec8:	f000 f8d2 	bl	800e070 <memset>
 800decc:	e7ce      	b.n	800de6c <fmemwriter+0x12>
 800dece:	2900      	cmp	r1, #0
 800ded0:	d0e6      	beq.n	800dea0 <fmemwriter+0x46>
 800ded2:	b135      	cbz	r5, 800dee2 <fmemwriter+0x88>
 800ded4:	6861      	ldr	r1, [r4, #4]
 800ded6:	1a9b      	subs	r3, r3, r2
 800ded8:	5cc8      	ldrb	r0, [r1, r3]
 800deda:	75a0      	strb	r0, [r4, #22]
 800dedc:	2000      	movs	r0, #0
 800dede:	54c8      	strb	r0, [r1, r3]
 800dee0:	e7de      	b.n	800dea0 <fmemwriter+0x46>
 800dee2:	462a      	mov	r2, r5
 800dee4:	e7dc      	b.n	800dea0 <fmemwriter+0x46>
 800dee6:	231c      	movs	r3, #28
 800dee8:	6033      	str	r3, [r6, #0]
 800deea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800deee:	e7e4      	b.n	800deba <fmemwriter+0x60>

0800def0 <fmemreader>:
 800def0:	b538      	push	{r3, r4, r5, lr}
 800def2:	460d      	mov	r5, r1
 800def4:	461c      	mov	r4, r3
 800def6:	e9d1 1302 	ldrd	r1, r3, [r1, #8]
 800defa:	4299      	cmp	r1, r3
 800defc:	4610      	mov	r0, r2
 800defe:	d80d      	bhi.n	800df1c <fmemreader+0x2c>
 800df00:	1a5b      	subs	r3, r3, r1
 800df02:	429c      	cmp	r4, r3
 800df04:	bf28      	it	cs
 800df06:	461c      	movcs	r4, r3
 800df08:	686b      	ldr	r3, [r5, #4]
 800df0a:	4622      	mov	r2, r4
 800df0c:	4419      	add	r1, r3
 800df0e:	f000 f961 	bl	800e1d4 <memcpy>
 800df12:	68ab      	ldr	r3, [r5, #8]
 800df14:	4423      	add	r3, r4
 800df16:	60ab      	str	r3, [r5, #8]
 800df18:	4620      	mov	r0, r4
 800df1a:	bd38      	pop	{r3, r4, r5, pc}
 800df1c:	2400      	movs	r4, #0
 800df1e:	e7fb      	b.n	800df18 <fmemreader+0x28>

0800df20 <_fmemopen_r>:
 800df20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800df24:	460e      	mov	r6, r1
 800df26:	4690      	mov	r8, r2
 800df28:	4619      	mov	r1, r3
 800df2a:	aa01      	add	r2, sp, #4
 800df2c:	4604      	mov	r4, r0
 800df2e:	4699      	mov	r9, r3
 800df30:	f003 f900 	bl	8011134 <__sflags>
 800df34:	4607      	mov	r7, r0
 800df36:	b138      	cbz	r0, 800df48 <_fmemopen_r+0x28>
 800df38:	f1b8 0f00 	cmp.w	r8, #0
 800df3c:	d002      	beq.n	800df44 <_fmemopen_r+0x24>
 800df3e:	b946      	cbnz	r6, 800df52 <_fmemopen_r+0x32>
 800df40:	06c3      	lsls	r3, r0, #27
 800df42:	d406      	bmi.n	800df52 <_fmemopen_r+0x32>
 800df44:	2316      	movs	r3, #22
 800df46:	6023      	str	r3, [r4, #0]
 800df48:	2500      	movs	r5, #0
 800df4a:	4628      	mov	r0, r5
 800df4c:	b003      	add	sp, #12
 800df4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df52:	4620      	mov	r0, r4
 800df54:	f7ff fa3a 	bl	800d3cc <__sfp>
 800df58:	4605      	mov	r5, r0
 800df5a:	2800      	cmp	r0, #0
 800df5c:	d0f4      	beq.n	800df48 <_fmemopen_r+0x28>
 800df5e:	b97e      	cbnz	r6, 800df80 <_fmemopen_r+0x60>
 800df60:	f108 0118 	add.w	r1, r8, #24
 800df64:	4620      	mov	r0, r4
 800df66:	f7fe f8e9 	bl	800c13c <_malloc_r>
 800df6a:	4604      	mov	r4, r0
 800df6c:	b950      	cbnz	r0, 800df84 <_fmemopen_r+0x64>
 800df6e:	f7ff fa21 	bl	800d3b4 <__sfp_lock_acquire>
 800df72:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df74:	81ac      	strh	r4, [r5, #12]
 800df76:	f000 f922 	bl	800e1be <__retarget_lock_close_recursive>
 800df7a:	f7ff fa21 	bl	800d3c0 <__sfp_lock_release>
 800df7e:	e7e3      	b.n	800df48 <_fmemopen_r+0x28>
 800df80:	2118      	movs	r1, #24
 800df82:	e7ef      	b.n	800df64 <_fmemopen_r+0x44>
 800df84:	f3c7 03c0 	ubfx	r3, r7, #3, #1
 800df88:	2100      	movs	r1, #0
 800df8a:	6000      	str	r0, [r0, #0]
 800df8c:	f8c0 8010 	str.w	r8, [r0, #16]
 800df90:	7543      	strb	r3, [r0, #21]
 800df92:	7581      	strb	r1, [r0, #22]
 800df94:	2e00      	cmp	r6, #0
 800df96:	d130      	bne.n	800dffa <_fmemopen_r+0xda>
 800df98:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800df9c:	f100 0318 	add.w	r3, r0, #24
 800dfa0:	6043      	str	r3, [r0, #4]
 800dfa2:	7606      	strb	r6, [r0, #24]
 800dfa4:	f3c7 2300 	ubfx	r3, r7, #8, #1
 800dfa8:	7523      	strb	r3, [r4, #20]
 800dfaa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfac:	07de      	lsls	r6, r3, #31
 800dfae:	d405      	bmi.n	800dfbc <_fmemopen_r+0x9c>
 800dfb0:	89ab      	ldrh	r3, [r5, #12]
 800dfb2:	0598      	lsls	r0, r3, #22
 800dfb4:	d402      	bmi.n	800dfbc <_fmemopen_r+0x9c>
 800dfb6:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dfb8:	f000 f902 	bl	800e1c0 <__retarget_lock_acquire_recursive>
 800dfbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dfc0:	f017 0f14 	tst.w	r7, #20
 800dfc4:	81eb      	strh	r3, [r5, #14]
 800dfc6:	4b21      	ldr	r3, [pc, #132]	@ (800e04c <_fmemopen_r+0x12c>)
 800dfc8:	622c      	str	r4, [r5, #32]
 800dfca:	bf08      	it	eq
 800dfcc:	2300      	moveq	r3, #0
 800dfce:	f017 0f18 	tst.w	r7, #24
 800dfd2:	626b      	str	r3, [r5, #36]	@ 0x24
 800dfd4:	4b1e      	ldr	r3, [pc, #120]	@ (800e050 <_fmemopen_r+0x130>)
 800dfd6:	bf08      	it	eq
 800dfd8:	2300      	moveq	r3, #0
 800dfda:	62ab      	str	r3, [r5, #40]	@ 0x28
 800dfdc:	4b1d      	ldr	r3, [pc, #116]	@ (800e054 <_fmemopen_r+0x134>)
 800dfde:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800dfe0:	4b1d      	ldr	r3, [pc, #116]	@ (800e058 <_fmemopen_r+0x138>)
 800dfe2:	632b      	str	r3, [r5, #48]	@ 0x30
 800dfe4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfe6:	b23a      	sxth	r2, r7
 800dfe8:	07d9      	lsls	r1, r3, #31
 800dfea:	81aa      	strh	r2, [r5, #12]
 800dfec:	d4ad      	bmi.n	800df4a <_fmemopen_r+0x2a>
 800dfee:	0593      	lsls	r3, r2, #22
 800dff0:	d4ab      	bmi.n	800df4a <_fmemopen_r+0x2a>
 800dff2:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dff4:	f000 f8e5 	bl	800e1c2 <__retarget_lock_release_recursive>
 800dff8:	e7a7      	b.n	800df4a <_fmemopen_r+0x2a>
 800dffa:	6046      	str	r6, [r0, #4]
 800dffc:	f899 3000 	ldrb.w	r3, [r9]
 800e000:	2b72      	cmp	r3, #114	@ 0x72
 800e002:	d017      	beq.n	800e034 <_fmemopen_r+0x114>
 800e004:	2b77      	cmp	r3, #119	@ 0x77
 800e006:	d019      	beq.n	800e03c <_fmemopen_r+0x11c>
 800e008:	2b61      	cmp	r3, #97	@ 0x61
 800e00a:	d11c      	bne.n	800e046 <_fmemopen_r+0x126>
 800e00c:	4642      	mov	r2, r8
 800e00e:	4630      	mov	r0, r6
 800e010:	f7f2 f8fe 	bl	8000210 <memchr>
 800e014:	b160      	cbz	r0, 800e030 <_fmemopen_r+0x110>
 800e016:	6863      	ldr	r3, [r4, #4]
 800e018:	1ac3      	subs	r3, r0, r3
 800e01a:	e9c4 3302 	strd	r3, r3, [r4, #8]
 800e01e:	b928      	cbnz	r0, 800e02c <_fmemopen_r+0x10c>
 800e020:	7d63      	ldrb	r3, [r4, #21]
 800e022:	b11b      	cbz	r3, 800e02c <_fmemopen_r+0x10c>
 800e024:	6863      	ldr	r3, [r4, #4]
 800e026:	4443      	add	r3, r8
 800e028:	f803 0c01 	strb.w	r0, [r3, #-1]
 800e02c:	2301      	movs	r3, #1
 800e02e:	e7bb      	b.n	800dfa8 <_fmemopen_r+0x88>
 800e030:	4643      	mov	r3, r8
 800e032:	e7f2      	b.n	800e01a <_fmemopen_r+0xfa>
 800e034:	e9c0 1802 	strd	r1, r8, [r0, #8]
 800e038:	7501      	strb	r1, [r0, #20]
 800e03a:	e7b6      	b.n	800dfaa <_fmemopen_r+0x8a>
 800e03c:	60c1      	str	r1, [r0, #12]
 800e03e:	7501      	strb	r1, [r0, #20]
 800e040:	6081      	str	r1, [r0, #8]
 800e042:	7031      	strb	r1, [r6, #0]
 800e044:	e7b1      	b.n	800dfaa <_fmemopen_r+0x8a>
 800e046:	f000 f8d9 	bl	800e1fc <abort>
 800e04a:	bf00      	nop
 800e04c:	0800def1 	.word	0x0800def1
 800e050:	0800de5b 	.word	0x0800de5b
 800e054:	0800ddf3 	.word	0x0800ddf3
 800e058:	0800de4f 	.word	0x0800de4f

0800e05c <fmemopen>:
 800e05c:	4613      	mov	r3, r2
 800e05e:	460a      	mov	r2, r1
 800e060:	4601      	mov	r1, r0
 800e062:	4802      	ldr	r0, [pc, #8]	@ (800e06c <fmemopen+0x10>)
 800e064:	6800      	ldr	r0, [r0, #0]
 800e066:	f7ff bf5b 	b.w	800df20 <_fmemopen_r>
 800e06a:	bf00      	nop
 800e06c:	2000003c 	.word	0x2000003c

0800e070 <memset>:
 800e070:	4402      	add	r2, r0
 800e072:	4603      	mov	r3, r0
 800e074:	4293      	cmp	r3, r2
 800e076:	d100      	bne.n	800e07a <memset+0xa>
 800e078:	4770      	bx	lr
 800e07a:	f803 1b01 	strb.w	r1, [r3], #1
 800e07e:	e7f9      	b.n	800e074 <memset+0x4>

0800e080 <strcasecmp>:
 800e080:	b530      	push	{r4, r5, lr}
 800e082:	4d0b      	ldr	r5, [pc, #44]	@ (800e0b0 <strcasecmp+0x30>)
 800e084:	4604      	mov	r4, r0
 800e086:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e08a:	5cea      	ldrb	r2, [r5, r3]
 800e08c:	f002 0203 	and.w	r2, r2, #3
 800e090:	2a01      	cmp	r2, #1
 800e092:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e096:	5ca8      	ldrb	r0, [r5, r2]
 800e098:	f000 0003 	and.w	r0, r0, #3
 800e09c:	bf08      	it	eq
 800e09e:	3320      	addeq	r3, #32
 800e0a0:	2801      	cmp	r0, #1
 800e0a2:	bf08      	it	eq
 800e0a4:	3220      	addeq	r2, #32
 800e0a6:	1a98      	subs	r0, r3, r2
 800e0a8:	d101      	bne.n	800e0ae <strcasecmp+0x2e>
 800e0aa:	2a00      	cmp	r2, #0
 800e0ac:	d1eb      	bne.n	800e086 <strcasecmp+0x6>
 800e0ae:	bd30      	pop	{r4, r5, pc}
 800e0b0:	080128a9 	.word	0x080128a9

0800e0b4 <_localeconv_r>:
 800e0b4:	4800      	ldr	r0, [pc, #0]	@ (800e0b8 <_localeconv_r+0x4>)
 800e0b6:	4770      	bx	lr
 800e0b8:	2000017c 	.word	0x2000017c

0800e0bc <_close_r>:
 800e0bc:	b538      	push	{r3, r4, r5, lr}
 800e0be:	4d06      	ldr	r5, [pc, #24]	@ (800e0d8 <_close_r+0x1c>)
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	4604      	mov	r4, r0
 800e0c4:	4608      	mov	r0, r1
 800e0c6:	602b      	str	r3, [r5, #0]
 800e0c8:	f7f5 ff8a 	bl	8003fe0 <_close>
 800e0cc:	1c43      	adds	r3, r0, #1
 800e0ce:	d102      	bne.n	800e0d6 <_close_r+0x1a>
 800e0d0:	682b      	ldr	r3, [r5, #0]
 800e0d2:	b103      	cbz	r3, 800e0d6 <_close_r+0x1a>
 800e0d4:	6023      	str	r3, [r4, #0]
 800e0d6:	bd38      	pop	{r3, r4, r5, pc}
 800e0d8:	20002314 	.word	0x20002314

0800e0dc <_lseek_r>:
 800e0dc:	b538      	push	{r3, r4, r5, lr}
 800e0de:	4d07      	ldr	r5, [pc, #28]	@ (800e0fc <_lseek_r+0x20>)
 800e0e0:	4604      	mov	r4, r0
 800e0e2:	4608      	mov	r0, r1
 800e0e4:	4611      	mov	r1, r2
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	602a      	str	r2, [r5, #0]
 800e0ea:	461a      	mov	r2, r3
 800e0ec:	f7f5 ff9f 	bl	800402e <_lseek>
 800e0f0:	1c43      	adds	r3, r0, #1
 800e0f2:	d102      	bne.n	800e0fa <_lseek_r+0x1e>
 800e0f4:	682b      	ldr	r3, [r5, #0]
 800e0f6:	b103      	cbz	r3, 800e0fa <_lseek_r+0x1e>
 800e0f8:	6023      	str	r3, [r4, #0]
 800e0fa:	bd38      	pop	{r3, r4, r5, pc}
 800e0fc:	20002314 	.word	0x20002314

0800e100 <_read_r>:
 800e100:	b538      	push	{r3, r4, r5, lr}
 800e102:	4d07      	ldr	r5, [pc, #28]	@ (800e120 <_read_r+0x20>)
 800e104:	4604      	mov	r4, r0
 800e106:	4608      	mov	r0, r1
 800e108:	4611      	mov	r1, r2
 800e10a:	2200      	movs	r2, #0
 800e10c:	602a      	str	r2, [r5, #0]
 800e10e:	461a      	mov	r2, r3
 800e110:	f7f5 ff2d 	bl	8003f6e <_read>
 800e114:	1c43      	adds	r3, r0, #1
 800e116:	d102      	bne.n	800e11e <_read_r+0x1e>
 800e118:	682b      	ldr	r3, [r5, #0]
 800e11a:	b103      	cbz	r3, 800e11e <_read_r+0x1e>
 800e11c:	6023      	str	r3, [r4, #0]
 800e11e:	bd38      	pop	{r3, r4, r5, pc}
 800e120:	20002314 	.word	0x20002314

0800e124 <_sbrk_r>:
 800e124:	b538      	push	{r3, r4, r5, lr}
 800e126:	4d06      	ldr	r5, [pc, #24]	@ (800e140 <_sbrk_r+0x1c>)
 800e128:	2300      	movs	r3, #0
 800e12a:	4604      	mov	r4, r0
 800e12c:	4608      	mov	r0, r1
 800e12e:	602b      	str	r3, [r5, #0]
 800e130:	f7f5 ff8a 	bl	8004048 <_sbrk>
 800e134:	1c43      	adds	r3, r0, #1
 800e136:	d102      	bne.n	800e13e <_sbrk_r+0x1a>
 800e138:	682b      	ldr	r3, [r5, #0]
 800e13a:	b103      	cbz	r3, 800e13e <_sbrk_r+0x1a>
 800e13c:	6023      	str	r3, [r4, #0]
 800e13e:	bd38      	pop	{r3, r4, r5, pc}
 800e140:	20002314 	.word	0x20002314

0800e144 <_write_r>:
 800e144:	b538      	push	{r3, r4, r5, lr}
 800e146:	4d07      	ldr	r5, [pc, #28]	@ (800e164 <_write_r+0x20>)
 800e148:	4604      	mov	r4, r0
 800e14a:	4608      	mov	r0, r1
 800e14c:	4611      	mov	r1, r2
 800e14e:	2200      	movs	r2, #0
 800e150:	602a      	str	r2, [r5, #0]
 800e152:	461a      	mov	r2, r3
 800e154:	f7f5 ff28 	bl	8003fa8 <_write>
 800e158:	1c43      	adds	r3, r0, #1
 800e15a:	d102      	bne.n	800e162 <_write_r+0x1e>
 800e15c:	682b      	ldr	r3, [r5, #0]
 800e15e:	b103      	cbz	r3, 800e162 <_write_r+0x1e>
 800e160:	6023      	str	r3, [r4, #0]
 800e162:	bd38      	pop	{r3, r4, r5, pc}
 800e164:	20002314 	.word	0x20002314

0800e168 <__errno>:
 800e168:	4b01      	ldr	r3, [pc, #4]	@ (800e170 <__errno+0x8>)
 800e16a:	6818      	ldr	r0, [r3, #0]
 800e16c:	4770      	bx	lr
 800e16e:	bf00      	nop
 800e170:	2000003c 	.word	0x2000003c

0800e174 <__libc_init_array>:
 800e174:	b570      	push	{r4, r5, r6, lr}
 800e176:	4d0d      	ldr	r5, [pc, #52]	@ (800e1ac <__libc_init_array+0x38>)
 800e178:	4c0d      	ldr	r4, [pc, #52]	@ (800e1b0 <__libc_init_array+0x3c>)
 800e17a:	1b64      	subs	r4, r4, r5
 800e17c:	10a4      	asrs	r4, r4, #2
 800e17e:	2600      	movs	r6, #0
 800e180:	42a6      	cmp	r6, r4
 800e182:	d109      	bne.n	800e198 <__libc_init_array+0x24>
 800e184:	4d0b      	ldr	r5, [pc, #44]	@ (800e1b4 <__libc_init_array+0x40>)
 800e186:	4c0c      	ldr	r4, [pc, #48]	@ (800e1b8 <__libc_init_array+0x44>)
 800e188:	f003 fd46 	bl	8011c18 <_init>
 800e18c:	1b64      	subs	r4, r4, r5
 800e18e:	10a4      	asrs	r4, r4, #2
 800e190:	2600      	movs	r6, #0
 800e192:	42a6      	cmp	r6, r4
 800e194:	d105      	bne.n	800e1a2 <__libc_init_array+0x2e>
 800e196:	bd70      	pop	{r4, r5, r6, pc}
 800e198:	f855 3b04 	ldr.w	r3, [r5], #4
 800e19c:	4798      	blx	r3
 800e19e:	3601      	adds	r6, #1
 800e1a0:	e7ee      	b.n	800e180 <__libc_init_array+0xc>
 800e1a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1a6:	4798      	blx	r3
 800e1a8:	3601      	adds	r6, #1
 800e1aa:	e7f2      	b.n	800e192 <__libc_init_array+0x1e>
 800e1ac:	08012cf8 	.word	0x08012cf8
 800e1b0:	08012cf8 	.word	0x08012cf8
 800e1b4:	08012cf8 	.word	0x08012cf8
 800e1b8:	08012cfc 	.word	0x08012cfc

0800e1bc <__retarget_lock_init_recursive>:
 800e1bc:	4770      	bx	lr

0800e1be <__retarget_lock_close_recursive>:
 800e1be:	4770      	bx	lr

0800e1c0 <__retarget_lock_acquire_recursive>:
 800e1c0:	4770      	bx	lr

0800e1c2 <__retarget_lock_release_recursive>:
 800e1c2:	4770      	bx	lr

0800e1c4 <strcpy>:
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e1ca:	f803 2b01 	strb.w	r2, [r3], #1
 800e1ce:	2a00      	cmp	r2, #0
 800e1d0:	d1f9      	bne.n	800e1c6 <strcpy+0x2>
 800e1d2:	4770      	bx	lr

0800e1d4 <memcpy>:
 800e1d4:	440a      	add	r2, r1
 800e1d6:	4291      	cmp	r1, r2
 800e1d8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800e1dc:	d100      	bne.n	800e1e0 <memcpy+0xc>
 800e1de:	4770      	bx	lr
 800e1e0:	b510      	push	{r4, lr}
 800e1e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e1ea:	4291      	cmp	r1, r2
 800e1ec:	d1f9      	bne.n	800e1e2 <memcpy+0xe>
 800e1ee:	bd10      	pop	{r4, pc}

0800e1f0 <nanf>:
 800e1f0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e1f8 <nanf+0x8>
 800e1f4:	4770      	bx	lr
 800e1f6:	bf00      	nop
 800e1f8:	7fc00000 	.word	0x7fc00000

0800e1fc <abort>:
 800e1fc:	b508      	push	{r3, lr}
 800e1fe:	2006      	movs	r0, #6
 800e200:	f003 f8be 	bl	8011380 <raise>
 800e204:	2001      	movs	r0, #1
 800e206:	f7f5 fea7 	bl	8003f58 <_exit>

0800e20a <quorem>:
 800e20a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e20e:	6903      	ldr	r3, [r0, #16]
 800e210:	690c      	ldr	r4, [r1, #16]
 800e212:	42a3      	cmp	r3, r4
 800e214:	4607      	mov	r7, r0
 800e216:	db7e      	blt.n	800e316 <quorem+0x10c>
 800e218:	3c01      	subs	r4, #1
 800e21a:	f101 0814 	add.w	r8, r1, #20
 800e21e:	00a3      	lsls	r3, r4, #2
 800e220:	f100 0514 	add.w	r5, r0, #20
 800e224:	9300      	str	r3, [sp, #0]
 800e226:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e22a:	9301      	str	r3, [sp, #4]
 800e22c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e230:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e234:	3301      	adds	r3, #1
 800e236:	429a      	cmp	r2, r3
 800e238:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e23c:	fbb2 f6f3 	udiv	r6, r2, r3
 800e240:	d32e      	bcc.n	800e2a0 <quorem+0x96>
 800e242:	f04f 0a00 	mov.w	sl, #0
 800e246:	46c4      	mov	ip, r8
 800e248:	46ae      	mov	lr, r5
 800e24a:	46d3      	mov	fp, sl
 800e24c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e250:	b298      	uxth	r0, r3
 800e252:	fb06 a000 	mla	r0, r6, r0, sl
 800e256:	0c02      	lsrs	r2, r0, #16
 800e258:	0c1b      	lsrs	r3, r3, #16
 800e25a:	fb06 2303 	mla	r3, r6, r3, r2
 800e25e:	f8de 2000 	ldr.w	r2, [lr]
 800e262:	b280      	uxth	r0, r0
 800e264:	b292      	uxth	r2, r2
 800e266:	1a12      	subs	r2, r2, r0
 800e268:	445a      	add	r2, fp
 800e26a:	f8de 0000 	ldr.w	r0, [lr]
 800e26e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e272:	b29b      	uxth	r3, r3
 800e274:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e278:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e27c:	b292      	uxth	r2, r2
 800e27e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e282:	45e1      	cmp	r9, ip
 800e284:	f84e 2b04 	str.w	r2, [lr], #4
 800e288:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e28c:	d2de      	bcs.n	800e24c <quorem+0x42>
 800e28e:	9b00      	ldr	r3, [sp, #0]
 800e290:	58eb      	ldr	r3, [r5, r3]
 800e292:	b92b      	cbnz	r3, 800e2a0 <quorem+0x96>
 800e294:	9b01      	ldr	r3, [sp, #4]
 800e296:	3b04      	subs	r3, #4
 800e298:	429d      	cmp	r5, r3
 800e29a:	461a      	mov	r2, r3
 800e29c:	d32f      	bcc.n	800e2fe <quorem+0xf4>
 800e29e:	613c      	str	r4, [r7, #16]
 800e2a0:	4638      	mov	r0, r7
 800e2a2:	f001 f90f 	bl	800f4c4 <__mcmp>
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	db25      	blt.n	800e2f6 <quorem+0xec>
 800e2aa:	4629      	mov	r1, r5
 800e2ac:	2000      	movs	r0, #0
 800e2ae:	f858 2b04 	ldr.w	r2, [r8], #4
 800e2b2:	f8d1 c000 	ldr.w	ip, [r1]
 800e2b6:	fa1f fe82 	uxth.w	lr, r2
 800e2ba:	fa1f f38c 	uxth.w	r3, ip
 800e2be:	eba3 030e 	sub.w	r3, r3, lr
 800e2c2:	4403      	add	r3, r0
 800e2c4:	0c12      	lsrs	r2, r2, #16
 800e2c6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e2ca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e2ce:	b29b      	uxth	r3, r3
 800e2d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e2d4:	45c1      	cmp	r9, r8
 800e2d6:	f841 3b04 	str.w	r3, [r1], #4
 800e2da:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e2de:	d2e6      	bcs.n	800e2ae <quorem+0xa4>
 800e2e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e2e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e2e8:	b922      	cbnz	r2, 800e2f4 <quorem+0xea>
 800e2ea:	3b04      	subs	r3, #4
 800e2ec:	429d      	cmp	r5, r3
 800e2ee:	461a      	mov	r2, r3
 800e2f0:	d30b      	bcc.n	800e30a <quorem+0x100>
 800e2f2:	613c      	str	r4, [r7, #16]
 800e2f4:	3601      	adds	r6, #1
 800e2f6:	4630      	mov	r0, r6
 800e2f8:	b003      	add	sp, #12
 800e2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2fe:	6812      	ldr	r2, [r2, #0]
 800e300:	3b04      	subs	r3, #4
 800e302:	2a00      	cmp	r2, #0
 800e304:	d1cb      	bne.n	800e29e <quorem+0x94>
 800e306:	3c01      	subs	r4, #1
 800e308:	e7c6      	b.n	800e298 <quorem+0x8e>
 800e30a:	6812      	ldr	r2, [r2, #0]
 800e30c:	3b04      	subs	r3, #4
 800e30e:	2a00      	cmp	r2, #0
 800e310:	d1ef      	bne.n	800e2f2 <quorem+0xe8>
 800e312:	3c01      	subs	r4, #1
 800e314:	e7ea      	b.n	800e2ec <quorem+0xe2>
 800e316:	2000      	movs	r0, #0
 800e318:	e7ee      	b.n	800e2f8 <quorem+0xee>
 800e31a:	0000      	movs	r0, r0
 800e31c:	0000      	movs	r0, r0
	...

0800e320 <_dtoa_r>:
 800e320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e324:	69c7      	ldr	r7, [r0, #28]
 800e326:	b099      	sub	sp, #100	@ 0x64
 800e328:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e32c:	ec55 4b10 	vmov	r4, r5, d0
 800e330:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e332:	9109      	str	r1, [sp, #36]	@ 0x24
 800e334:	4683      	mov	fp, r0
 800e336:	920e      	str	r2, [sp, #56]	@ 0x38
 800e338:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e33a:	b97f      	cbnz	r7, 800e35c <_dtoa_r+0x3c>
 800e33c:	2010      	movs	r0, #16
 800e33e:	f7fd fecb 	bl	800c0d8 <malloc>
 800e342:	4602      	mov	r2, r0
 800e344:	f8cb 001c 	str.w	r0, [fp, #28]
 800e348:	b920      	cbnz	r0, 800e354 <_dtoa_r+0x34>
 800e34a:	4ba7      	ldr	r3, [pc, #668]	@ (800e5e8 <_dtoa_r+0x2c8>)
 800e34c:	21ef      	movs	r1, #239	@ 0xef
 800e34e:	48a7      	ldr	r0, [pc, #668]	@ (800e5ec <_dtoa_r+0x2cc>)
 800e350:	f003 f85e 	bl	8011410 <__assert_func>
 800e354:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e358:	6007      	str	r7, [r0, #0]
 800e35a:	60c7      	str	r7, [r0, #12]
 800e35c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e360:	6819      	ldr	r1, [r3, #0]
 800e362:	b159      	cbz	r1, 800e37c <_dtoa_r+0x5c>
 800e364:	685a      	ldr	r2, [r3, #4]
 800e366:	604a      	str	r2, [r1, #4]
 800e368:	2301      	movs	r3, #1
 800e36a:	4093      	lsls	r3, r2
 800e36c:	608b      	str	r3, [r1, #8]
 800e36e:	4658      	mov	r0, fp
 800e370:	f000 fe24 	bl	800efbc <_Bfree>
 800e374:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e378:	2200      	movs	r2, #0
 800e37a:	601a      	str	r2, [r3, #0]
 800e37c:	1e2b      	subs	r3, r5, #0
 800e37e:	bfb9      	ittee	lt
 800e380:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e384:	9303      	strlt	r3, [sp, #12]
 800e386:	2300      	movge	r3, #0
 800e388:	6033      	strge	r3, [r6, #0]
 800e38a:	9f03      	ldr	r7, [sp, #12]
 800e38c:	4b98      	ldr	r3, [pc, #608]	@ (800e5f0 <_dtoa_r+0x2d0>)
 800e38e:	bfbc      	itt	lt
 800e390:	2201      	movlt	r2, #1
 800e392:	6032      	strlt	r2, [r6, #0]
 800e394:	43bb      	bics	r3, r7
 800e396:	d112      	bne.n	800e3be <_dtoa_r+0x9e>
 800e398:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e39a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e39e:	6013      	str	r3, [r2, #0]
 800e3a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e3a4:	4323      	orrs	r3, r4
 800e3a6:	f000 854d 	beq.w	800ee44 <_dtoa_r+0xb24>
 800e3aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e3ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e604 <_dtoa_r+0x2e4>
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	f000 854f 	beq.w	800ee54 <_dtoa_r+0xb34>
 800e3b6:	f10a 0303 	add.w	r3, sl, #3
 800e3ba:	f000 bd49 	b.w	800ee50 <_dtoa_r+0xb30>
 800e3be:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	ec51 0b17 	vmov	r0, r1, d7
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e3ce:	f7f2 fb9b 	bl	8000b08 <__aeabi_dcmpeq>
 800e3d2:	4680      	mov	r8, r0
 800e3d4:	b158      	cbz	r0, 800e3ee <_dtoa_r+0xce>
 800e3d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e3d8:	2301      	movs	r3, #1
 800e3da:	6013      	str	r3, [r2, #0]
 800e3dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e3de:	b113      	cbz	r3, 800e3e6 <_dtoa_r+0xc6>
 800e3e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e3e2:	4b84      	ldr	r3, [pc, #528]	@ (800e5f4 <_dtoa_r+0x2d4>)
 800e3e4:	6013      	str	r3, [r2, #0]
 800e3e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e608 <_dtoa_r+0x2e8>
 800e3ea:	f000 bd33 	b.w	800ee54 <_dtoa_r+0xb34>
 800e3ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e3f2:	aa16      	add	r2, sp, #88	@ 0x58
 800e3f4:	a917      	add	r1, sp, #92	@ 0x5c
 800e3f6:	4658      	mov	r0, fp
 800e3f8:	f001 f984 	bl	800f704 <__d2b>
 800e3fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e400:	4681      	mov	r9, r0
 800e402:	2e00      	cmp	r6, #0
 800e404:	d077      	beq.n	800e4f6 <_dtoa_r+0x1d6>
 800e406:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e408:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e40c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e410:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e414:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e418:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e41c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e420:	4619      	mov	r1, r3
 800e422:	2200      	movs	r2, #0
 800e424:	4b74      	ldr	r3, [pc, #464]	@ (800e5f8 <_dtoa_r+0x2d8>)
 800e426:	f7f1 ff4f 	bl	80002c8 <__aeabi_dsub>
 800e42a:	a369      	add	r3, pc, #420	@ (adr r3, 800e5d0 <_dtoa_r+0x2b0>)
 800e42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e430:	f7f2 f902 	bl	8000638 <__aeabi_dmul>
 800e434:	a368      	add	r3, pc, #416	@ (adr r3, 800e5d8 <_dtoa_r+0x2b8>)
 800e436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e43a:	f7f1 ff47 	bl	80002cc <__adddf3>
 800e43e:	4604      	mov	r4, r0
 800e440:	4630      	mov	r0, r6
 800e442:	460d      	mov	r5, r1
 800e444:	f7f2 f88e 	bl	8000564 <__aeabi_i2d>
 800e448:	a365      	add	r3, pc, #404	@ (adr r3, 800e5e0 <_dtoa_r+0x2c0>)
 800e44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e44e:	f7f2 f8f3 	bl	8000638 <__aeabi_dmul>
 800e452:	4602      	mov	r2, r0
 800e454:	460b      	mov	r3, r1
 800e456:	4620      	mov	r0, r4
 800e458:	4629      	mov	r1, r5
 800e45a:	f7f1 ff37 	bl	80002cc <__adddf3>
 800e45e:	4604      	mov	r4, r0
 800e460:	460d      	mov	r5, r1
 800e462:	f7f2 fb99 	bl	8000b98 <__aeabi_d2iz>
 800e466:	2200      	movs	r2, #0
 800e468:	4607      	mov	r7, r0
 800e46a:	2300      	movs	r3, #0
 800e46c:	4620      	mov	r0, r4
 800e46e:	4629      	mov	r1, r5
 800e470:	f7f2 fb54 	bl	8000b1c <__aeabi_dcmplt>
 800e474:	b140      	cbz	r0, 800e488 <_dtoa_r+0x168>
 800e476:	4638      	mov	r0, r7
 800e478:	f7f2 f874 	bl	8000564 <__aeabi_i2d>
 800e47c:	4622      	mov	r2, r4
 800e47e:	462b      	mov	r3, r5
 800e480:	f7f2 fb42 	bl	8000b08 <__aeabi_dcmpeq>
 800e484:	b900      	cbnz	r0, 800e488 <_dtoa_r+0x168>
 800e486:	3f01      	subs	r7, #1
 800e488:	2f16      	cmp	r7, #22
 800e48a:	d851      	bhi.n	800e530 <_dtoa_r+0x210>
 800e48c:	4b5b      	ldr	r3, [pc, #364]	@ (800e5fc <_dtoa_r+0x2dc>)
 800e48e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e496:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e49a:	f7f2 fb3f 	bl	8000b1c <__aeabi_dcmplt>
 800e49e:	2800      	cmp	r0, #0
 800e4a0:	d048      	beq.n	800e534 <_dtoa_r+0x214>
 800e4a2:	3f01      	subs	r7, #1
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	9312      	str	r3, [sp, #72]	@ 0x48
 800e4a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e4aa:	1b9b      	subs	r3, r3, r6
 800e4ac:	1e5a      	subs	r2, r3, #1
 800e4ae:	bf44      	itt	mi
 800e4b0:	f1c3 0801 	rsbmi	r8, r3, #1
 800e4b4:	2300      	movmi	r3, #0
 800e4b6:	9208      	str	r2, [sp, #32]
 800e4b8:	bf54      	ite	pl
 800e4ba:	f04f 0800 	movpl.w	r8, #0
 800e4be:	9308      	strmi	r3, [sp, #32]
 800e4c0:	2f00      	cmp	r7, #0
 800e4c2:	db39      	blt.n	800e538 <_dtoa_r+0x218>
 800e4c4:	9b08      	ldr	r3, [sp, #32]
 800e4c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e4c8:	443b      	add	r3, r7
 800e4ca:	9308      	str	r3, [sp, #32]
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800e4d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4d2:	2b09      	cmp	r3, #9
 800e4d4:	d864      	bhi.n	800e5a0 <_dtoa_r+0x280>
 800e4d6:	2b05      	cmp	r3, #5
 800e4d8:	bfc4      	itt	gt
 800e4da:	3b04      	subgt	r3, #4
 800e4dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e4de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4e0:	f1a3 0302 	sub.w	r3, r3, #2
 800e4e4:	bfcc      	ite	gt
 800e4e6:	2400      	movgt	r4, #0
 800e4e8:	2401      	movle	r4, #1
 800e4ea:	2b03      	cmp	r3, #3
 800e4ec:	d863      	bhi.n	800e5b6 <_dtoa_r+0x296>
 800e4ee:	e8df f003 	tbb	[pc, r3]
 800e4f2:	372a      	.short	0x372a
 800e4f4:	5535      	.short	0x5535
 800e4f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e4fa:	441e      	add	r6, r3
 800e4fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e500:	2b20      	cmp	r3, #32
 800e502:	bfc1      	itttt	gt
 800e504:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e508:	409f      	lslgt	r7, r3
 800e50a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e50e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e512:	bfd6      	itet	le
 800e514:	f1c3 0320 	rsble	r3, r3, #32
 800e518:	ea47 0003 	orrgt.w	r0, r7, r3
 800e51c:	fa04 f003 	lslle.w	r0, r4, r3
 800e520:	f7f2 f810 	bl	8000544 <__aeabi_ui2d>
 800e524:	2201      	movs	r2, #1
 800e526:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e52a:	3e01      	subs	r6, #1
 800e52c:	9214      	str	r2, [sp, #80]	@ 0x50
 800e52e:	e777      	b.n	800e420 <_dtoa_r+0x100>
 800e530:	2301      	movs	r3, #1
 800e532:	e7b8      	b.n	800e4a6 <_dtoa_r+0x186>
 800e534:	9012      	str	r0, [sp, #72]	@ 0x48
 800e536:	e7b7      	b.n	800e4a8 <_dtoa_r+0x188>
 800e538:	427b      	negs	r3, r7
 800e53a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e53c:	2300      	movs	r3, #0
 800e53e:	eba8 0807 	sub.w	r8, r8, r7
 800e542:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e544:	e7c4      	b.n	800e4d0 <_dtoa_r+0x1b0>
 800e546:	2300      	movs	r3, #0
 800e548:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e54a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	dc35      	bgt.n	800e5bc <_dtoa_r+0x29c>
 800e550:	2301      	movs	r3, #1
 800e552:	9300      	str	r3, [sp, #0]
 800e554:	9307      	str	r3, [sp, #28]
 800e556:	461a      	mov	r2, r3
 800e558:	920e      	str	r2, [sp, #56]	@ 0x38
 800e55a:	e00b      	b.n	800e574 <_dtoa_r+0x254>
 800e55c:	2301      	movs	r3, #1
 800e55e:	e7f3      	b.n	800e548 <_dtoa_r+0x228>
 800e560:	2300      	movs	r3, #0
 800e562:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e564:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e566:	18fb      	adds	r3, r7, r3
 800e568:	9300      	str	r3, [sp, #0]
 800e56a:	3301      	adds	r3, #1
 800e56c:	2b01      	cmp	r3, #1
 800e56e:	9307      	str	r3, [sp, #28]
 800e570:	bfb8      	it	lt
 800e572:	2301      	movlt	r3, #1
 800e574:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e578:	2100      	movs	r1, #0
 800e57a:	2204      	movs	r2, #4
 800e57c:	f102 0514 	add.w	r5, r2, #20
 800e580:	429d      	cmp	r5, r3
 800e582:	d91f      	bls.n	800e5c4 <_dtoa_r+0x2a4>
 800e584:	6041      	str	r1, [r0, #4]
 800e586:	4658      	mov	r0, fp
 800e588:	f000 fcd8 	bl	800ef3c <_Balloc>
 800e58c:	4682      	mov	sl, r0
 800e58e:	2800      	cmp	r0, #0
 800e590:	d13c      	bne.n	800e60c <_dtoa_r+0x2ec>
 800e592:	4b1b      	ldr	r3, [pc, #108]	@ (800e600 <_dtoa_r+0x2e0>)
 800e594:	4602      	mov	r2, r0
 800e596:	f240 11af 	movw	r1, #431	@ 0x1af
 800e59a:	e6d8      	b.n	800e34e <_dtoa_r+0x2e>
 800e59c:	2301      	movs	r3, #1
 800e59e:	e7e0      	b.n	800e562 <_dtoa_r+0x242>
 800e5a0:	2401      	movs	r4, #1
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e5a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e5ac:	9300      	str	r3, [sp, #0]
 800e5ae:	9307      	str	r3, [sp, #28]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	2312      	movs	r3, #18
 800e5b4:	e7d0      	b.n	800e558 <_dtoa_r+0x238>
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e5ba:	e7f5      	b.n	800e5a8 <_dtoa_r+0x288>
 800e5bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e5be:	9300      	str	r3, [sp, #0]
 800e5c0:	9307      	str	r3, [sp, #28]
 800e5c2:	e7d7      	b.n	800e574 <_dtoa_r+0x254>
 800e5c4:	3101      	adds	r1, #1
 800e5c6:	0052      	lsls	r2, r2, #1
 800e5c8:	e7d8      	b.n	800e57c <_dtoa_r+0x25c>
 800e5ca:	bf00      	nop
 800e5cc:	f3af 8000 	nop.w
 800e5d0:	636f4361 	.word	0x636f4361
 800e5d4:	3fd287a7 	.word	0x3fd287a7
 800e5d8:	8b60c8b3 	.word	0x8b60c8b3
 800e5dc:	3fc68a28 	.word	0x3fc68a28
 800e5e0:	509f79fb 	.word	0x509f79fb
 800e5e4:	3fd34413 	.word	0x3fd34413
 800e5e8:	080129ed 	.word	0x080129ed
 800e5ec:	08012a04 	.word	0x08012a04
 800e5f0:	7ff00000 	.word	0x7ff00000
 800e5f4:	08012c48 	.word	0x08012c48
 800e5f8:	3ff80000 	.word	0x3ff80000
 800e5fc:	08012b00 	.word	0x08012b00
 800e600:	08012a5c 	.word	0x08012a5c
 800e604:	080129e9 	.word	0x080129e9
 800e608:	08012c47 	.word	0x08012c47
 800e60c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e610:	6018      	str	r0, [r3, #0]
 800e612:	9b07      	ldr	r3, [sp, #28]
 800e614:	2b0e      	cmp	r3, #14
 800e616:	f200 80a4 	bhi.w	800e762 <_dtoa_r+0x442>
 800e61a:	2c00      	cmp	r4, #0
 800e61c:	f000 80a1 	beq.w	800e762 <_dtoa_r+0x442>
 800e620:	2f00      	cmp	r7, #0
 800e622:	dd33      	ble.n	800e68c <_dtoa_r+0x36c>
 800e624:	4bad      	ldr	r3, [pc, #692]	@ (800e8dc <_dtoa_r+0x5bc>)
 800e626:	f007 020f 	and.w	r2, r7, #15
 800e62a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e62e:	ed93 7b00 	vldr	d7, [r3]
 800e632:	05f8      	lsls	r0, r7, #23
 800e634:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e638:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e63c:	d516      	bpl.n	800e66c <_dtoa_r+0x34c>
 800e63e:	4ba8      	ldr	r3, [pc, #672]	@ (800e8e0 <_dtoa_r+0x5c0>)
 800e640:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e644:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e648:	f7f2 f920 	bl	800088c <__aeabi_ddiv>
 800e64c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e650:	f004 040f 	and.w	r4, r4, #15
 800e654:	2603      	movs	r6, #3
 800e656:	4da2      	ldr	r5, [pc, #648]	@ (800e8e0 <_dtoa_r+0x5c0>)
 800e658:	b954      	cbnz	r4, 800e670 <_dtoa_r+0x350>
 800e65a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e65e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e662:	f7f2 f913 	bl	800088c <__aeabi_ddiv>
 800e666:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e66a:	e028      	b.n	800e6be <_dtoa_r+0x39e>
 800e66c:	2602      	movs	r6, #2
 800e66e:	e7f2      	b.n	800e656 <_dtoa_r+0x336>
 800e670:	07e1      	lsls	r1, r4, #31
 800e672:	d508      	bpl.n	800e686 <_dtoa_r+0x366>
 800e674:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e678:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e67c:	f7f1 ffdc 	bl	8000638 <__aeabi_dmul>
 800e680:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e684:	3601      	adds	r6, #1
 800e686:	1064      	asrs	r4, r4, #1
 800e688:	3508      	adds	r5, #8
 800e68a:	e7e5      	b.n	800e658 <_dtoa_r+0x338>
 800e68c:	f000 80d2 	beq.w	800e834 <_dtoa_r+0x514>
 800e690:	427c      	negs	r4, r7
 800e692:	4b92      	ldr	r3, [pc, #584]	@ (800e8dc <_dtoa_r+0x5bc>)
 800e694:	4d92      	ldr	r5, [pc, #584]	@ (800e8e0 <_dtoa_r+0x5c0>)
 800e696:	f004 020f 	and.w	r2, r4, #15
 800e69a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e6a6:	f7f1 ffc7 	bl	8000638 <__aeabi_dmul>
 800e6aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6ae:	1124      	asrs	r4, r4, #4
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	2602      	movs	r6, #2
 800e6b4:	2c00      	cmp	r4, #0
 800e6b6:	f040 80b2 	bne.w	800e81e <_dtoa_r+0x4fe>
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d1d3      	bne.n	800e666 <_dtoa_r+0x346>
 800e6be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e6c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	f000 80b7 	beq.w	800e838 <_dtoa_r+0x518>
 800e6ca:	4b86      	ldr	r3, [pc, #536]	@ (800e8e4 <_dtoa_r+0x5c4>)
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	4620      	mov	r0, r4
 800e6d0:	4629      	mov	r1, r5
 800e6d2:	f7f2 fa23 	bl	8000b1c <__aeabi_dcmplt>
 800e6d6:	2800      	cmp	r0, #0
 800e6d8:	f000 80ae 	beq.w	800e838 <_dtoa_r+0x518>
 800e6dc:	9b07      	ldr	r3, [sp, #28]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	f000 80aa 	beq.w	800e838 <_dtoa_r+0x518>
 800e6e4:	9b00      	ldr	r3, [sp, #0]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	dd37      	ble.n	800e75a <_dtoa_r+0x43a>
 800e6ea:	1e7b      	subs	r3, r7, #1
 800e6ec:	9304      	str	r3, [sp, #16]
 800e6ee:	4620      	mov	r0, r4
 800e6f0:	4b7d      	ldr	r3, [pc, #500]	@ (800e8e8 <_dtoa_r+0x5c8>)
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	4629      	mov	r1, r5
 800e6f6:	f7f1 ff9f 	bl	8000638 <__aeabi_dmul>
 800e6fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6fe:	9c00      	ldr	r4, [sp, #0]
 800e700:	3601      	adds	r6, #1
 800e702:	4630      	mov	r0, r6
 800e704:	f7f1 ff2e 	bl	8000564 <__aeabi_i2d>
 800e708:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e70c:	f7f1 ff94 	bl	8000638 <__aeabi_dmul>
 800e710:	4b76      	ldr	r3, [pc, #472]	@ (800e8ec <_dtoa_r+0x5cc>)
 800e712:	2200      	movs	r2, #0
 800e714:	f7f1 fdda 	bl	80002cc <__adddf3>
 800e718:	4605      	mov	r5, r0
 800e71a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e71e:	2c00      	cmp	r4, #0
 800e720:	f040 808d 	bne.w	800e83e <_dtoa_r+0x51e>
 800e724:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e728:	4b71      	ldr	r3, [pc, #452]	@ (800e8f0 <_dtoa_r+0x5d0>)
 800e72a:	2200      	movs	r2, #0
 800e72c:	f7f1 fdcc 	bl	80002c8 <__aeabi_dsub>
 800e730:	4602      	mov	r2, r0
 800e732:	460b      	mov	r3, r1
 800e734:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e738:	462a      	mov	r2, r5
 800e73a:	4633      	mov	r3, r6
 800e73c:	f7f2 fa0c 	bl	8000b58 <__aeabi_dcmpgt>
 800e740:	2800      	cmp	r0, #0
 800e742:	f040 828b 	bne.w	800ec5c <_dtoa_r+0x93c>
 800e746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e74a:	462a      	mov	r2, r5
 800e74c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e750:	f7f2 f9e4 	bl	8000b1c <__aeabi_dcmplt>
 800e754:	2800      	cmp	r0, #0
 800e756:	f040 8128 	bne.w	800e9aa <_dtoa_r+0x68a>
 800e75a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e75e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e762:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e764:	2b00      	cmp	r3, #0
 800e766:	f2c0 815a 	blt.w	800ea1e <_dtoa_r+0x6fe>
 800e76a:	2f0e      	cmp	r7, #14
 800e76c:	f300 8157 	bgt.w	800ea1e <_dtoa_r+0x6fe>
 800e770:	4b5a      	ldr	r3, [pc, #360]	@ (800e8dc <_dtoa_r+0x5bc>)
 800e772:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e776:	ed93 7b00 	vldr	d7, [r3]
 800e77a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	ed8d 7b00 	vstr	d7, [sp]
 800e782:	da03      	bge.n	800e78c <_dtoa_r+0x46c>
 800e784:	9b07      	ldr	r3, [sp, #28]
 800e786:	2b00      	cmp	r3, #0
 800e788:	f340 8101 	ble.w	800e98e <_dtoa_r+0x66e>
 800e78c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e790:	4656      	mov	r6, sl
 800e792:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e796:	4620      	mov	r0, r4
 800e798:	4629      	mov	r1, r5
 800e79a:	f7f2 f877 	bl	800088c <__aeabi_ddiv>
 800e79e:	f7f2 f9fb 	bl	8000b98 <__aeabi_d2iz>
 800e7a2:	4680      	mov	r8, r0
 800e7a4:	f7f1 fede 	bl	8000564 <__aeabi_i2d>
 800e7a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e7ac:	f7f1 ff44 	bl	8000638 <__aeabi_dmul>
 800e7b0:	4602      	mov	r2, r0
 800e7b2:	460b      	mov	r3, r1
 800e7b4:	4620      	mov	r0, r4
 800e7b6:	4629      	mov	r1, r5
 800e7b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e7bc:	f7f1 fd84 	bl	80002c8 <__aeabi_dsub>
 800e7c0:	f806 4b01 	strb.w	r4, [r6], #1
 800e7c4:	9d07      	ldr	r5, [sp, #28]
 800e7c6:	eba6 040a 	sub.w	r4, r6, sl
 800e7ca:	42a5      	cmp	r5, r4
 800e7cc:	4602      	mov	r2, r0
 800e7ce:	460b      	mov	r3, r1
 800e7d0:	f040 8117 	bne.w	800ea02 <_dtoa_r+0x6e2>
 800e7d4:	f7f1 fd7a 	bl	80002cc <__adddf3>
 800e7d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e7dc:	4604      	mov	r4, r0
 800e7de:	460d      	mov	r5, r1
 800e7e0:	f7f2 f9ba 	bl	8000b58 <__aeabi_dcmpgt>
 800e7e4:	2800      	cmp	r0, #0
 800e7e6:	f040 80f9 	bne.w	800e9dc <_dtoa_r+0x6bc>
 800e7ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e7ee:	4620      	mov	r0, r4
 800e7f0:	4629      	mov	r1, r5
 800e7f2:	f7f2 f989 	bl	8000b08 <__aeabi_dcmpeq>
 800e7f6:	b118      	cbz	r0, 800e800 <_dtoa_r+0x4e0>
 800e7f8:	f018 0f01 	tst.w	r8, #1
 800e7fc:	f040 80ee 	bne.w	800e9dc <_dtoa_r+0x6bc>
 800e800:	4649      	mov	r1, r9
 800e802:	4658      	mov	r0, fp
 800e804:	f000 fbda 	bl	800efbc <_Bfree>
 800e808:	2300      	movs	r3, #0
 800e80a:	7033      	strb	r3, [r6, #0]
 800e80c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e80e:	3701      	adds	r7, #1
 800e810:	601f      	str	r7, [r3, #0]
 800e812:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e814:	2b00      	cmp	r3, #0
 800e816:	f000 831d 	beq.w	800ee54 <_dtoa_r+0xb34>
 800e81a:	601e      	str	r6, [r3, #0]
 800e81c:	e31a      	b.n	800ee54 <_dtoa_r+0xb34>
 800e81e:	07e2      	lsls	r2, r4, #31
 800e820:	d505      	bpl.n	800e82e <_dtoa_r+0x50e>
 800e822:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e826:	f7f1 ff07 	bl	8000638 <__aeabi_dmul>
 800e82a:	3601      	adds	r6, #1
 800e82c:	2301      	movs	r3, #1
 800e82e:	1064      	asrs	r4, r4, #1
 800e830:	3508      	adds	r5, #8
 800e832:	e73f      	b.n	800e6b4 <_dtoa_r+0x394>
 800e834:	2602      	movs	r6, #2
 800e836:	e742      	b.n	800e6be <_dtoa_r+0x39e>
 800e838:	9c07      	ldr	r4, [sp, #28]
 800e83a:	9704      	str	r7, [sp, #16]
 800e83c:	e761      	b.n	800e702 <_dtoa_r+0x3e2>
 800e83e:	4b27      	ldr	r3, [pc, #156]	@ (800e8dc <_dtoa_r+0x5bc>)
 800e840:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e842:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e846:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e84a:	4454      	add	r4, sl
 800e84c:	2900      	cmp	r1, #0
 800e84e:	d053      	beq.n	800e8f8 <_dtoa_r+0x5d8>
 800e850:	4928      	ldr	r1, [pc, #160]	@ (800e8f4 <_dtoa_r+0x5d4>)
 800e852:	2000      	movs	r0, #0
 800e854:	f7f2 f81a 	bl	800088c <__aeabi_ddiv>
 800e858:	4633      	mov	r3, r6
 800e85a:	462a      	mov	r2, r5
 800e85c:	f7f1 fd34 	bl	80002c8 <__aeabi_dsub>
 800e860:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e864:	4656      	mov	r6, sl
 800e866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e86a:	f7f2 f995 	bl	8000b98 <__aeabi_d2iz>
 800e86e:	4605      	mov	r5, r0
 800e870:	f7f1 fe78 	bl	8000564 <__aeabi_i2d>
 800e874:	4602      	mov	r2, r0
 800e876:	460b      	mov	r3, r1
 800e878:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e87c:	f7f1 fd24 	bl	80002c8 <__aeabi_dsub>
 800e880:	3530      	adds	r5, #48	@ 0x30
 800e882:	4602      	mov	r2, r0
 800e884:	460b      	mov	r3, r1
 800e886:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e88a:	f806 5b01 	strb.w	r5, [r6], #1
 800e88e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e892:	f7f2 f943 	bl	8000b1c <__aeabi_dcmplt>
 800e896:	2800      	cmp	r0, #0
 800e898:	d171      	bne.n	800e97e <_dtoa_r+0x65e>
 800e89a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e89e:	4911      	ldr	r1, [pc, #68]	@ (800e8e4 <_dtoa_r+0x5c4>)
 800e8a0:	2000      	movs	r0, #0
 800e8a2:	f7f1 fd11 	bl	80002c8 <__aeabi_dsub>
 800e8a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e8aa:	f7f2 f937 	bl	8000b1c <__aeabi_dcmplt>
 800e8ae:	2800      	cmp	r0, #0
 800e8b0:	f040 8095 	bne.w	800e9de <_dtoa_r+0x6be>
 800e8b4:	42a6      	cmp	r6, r4
 800e8b6:	f43f af50 	beq.w	800e75a <_dtoa_r+0x43a>
 800e8ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e8be:	4b0a      	ldr	r3, [pc, #40]	@ (800e8e8 <_dtoa_r+0x5c8>)
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	f7f1 feb9 	bl	8000638 <__aeabi_dmul>
 800e8c6:	4b08      	ldr	r3, [pc, #32]	@ (800e8e8 <_dtoa_r+0x5c8>)
 800e8c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8d2:	f7f1 feb1 	bl	8000638 <__aeabi_dmul>
 800e8d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8da:	e7c4      	b.n	800e866 <_dtoa_r+0x546>
 800e8dc:	08012b00 	.word	0x08012b00
 800e8e0:	08012ad8 	.word	0x08012ad8
 800e8e4:	3ff00000 	.word	0x3ff00000
 800e8e8:	40240000 	.word	0x40240000
 800e8ec:	401c0000 	.word	0x401c0000
 800e8f0:	40140000 	.word	0x40140000
 800e8f4:	3fe00000 	.word	0x3fe00000
 800e8f8:	4631      	mov	r1, r6
 800e8fa:	4628      	mov	r0, r5
 800e8fc:	f7f1 fe9c 	bl	8000638 <__aeabi_dmul>
 800e900:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e904:	9415      	str	r4, [sp, #84]	@ 0x54
 800e906:	4656      	mov	r6, sl
 800e908:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e90c:	f7f2 f944 	bl	8000b98 <__aeabi_d2iz>
 800e910:	4605      	mov	r5, r0
 800e912:	f7f1 fe27 	bl	8000564 <__aeabi_i2d>
 800e916:	4602      	mov	r2, r0
 800e918:	460b      	mov	r3, r1
 800e91a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e91e:	f7f1 fcd3 	bl	80002c8 <__aeabi_dsub>
 800e922:	3530      	adds	r5, #48	@ 0x30
 800e924:	f806 5b01 	strb.w	r5, [r6], #1
 800e928:	4602      	mov	r2, r0
 800e92a:	460b      	mov	r3, r1
 800e92c:	42a6      	cmp	r6, r4
 800e92e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e932:	f04f 0200 	mov.w	r2, #0
 800e936:	d124      	bne.n	800e982 <_dtoa_r+0x662>
 800e938:	4bac      	ldr	r3, [pc, #688]	@ (800ebec <_dtoa_r+0x8cc>)
 800e93a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e93e:	f7f1 fcc5 	bl	80002cc <__adddf3>
 800e942:	4602      	mov	r2, r0
 800e944:	460b      	mov	r3, r1
 800e946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e94a:	f7f2 f905 	bl	8000b58 <__aeabi_dcmpgt>
 800e94e:	2800      	cmp	r0, #0
 800e950:	d145      	bne.n	800e9de <_dtoa_r+0x6be>
 800e952:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e956:	49a5      	ldr	r1, [pc, #660]	@ (800ebec <_dtoa_r+0x8cc>)
 800e958:	2000      	movs	r0, #0
 800e95a:	f7f1 fcb5 	bl	80002c8 <__aeabi_dsub>
 800e95e:	4602      	mov	r2, r0
 800e960:	460b      	mov	r3, r1
 800e962:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e966:	f7f2 f8d9 	bl	8000b1c <__aeabi_dcmplt>
 800e96a:	2800      	cmp	r0, #0
 800e96c:	f43f aef5 	beq.w	800e75a <_dtoa_r+0x43a>
 800e970:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e972:	1e73      	subs	r3, r6, #1
 800e974:	9315      	str	r3, [sp, #84]	@ 0x54
 800e976:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e97a:	2b30      	cmp	r3, #48	@ 0x30
 800e97c:	d0f8      	beq.n	800e970 <_dtoa_r+0x650>
 800e97e:	9f04      	ldr	r7, [sp, #16]
 800e980:	e73e      	b.n	800e800 <_dtoa_r+0x4e0>
 800e982:	4b9b      	ldr	r3, [pc, #620]	@ (800ebf0 <_dtoa_r+0x8d0>)
 800e984:	f7f1 fe58 	bl	8000638 <__aeabi_dmul>
 800e988:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e98c:	e7bc      	b.n	800e908 <_dtoa_r+0x5e8>
 800e98e:	d10c      	bne.n	800e9aa <_dtoa_r+0x68a>
 800e990:	4b98      	ldr	r3, [pc, #608]	@ (800ebf4 <_dtoa_r+0x8d4>)
 800e992:	2200      	movs	r2, #0
 800e994:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e998:	f7f1 fe4e 	bl	8000638 <__aeabi_dmul>
 800e99c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e9a0:	f7f2 f8d0 	bl	8000b44 <__aeabi_dcmpge>
 800e9a4:	2800      	cmp	r0, #0
 800e9a6:	f000 8157 	beq.w	800ec58 <_dtoa_r+0x938>
 800e9aa:	2400      	movs	r4, #0
 800e9ac:	4625      	mov	r5, r4
 800e9ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e9b0:	43db      	mvns	r3, r3
 800e9b2:	9304      	str	r3, [sp, #16]
 800e9b4:	4656      	mov	r6, sl
 800e9b6:	2700      	movs	r7, #0
 800e9b8:	4621      	mov	r1, r4
 800e9ba:	4658      	mov	r0, fp
 800e9bc:	f000 fafe 	bl	800efbc <_Bfree>
 800e9c0:	2d00      	cmp	r5, #0
 800e9c2:	d0dc      	beq.n	800e97e <_dtoa_r+0x65e>
 800e9c4:	b12f      	cbz	r7, 800e9d2 <_dtoa_r+0x6b2>
 800e9c6:	42af      	cmp	r7, r5
 800e9c8:	d003      	beq.n	800e9d2 <_dtoa_r+0x6b2>
 800e9ca:	4639      	mov	r1, r7
 800e9cc:	4658      	mov	r0, fp
 800e9ce:	f000 faf5 	bl	800efbc <_Bfree>
 800e9d2:	4629      	mov	r1, r5
 800e9d4:	4658      	mov	r0, fp
 800e9d6:	f000 faf1 	bl	800efbc <_Bfree>
 800e9da:	e7d0      	b.n	800e97e <_dtoa_r+0x65e>
 800e9dc:	9704      	str	r7, [sp, #16]
 800e9de:	4633      	mov	r3, r6
 800e9e0:	461e      	mov	r6, r3
 800e9e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e9e6:	2a39      	cmp	r2, #57	@ 0x39
 800e9e8:	d107      	bne.n	800e9fa <_dtoa_r+0x6da>
 800e9ea:	459a      	cmp	sl, r3
 800e9ec:	d1f8      	bne.n	800e9e0 <_dtoa_r+0x6c0>
 800e9ee:	9a04      	ldr	r2, [sp, #16]
 800e9f0:	3201      	adds	r2, #1
 800e9f2:	9204      	str	r2, [sp, #16]
 800e9f4:	2230      	movs	r2, #48	@ 0x30
 800e9f6:	f88a 2000 	strb.w	r2, [sl]
 800e9fa:	781a      	ldrb	r2, [r3, #0]
 800e9fc:	3201      	adds	r2, #1
 800e9fe:	701a      	strb	r2, [r3, #0]
 800ea00:	e7bd      	b.n	800e97e <_dtoa_r+0x65e>
 800ea02:	4b7b      	ldr	r3, [pc, #492]	@ (800ebf0 <_dtoa_r+0x8d0>)
 800ea04:	2200      	movs	r2, #0
 800ea06:	f7f1 fe17 	bl	8000638 <__aeabi_dmul>
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	4604      	mov	r4, r0
 800ea10:	460d      	mov	r5, r1
 800ea12:	f7f2 f879 	bl	8000b08 <__aeabi_dcmpeq>
 800ea16:	2800      	cmp	r0, #0
 800ea18:	f43f aebb 	beq.w	800e792 <_dtoa_r+0x472>
 800ea1c:	e6f0      	b.n	800e800 <_dtoa_r+0x4e0>
 800ea1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ea20:	2a00      	cmp	r2, #0
 800ea22:	f000 80db 	beq.w	800ebdc <_dtoa_r+0x8bc>
 800ea26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea28:	2a01      	cmp	r2, #1
 800ea2a:	f300 80bf 	bgt.w	800ebac <_dtoa_r+0x88c>
 800ea2e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ea30:	2a00      	cmp	r2, #0
 800ea32:	f000 80b7 	beq.w	800eba4 <_dtoa_r+0x884>
 800ea36:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ea3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ea3c:	4646      	mov	r6, r8
 800ea3e:	9a08      	ldr	r2, [sp, #32]
 800ea40:	2101      	movs	r1, #1
 800ea42:	441a      	add	r2, r3
 800ea44:	4658      	mov	r0, fp
 800ea46:	4498      	add	r8, r3
 800ea48:	9208      	str	r2, [sp, #32]
 800ea4a:	f000 fbb5 	bl	800f1b8 <__i2b>
 800ea4e:	4605      	mov	r5, r0
 800ea50:	b15e      	cbz	r6, 800ea6a <_dtoa_r+0x74a>
 800ea52:	9b08      	ldr	r3, [sp, #32]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	dd08      	ble.n	800ea6a <_dtoa_r+0x74a>
 800ea58:	42b3      	cmp	r3, r6
 800ea5a:	9a08      	ldr	r2, [sp, #32]
 800ea5c:	bfa8      	it	ge
 800ea5e:	4633      	movge	r3, r6
 800ea60:	eba8 0803 	sub.w	r8, r8, r3
 800ea64:	1af6      	subs	r6, r6, r3
 800ea66:	1ad3      	subs	r3, r2, r3
 800ea68:	9308      	str	r3, [sp, #32]
 800ea6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea6c:	b1f3      	cbz	r3, 800eaac <_dtoa_r+0x78c>
 800ea6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	f000 80b7 	beq.w	800ebe4 <_dtoa_r+0x8c4>
 800ea76:	b18c      	cbz	r4, 800ea9c <_dtoa_r+0x77c>
 800ea78:	4629      	mov	r1, r5
 800ea7a:	4622      	mov	r2, r4
 800ea7c:	4658      	mov	r0, fp
 800ea7e:	f000 fc5b 	bl	800f338 <__pow5mult>
 800ea82:	464a      	mov	r2, r9
 800ea84:	4601      	mov	r1, r0
 800ea86:	4605      	mov	r5, r0
 800ea88:	4658      	mov	r0, fp
 800ea8a:	f000 fbab 	bl	800f1e4 <__multiply>
 800ea8e:	4649      	mov	r1, r9
 800ea90:	9004      	str	r0, [sp, #16]
 800ea92:	4658      	mov	r0, fp
 800ea94:	f000 fa92 	bl	800efbc <_Bfree>
 800ea98:	9b04      	ldr	r3, [sp, #16]
 800ea9a:	4699      	mov	r9, r3
 800ea9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea9e:	1b1a      	subs	r2, r3, r4
 800eaa0:	d004      	beq.n	800eaac <_dtoa_r+0x78c>
 800eaa2:	4649      	mov	r1, r9
 800eaa4:	4658      	mov	r0, fp
 800eaa6:	f000 fc47 	bl	800f338 <__pow5mult>
 800eaaa:	4681      	mov	r9, r0
 800eaac:	2101      	movs	r1, #1
 800eaae:	4658      	mov	r0, fp
 800eab0:	f000 fb82 	bl	800f1b8 <__i2b>
 800eab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eab6:	4604      	mov	r4, r0
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	f000 81cf 	beq.w	800ee5c <_dtoa_r+0xb3c>
 800eabe:	461a      	mov	r2, r3
 800eac0:	4601      	mov	r1, r0
 800eac2:	4658      	mov	r0, fp
 800eac4:	f000 fc38 	bl	800f338 <__pow5mult>
 800eac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	4604      	mov	r4, r0
 800eace:	f300 8095 	bgt.w	800ebfc <_dtoa_r+0x8dc>
 800ead2:	9b02      	ldr	r3, [sp, #8]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	f040 8087 	bne.w	800ebe8 <_dtoa_r+0x8c8>
 800eada:	9b03      	ldr	r3, [sp, #12]
 800eadc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	f040 8089 	bne.w	800ebf8 <_dtoa_r+0x8d8>
 800eae6:	9b03      	ldr	r3, [sp, #12]
 800eae8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800eaec:	0d1b      	lsrs	r3, r3, #20
 800eaee:	051b      	lsls	r3, r3, #20
 800eaf0:	b12b      	cbz	r3, 800eafe <_dtoa_r+0x7de>
 800eaf2:	9b08      	ldr	r3, [sp, #32]
 800eaf4:	3301      	adds	r3, #1
 800eaf6:	9308      	str	r3, [sp, #32]
 800eaf8:	f108 0801 	add.w	r8, r8, #1
 800eafc:	2301      	movs	r3, #1
 800eafe:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	f000 81b0 	beq.w	800ee68 <_dtoa_r+0xb48>
 800eb08:	6923      	ldr	r3, [r4, #16]
 800eb0a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800eb0e:	6918      	ldr	r0, [r3, #16]
 800eb10:	f000 fb06 	bl	800f120 <__hi0bits>
 800eb14:	f1c0 0020 	rsb	r0, r0, #32
 800eb18:	9b08      	ldr	r3, [sp, #32]
 800eb1a:	4418      	add	r0, r3
 800eb1c:	f010 001f 	ands.w	r0, r0, #31
 800eb20:	d077      	beq.n	800ec12 <_dtoa_r+0x8f2>
 800eb22:	f1c0 0320 	rsb	r3, r0, #32
 800eb26:	2b04      	cmp	r3, #4
 800eb28:	dd6b      	ble.n	800ec02 <_dtoa_r+0x8e2>
 800eb2a:	9b08      	ldr	r3, [sp, #32]
 800eb2c:	f1c0 001c 	rsb	r0, r0, #28
 800eb30:	4403      	add	r3, r0
 800eb32:	4480      	add	r8, r0
 800eb34:	4406      	add	r6, r0
 800eb36:	9308      	str	r3, [sp, #32]
 800eb38:	f1b8 0f00 	cmp.w	r8, #0
 800eb3c:	dd05      	ble.n	800eb4a <_dtoa_r+0x82a>
 800eb3e:	4649      	mov	r1, r9
 800eb40:	4642      	mov	r2, r8
 800eb42:	4658      	mov	r0, fp
 800eb44:	f000 fc52 	bl	800f3ec <__lshift>
 800eb48:	4681      	mov	r9, r0
 800eb4a:	9b08      	ldr	r3, [sp, #32]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	dd05      	ble.n	800eb5c <_dtoa_r+0x83c>
 800eb50:	4621      	mov	r1, r4
 800eb52:	461a      	mov	r2, r3
 800eb54:	4658      	mov	r0, fp
 800eb56:	f000 fc49 	bl	800f3ec <__lshift>
 800eb5a:	4604      	mov	r4, r0
 800eb5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d059      	beq.n	800ec16 <_dtoa_r+0x8f6>
 800eb62:	4621      	mov	r1, r4
 800eb64:	4648      	mov	r0, r9
 800eb66:	f000 fcad 	bl	800f4c4 <__mcmp>
 800eb6a:	2800      	cmp	r0, #0
 800eb6c:	da53      	bge.n	800ec16 <_dtoa_r+0x8f6>
 800eb6e:	1e7b      	subs	r3, r7, #1
 800eb70:	9304      	str	r3, [sp, #16]
 800eb72:	4649      	mov	r1, r9
 800eb74:	2300      	movs	r3, #0
 800eb76:	220a      	movs	r2, #10
 800eb78:	4658      	mov	r0, fp
 800eb7a:	f000 fa41 	bl	800f000 <__multadd>
 800eb7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb80:	4681      	mov	r9, r0
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	f000 8172 	beq.w	800ee6c <_dtoa_r+0xb4c>
 800eb88:	2300      	movs	r3, #0
 800eb8a:	4629      	mov	r1, r5
 800eb8c:	220a      	movs	r2, #10
 800eb8e:	4658      	mov	r0, fp
 800eb90:	f000 fa36 	bl	800f000 <__multadd>
 800eb94:	9b00      	ldr	r3, [sp, #0]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	4605      	mov	r5, r0
 800eb9a:	dc67      	bgt.n	800ec6c <_dtoa_r+0x94c>
 800eb9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb9e:	2b02      	cmp	r3, #2
 800eba0:	dc41      	bgt.n	800ec26 <_dtoa_r+0x906>
 800eba2:	e063      	b.n	800ec6c <_dtoa_r+0x94c>
 800eba4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800eba6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ebaa:	e746      	b.n	800ea3a <_dtoa_r+0x71a>
 800ebac:	9b07      	ldr	r3, [sp, #28]
 800ebae:	1e5c      	subs	r4, r3, #1
 800ebb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebb2:	42a3      	cmp	r3, r4
 800ebb4:	bfbf      	itttt	lt
 800ebb6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ebb8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ebba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ebbc:	1ae3      	sublt	r3, r4, r3
 800ebbe:	bfb4      	ite	lt
 800ebc0:	18d2      	addlt	r2, r2, r3
 800ebc2:	1b1c      	subge	r4, r3, r4
 800ebc4:	9b07      	ldr	r3, [sp, #28]
 800ebc6:	bfbc      	itt	lt
 800ebc8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ebca:	2400      	movlt	r4, #0
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	bfb5      	itete	lt
 800ebd0:	eba8 0603 	sublt.w	r6, r8, r3
 800ebd4:	9b07      	ldrge	r3, [sp, #28]
 800ebd6:	2300      	movlt	r3, #0
 800ebd8:	4646      	movge	r6, r8
 800ebda:	e730      	b.n	800ea3e <_dtoa_r+0x71e>
 800ebdc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ebde:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ebe0:	4646      	mov	r6, r8
 800ebe2:	e735      	b.n	800ea50 <_dtoa_r+0x730>
 800ebe4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ebe6:	e75c      	b.n	800eaa2 <_dtoa_r+0x782>
 800ebe8:	2300      	movs	r3, #0
 800ebea:	e788      	b.n	800eafe <_dtoa_r+0x7de>
 800ebec:	3fe00000 	.word	0x3fe00000
 800ebf0:	40240000 	.word	0x40240000
 800ebf4:	40140000 	.word	0x40140000
 800ebf8:	9b02      	ldr	r3, [sp, #8]
 800ebfa:	e780      	b.n	800eafe <_dtoa_r+0x7de>
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec00:	e782      	b.n	800eb08 <_dtoa_r+0x7e8>
 800ec02:	d099      	beq.n	800eb38 <_dtoa_r+0x818>
 800ec04:	9a08      	ldr	r2, [sp, #32]
 800ec06:	331c      	adds	r3, #28
 800ec08:	441a      	add	r2, r3
 800ec0a:	4498      	add	r8, r3
 800ec0c:	441e      	add	r6, r3
 800ec0e:	9208      	str	r2, [sp, #32]
 800ec10:	e792      	b.n	800eb38 <_dtoa_r+0x818>
 800ec12:	4603      	mov	r3, r0
 800ec14:	e7f6      	b.n	800ec04 <_dtoa_r+0x8e4>
 800ec16:	9b07      	ldr	r3, [sp, #28]
 800ec18:	9704      	str	r7, [sp, #16]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	dc20      	bgt.n	800ec60 <_dtoa_r+0x940>
 800ec1e:	9300      	str	r3, [sp, #0]
 800ec20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec22:	2b02      	cmp	r3, #2
 800ec24:	dd1e      	ble.n	800ec64 <_dtoa_r+0x944>
 800ec26:	9b00      	ldr	r3, [sp, #0]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	f47f aec0 	bne.w	800e9ae <_dtoa_r+0x68e>
 800ec2e:	4621      	mov	r1, r4
 800ec30:	2205      	movs	r2, #5
 800ec32:	4658      	mov	r0, fp
 800ec34:	f000 f9e4 	bl	800f000 <__multadd>
 800ec38:	4601      	mov	r1, r0
 800ec3a:	4604      	mov	r4, r0
 800ec3c:	4648      	mov	r0, r9
 800ec3e:	f000 fc41 	bl	800f4c4 <__mcmp>
 800ec42:	2800      	cmp	r0, #0
 800ec44:	f77f aeb3 	ble.w	800e9ae <_dtoa_r+0x68e>
 800ec48:	4656      	mov	r6, sl
 800ec4a:	2331      	movs	r3, #49	@ 0x31
 800ec4c:	f806 3b01 	strb.w	r3, [r6], #1
 800ec50:	9b04      	ldr	r3, [sp, #16]
 800ec52:	3301      	adds	r3, #1
 800ec54:	9304      	str	r3, [sp, #16]
 800ec56:	e6ae      	b.n	800e9b6 <_dtoa_r+0x696>
 800ec58:	9c07      	ldr	r4, [sp, #28]
 800ec5a:	9704      	str	r7, [sp, #16]
 800ec5c:	4625      	mov	r5, r4
 800ec5e:	e7f3      	b.n	800ec48 <_dtoa_r+0x928>
 800ec60:	9b07      	ldr	r3, [sp, #28]
 800ec62:	9300      	str	r3, [sp, #0]
 800ec64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	f000 8104 	beq.w	800ee74 <_dtoa_r+0xb54>
 800ec6c:	2e00      	cmp	r6, #0
 800ec6e:	dd05      	ble.n	800ec7c <_dtoa_r+0x95c>
 800ec70:	4629      	mov	r1, r5
 800ec72:	4632      	mov	r2, r6
 800ec74:	4658      	mov	r0, fp
 800ec76:	f000 fbb9 	bl	800f3ec <__lshift>
 800ec7a:	4605      	mov	r5, r0
 800ec7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d05a      	beq.n	800ed38 <_dtoa_r+0xa18>
 800ec82:	6869      	ldr	r1, [r5, #4]
 800ec84:	4658      	mov	r0, fp
 800ec86:	f000 f959 	bl	800ef3c <_Balloc>
 800ec8a:	4606      	mov	r6, r0
 800ec8c:	b928      	cbnz	r0, 800ec9a <_dtoa_r+0x97a>
 800ec8e:	4b84      	ldr	r3, [pc, #528]	@ (800eea0 <_dtoa_r+0xb80>)
 800ec90:	4602      	mov	r2, r0
 800ec92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ec96:	f7ff bb5a 	b.w	800e34e <_dtoa_r+0x2e>
 800ec9a:	692a      	ldr	r2, [r5, #16]
 800ec9c:	3202      	adds	r2, #2
 800ec9e:	0092      	lsls	r2, r2, #2
 800eca0:	f105 010c 	add.w	r1, r5, #12
 800eca4:	300c      	adds	r0, #12
 800eca6:	f7ff fa95 	bl	800e1d4 <memcpy>
 800ecaa:	2201      	movs	r2, #1
 800ecac:	4631      	mov	r1, r6
 800ecae:	4658      	mov	r0, fp
 800ecb0:	f000 fb9c 	bl	800f3ec <__lshift>
 800ecb4:	f10a 0301 	add.w	r3, sl, #1
 800ecb8:	9307      	str	r3, [sp, #28]
 800ecba:	9b00      	ldr	r3, [sp, #0]
 800ecbc:	4453      	add	r3, sl
 800ecbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ecc0:	9b02      	ldr	r3, [sp, #8]
 800ecc2:	f003 0301 	and.w	r3, r3, #1
 800ecc6:	462f      	mov	r7, r5
 800ecc8:	930a      	str	r3, [sp, #40]	@ 0x28
 800ecca:	4605      	mov	r5, r0
 800eccc:	9b07      	ldr	r3, [sp, #28]
 800ecce:	4621      	mov	r1, r4
 800ecd0:	3b01      	subs	r3, #1
 800ecd2:	4648      	mov	r0, r9
 800ecd4:	9300      	str	r3, [sp, #0]
 800ecd6:	f7ff fa98 	bl	800e20a <quorem>
 800ecda:	4639      	mov	r1, r7
 800ecdc:	9002      	str	r0, [sp, #8]
 800ecde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ece2:	4648      	mov	r0, r9
 800ece4:	f000 fbee 	bl	800f4c4 <__mcmp>
 800ece8:	462a      	mov	r2, r5
 800ecea:	9008      	str	r0, [sp, #32]
 800ecec:	4621      	mov	r1, r4
 800ecee:	4658      	mov	r0, fp
 800ecf0:	f000 fc04 	bl	800f4fc <__mdiff>
 800ecf4:	68c2      	ldr	r2, [r0, #12]
 800ecf6:	4606      	mov	r6, r0
 800ecf8:	bb02      	cbnz	r2, 800ed3c <_dtoa_r+0xa1c>
 800ecfa:	4601      	mov	r1, r0
 800ecfc:	4648      	mov	r0, r9
 800ecfe:	f000 fbe1 	bl	800f4c4 <__mcmp>
 800ed02:	4602      	mov	r2, r0
 800ed04:	4631      	mov	r1, r6
 800ed06:	4658      	mov	r0, fp
 800ed08:	920e      	str	r2, [sp, #56]	@ 0x38
 800ed0a:	f000 f957 	bl	800efbc <_Bfree>
 800ed0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed12:	9e07      	ldr	r6, [sp, #28]
 800ed14:	ea43 0102 	orr.w	r1, r3, r2
 800ed18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed1a:	4319      	orrs	r1, r3
 800ed1c:	d110      	bne.n	800ed40 <_dtoa_r+0xa20>
 800ed1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ed22:	d029      	beq.n	800ed78 <_dtoa_r+0xa58>
 800ed24:	9b08      	ldr	r3, [sp, #32]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	dd02      	ble.n	800ed30 <_dtoa_r+0xa10>
 800ed2a:	9b02      	ldr	r3, [sp, #8]
 800ed2c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ed30:	9b00      	ldr	r3, [sp, #0]
 800ed32:	f883 8000 	strb.w	r8, [r3]
 800ed36:	e63f      	b.n	800e9b8 <_dtoa_r+0x698>
 800ed38:	4628      	mov	r0, r5
 800ed3a:	e7bb      	b.n	800ecb4 <_dtoa_r+0x994>
 800ed3c:	2201      	movs	r2, #1
 800ed3e:	e7e1      	b.n	800ed04 <_dtoa_r+0x9e4>
 800ed40:	9b08      	ldr	r3, [sp, #32]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	db04      	blt.n	800ed50 <_dtoa_r+0xa30>
 800ed46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ed48:	430b      	orrs	r3, r1
 800ed4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ed4c:	430b      	orrs	r3, r1
 800ed4e:	d120      	bne.n	800ed92 <_dtoa_r+0xa72>
 800ed50:	2a00      	cmp	r2, #0
 800ed52:	dded      	ble.n	800ed30 <_dtoa_r+0xa10>
 800ed54:	4649      	mov	r1, r9
 800ed56:	2201      	movs	r2, #1
 800ed58:	4658      	mov	r0, fp
 800ed5a:	f000 fb47 	bl	800f3ec <__lshift>
 800ed5e:	4621      	mov	r1, r4
 800ed60:	4681      	mov	r9, r0
 800ed62:	f000 fbaf 	bl	800f4c4 <__mcmp>
 800ed66:	2800      	cmp	r0, #0
 800ed68:	dc03      	bgt.n	800ed72 <_dtoa_r+0xa52>
 800ed6a:	d1e1      	bne.n	800ed30 <_dtoa_r+0xa10>
 800ed6c:	f018 0f01 	tst.w	r8, #1
 800ed70:	d0de      	beq.n	800ed30 <_dtoa_r+0xa10>
 800ed72:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ed76:	d1d8      	bne.n	800ed2a <_dtoa_r+0xa0a>
 800ed78:	9a00      	ldr	r2, [sp, #0]
 800ed7a:	2339      	movs	r3, #57	@ 0x39
 800ed7c:	7013      	strb	r3, [r2, #0]
 800ed7e:	4633      	mov	r3, r6
 800ed80:	461e      	mov	r6, r3
 800ed82:	3b01      	subs	r3, #1
 800ed84:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ed88:	2a39      	cmp	r2, #57	@ 0x39
 800ed8a:	d052      	beq.n	800ee32 <_dtoa_r+0xb12>
 800ed8c:	3201      	adds	r2, #1
 800ed8e:	701a      	strb	r2, [r3, #0]
 800ed90:	e612      	b.n	800e9b8 <_dtoa_r+0x698>
 800ed92:	2a00      	cmp	r2, #0
 800ed94:	dd07      	ble.n	800eda6 <_dtoa_r+0xa86>
 800ed96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ed9a:	d0ed      	beq.n	800ed78 <_dtoa_r+0xa58>
 800ed9c:	9a00      	ldr	r2, [sp, #0]
 800ed9e:	f108 0301 	add.w	r3, r8, #1
 800eda2:	7013      	strb	r3, [r2, #0]
 800eda4:	e608      	b.n	800e9b8 <_dtoa_r+0x698>
 800eda6:	9b07      	ldr	r3, [sp, #28]
 800eda8:	9a07      	ldr	r2, [sp, #28]
 800edaa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800edae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800edb0:	4293      	cmp	r3, r2
 800edb2:	d028      	beq.n	800ee06 <_dtoa_r+0xae6>
 800edb4:	4649      	mov	r1, r9
 800edb6:	2300      	movs	r3, #0
 800edb8:	220a      	movs	r2, #10
 800edba:	4658      	mov	r0, fp
 800edbc:	f000 f920 	bl	800f000 <__multadd>
 800edc0:	42af      	cmp	r7, r5
 800edc2:	4681      	mov	r9, r0
 800edc4:	f04f 0300 	mov.w	r3, #0
 800edc8:	f04f 020a 	mov.w	r2, #10
 800edcc:	4639      	mov	r1, r7
 800edce:	4658      	mov	r0, fp
 800edd0:	d107      	bne.n	800ede2 <_dtoa_r+0xac2>
 800edd2:	f000 f915 	bl	800f000 <__multadd>
 800edd6:	4607      	mov	r7, r0
 800edd8:	4605      	mov	r5, r0
 800edda:	9b07      	ldr	r3, [sp, #28]
 800eddc:	3301      	adds	r3, #1
 800edde:	9307      	str	r3, [sp, #28]
 800ede0:	e774      	b.n	800eccc <_dtoa_r+0x9ac>
 800ede2:	f000 f90d 	bl	800f000 <__multadd>
 800ede6:	4629      	mov	r1, r5
 800ede8:	4607      	mov	r7, r0
 800edea:	2300      	movs	r3, #0
 800edec:	220a      	movs	r2, #10
 800edee:	4658      	mov	r0, fp
 800edf0:	f000 f906 	bl	800f000 <__multadd>
 800edf4:	4605      	mov	r5, r0
 800edf6:	e7f0      	b.n	800edda <_dtoa_r+0xaba>
 800edf8:	9b00      	ldr	r3, [sp, #0]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	bfcc      	ite	gt
 800edfe:	461e      	movgt	r6, r3
 800ee00:	2601      	movle	r6, #1
 800ee02:	4456      	add	r6, sl
 800ee04:	2700      	movs	r7, #0
 800ee06:	4649      	mov	r1, r9
 800ee08:	2201      	movs	r2, #1
 800ee0a:	4658      	mov	r0, fp
 800ee0c:	f000 faee 	bl	800f3ec <__lshift>
 800ee10:	4621      	mov	r1, r4
 800ee12:	4681      	mov	r9, r0
 800ee14:	f000 fb56 	bl	800f4c4 <__mcmp>
 800ee18:	2800      	cmp	r0, #0
 800ee1a:	dcb0      	bgt.n	800ed7e <_dtoa_r+0xa5e>
 800ee1c:	d102      	bne.n	800ee24 <_dtoa_r+0xb04>
 800ee1e:	f018 0f01 	tst.w	r8, #1
 800ee22:	d1ac      	bne.n	800ed7e <_dtoa_r+0xa5e>
 800ee24:	4633      	mov	r3, r6
 800ee26:	461e      	mov	r6, r3
 800ee28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee2c:	2a30      	cmp	r2, #48	@ 0x30
 800ee2e:	d0fa      	beq.n	800ee26 <_dtoa_r+0xb06>
 800ee30:	e5c2      	b.n	800e9b8 <_dtoa_r+0x698>
 800ee32:	459a      	cmp	sl, r3
 800ee34:	d1a4      	bne.n	800ed80 <_dtoa_r+0xa60>
 800ee36:	9b04      	ldr	r3, [sp, #16]
 800ee38:	3301      	adds	r3, #1
 800ee3a:	9304      	str	r3, [sp, #16]
 800ee3c:	2331      	movs	r3, #49	@ 0x31
 800ee3e:	f88a 3000 	strb.w	r3, [sl]
 800ee42:	e5b9      	b.n	800e9b8 <_dtoa_r+0x698>
 800ee44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ee46:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800eea4 <_dtoa_r+0xb84>
 800ee4a:	b11b      	cbz	r3, 800ee54 <_dtoa_r+0xb34>
 800ee4c:	f10a 0308 	add.w	r3, sl, #8
 800ee50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ee52:	6013      	str	r3, [r2, #0]
 800ee54:	4650      	mov	r0, sl
 800ee56:	b019      	add	sp, #100	@ 0x64
 800ee58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee5e:	2b01      	cmp	r3, #1
 800ee60:	f77f ae37 	ble.w	800ead2 <_dtoa_r+0x7b2>
 800ee64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee66:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee68:	2001      	movs	r0, #1
 800ee6a:	e655      	b.n	800eb18 <_dtoa_r+0x7f8>
 800ee6c:	9b00      	ldr	r3, [sp, #0]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	f77f aed6 	ble.w	800ec20 <_dtoa_r+0x900>
 800ee74:	4656      	mov	r6, sl
 800ee76:	4621      	mov	r1, r4
 800ee78:	4648      	mov	r0, r9
 800ee7a:	f7ff f9c6 	bl	800e20a <quorem>
 800ee7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ee82:	f806 8b01 	strb.w	r8, [r6], #1
 800ee86:	9b00      	ldr	r3, [sp, #0]
 800ee88:	eba6 020a 	sub.w	r2, r6, sl
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	ddb3      	ble.n	800edf8 <_dtoa_r+0xad8>
 800ee90:	4649      	mov	r1, r9
 800ee92:	2300      	movs	r3, #0
 800ee94:	220a      	movs	r2, #10
 800ee96:	4658      	mov	r0, fp
 800ee98:	f000 f8b2 	bl	800f000 <__multadd>
 800ee9c:	4681      	mov	r9, r0
 800ee9e:	e7ea      	b.n	800ee76 <_dtoa_r+0xb56>
 800eea0:	08012a5c 	.word	0x08012a5c
 800eea4:	080129e0 	.word	0x080129e0

0800eea8 <_free_r>:
 800eea8:	b538      	push	{r3, r4, r5, lr}
 800eeaa:	4605      	mov	r5, r0
 800eeac:	2900      	cmp	r1, #0
 800eeae:	d041      	beq.n	800ef34 <_free_r+0x8c>
 800eeb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eeb4:	1f0c      	subs	r4, r1, #4
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	bfb8      	it	lt
 800eeba:	18e4      	addlt	r4, r4, r3
 800eebc:	f7fd f9be 	bl	800c23c <__malloc_lock>
 800eec0:	4a1d      	ldr	r2, [pc, #116]	@ (800ef38 <_free_r+0x90>)
 800eec2:	6813      	ldr	r3, [r2, #0]
 800eec4:	b933      	cbnz	r3, 800eed4 <_free_r+0x2c>
 800eec6:	6063      	str	r3, [r4, #4]
 800eec8:	6014      	str	r4, [r2, #0]
 800eeca:	4628      	mov	r0, r5
 800eecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eed0:	f7fd b9ba 	b.w	800c248 <__malloc_unlock>
 800eed4:	42a3      	cmp	r3, r4
 800eed6:	d908      	bls.n	800eeea <_free_r+0x42>
 800eed8:	6820      	ldr	r0, [r4, #0]
 800eeda:	1821      	adds	r1, r4, r0
 800eedc:	428b      	cmp	r3, r1
 800eede:	bf01      	itttt	eq
 800eee0:	6819      	ldreq	r1, [r3, #0]
 800eee2:	685b      	ldreq	r3, [r3, #4]
 800eee4:	1809      	addeq	r1, r1, r0
 800eee6:	6021      	streq	r1, [r4, #0]
 800eee8:	e7ed      	b.n	800eec6 <_free_r+0x1e>
 800eeea:	461a      	mov	r2, r3
 800eeec:	685b      	ldr	r3, [r3, #4]
 800eeee:	b10b      	cbz	r3, 800eef4 <_free_r+0x4c>
 800eef0:	42a3      	cmp	r3, r4
 800eef2:	d9fa      	bls.n	800eeea <_free_r+0x42>
 800eef4:	6811      	ldr	r1, [r2, #0]
 800eef6:	1850      	adds	r0, r2, r1
 800eef8:	42a0      	cmp	r0, r4
 800eefa:	d10b      	bne.n	800ef14 <_free_r+0x6c>
 800eefc:	6820      	ldr	r0, [r4, #0]
 800eefe:	4401      	add	r1, r0
 800ef00:	1850      	adds	r0, r2, r1
 800ef02:	4283      	cmp	r3, r0
 800ef04:	6011      	str	r1, [r2, #0]
 800ef06:	d1e0      	bne.n	800eeca <_free_r+0x22>
 800ef08:	6818      	ldr	r0, [r3, #0]
 800ef0a:	685b      	ldr	r3, [r3, #4]
 800ef0c:	6053      	str	r3, [r2, #4]
 800ef0e:	4408      	add	r0, r1
 800ef10:	6010      	str	r0, [r2, #0]
 800ef12:	e7da      	b.n	800eeca <_free_r+0x22>
 800ef14:	d902      	bls.n	800ef1c <_free_r+0x74>
 800ef16:	230c      	movs	r3, #12
 800ef18:	602b      	str	r3, [r5, #0]
 800ef1a:	e7d6      	b.n	800eeca <_free_r+0x22>
 800ef1c:	6820      	ldr	r0, [r4, #0]
 800ef1e:	1821      	adds	r1, r4, r0
 800ef20:	428b      	cmp	r3, r1
 800ef22:	bf04      	itt	eq
 800ef24:	6819      	ldreq	r1, [r3, #0]
 800ef26:	685b      	ldreq	r3, [r3, #4]
 800ef28:	6063      	str	r3, [r4, #4]
 800ef2a:	bf04      	itt	eq
 800ef2c:	1809      	addeq	r1, r1, r0
 800ef2e:	6021      	streq	r1, [r4, #0]
 800ef30:	6054      	str	r4, [r2, #4]
 800ef32:	e7ca      	b.n	800eeca <_free_r+0x22>
 800ef34:	bd38      	pop	{r3, r4, r5, pc}
 800ef36:	bf00      	nop
 800ef38:	200021d4 	.word	0x200021d4

0800ef3c <_Balloc>:
 800ef3c:	b570      	push	{r4, r5, r6, lr}
 800ef3e:	69c6      	ldr	r6, [r0, #28]
 800ef40:	4604      	mov	r4, r0
 800ef42:	460d      	mov	r5, r1
 800ef44:	b976      	cbnz	r6, 800ef64 <_Balloc+0x28>
 800ef46:	2010      	movs	r0, #16
 800ef48:	f7fd f8c6 	bl	800c0d8 <malloc>
 800ef4c:	4602      	mov	r2, r0
 800ef4e:	61e0      	str	r0, [r4, #28]
 800ef50:	b920      	cbnz	r0, 800ef5c <_Balloc+0x20>
 800ef52:	4b18      	ldr	r3, [pc, #96]	@ (800efb4 <_Balloc+0x78>)
 800ef54:	4818      	ldr	r0, [pc, #96]	@ (800efb8 <_Balloc+0x7c>)
 800ef56:	216b      	movs	r1, #107	@ 0x6b
 800ef58:	f002 fa5a 	bl	8011410 <__assert_func>
 800ef5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef60:	6006      	str	r6, [r0, #0]
 800ef62:	60c6      	str	r6, [r0, #12]
 800ef64:	69e6      	ldr	r6, [r4, #28]
 800ef66:	68f3      	ldr	r3, [r6, #12]
 800ef68:	b183      	cbz	r3, 800ef8c <_Balloc+0x50>
 800ef6a:	69e3      	ldr	r3, [r4, #28]
 800ef6c:	68db      	ldr	r3, [r3, #12]
 800ef6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ef72:	b9b8      	cbnz	r0, 800efa4 <_Balloc+0x68>
 800ef74:	2101      	movs	r1, #1
 800ef76:	fa01 f605 	lsl.w	r6, r1, r5
 800ef7a:	1d72      	adds	r2, r6, #5
 800ef7c:	0092      	lsls	r2, r2, #2
 800ef7e:	4620      	mov	r0, r4
 800ef80:	f002 fa64 	bl	801144c <_calloc_r>
 800ef84:	b160      	cbz	r0, 800efa0 <_Balloc+0x64>
 800ef86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ef8a:	e00e      	b.n	800efaa <_Balloc+0x6e>
 800ef8c:	2221      	movs	r2, #33	@ 0x21
 800ef8e:	2104      	movs	r1, #4
 800ef90:	4620      	mov	r0, r4
 800ef92:	f002 fa5b 	bl	801144c <_calloc_r>
 800ef96:	69e3      	ldr	r3, [r4, #28]
 800ef98:	60f0      	str	r0, [r6, #12]
 800ef9a:	68db      	ldr	r3, [r3, #12]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d1e4      	bne.n	800ef6a <_Balloc+0x2e>
 800efa0:	2000      	movs	r0, #0
 800efa2:	bd70      	pop	{r4, r5, r6, pc}
 800efa4:	6802      	ldr	r2, [r0, #0]
 800efa6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800efaa:	2300      	movs	r3, #0
 800efac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800efb0:	e7f7      	b.n	800efa2 <_Balloc+0x66>
 800efb2:	bf00      	nop
 800efb4:	080129ed 	.word	0x080129ed
 800efb8:	08012a6d 	.word	0x08012a6d

0800efbc <_Bfree>:
 800efbc:	b570      	push	{r4, r5, r6, lr}
 800efbe:	69c6      	ldr	r6, [r0, #28]
 800efc0:	4605      	mov	r5, r0
 800efc2:	460c      	mov	r4, r1
 800efc4:	b976      	cbnz	r6, 800efe4 <_Bfree+0x28>
 800efc6:	2010      	movs	r0, #16
 800efc8:	f7fd f886 	bl	800c0d8 <malloc>
 800efcc:	4602      	mov	r2, r0
 800efce:	61e8      	str	r0, [r5, #28]
 800efd0:	b920      	cbnz	r0, 800efdc <_Bfree+0x20>
 800efd2:	4b09      	ldr	r3, [pc, #36]	@ (800eff8 <_Bfree+0x3c>)
 800efd4:	4809      	ldr	r0, [pc, #36]	@ (800effc <_Bfree+0x40>)
 800efd6:	218f      	movs	r1, #143	@ 0x8f
 800efd8:	f002 fa1a 	bl	8011410 <__assert_func>
 800efdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800efe0:	6006      	str	r6, [r0, #0]
 800efe2:	60c6      	str	r6, [r0, #12]
 800efe4:	b13c      	cbz	r4, 800eff6 <_Bfree+0x3a>
 800efe6:	69eb      	ldr	r3, [r5, #28]
 800efe8:	6862      	ldr	r2, [r4, #4]
 800efea:	68db      	ldr	r3, [r3, #12]
 800efec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eff0:	6021      	str	r1, [r4, #0]
 800eff2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eff6:	bd70      	pop	{r4, r5, r6, pc}
 800eff8:	080129ed 	.word	0x080129ed
 800effc:	08012a6d 	.word	0x08012a6d

0800f000 <__multadd>:
 800f000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f004:	690d      	ldr	r5, [r1, #16]
 800f006:	4607      	mov	r7, r0
 800f008:	460c      	mov	r4, r1
 800f00a:	461e      	mov	r6, r3
 800f00c:	f101 0c14 	add.w	ip, r1, #20
 800f010:	2000      	movs	r0, #0
 800f012:	f8dc 3000 	ldr.w	r3, [ip]
 800f016:	b299      	uxth	r1, r3
 800f018:	fb02 6101 	mla	r1, r2, r1, r6
 800f01c:	0c1e      	lsrs	r6, r3, #16
 800f01e:	0c0b      	lsrs	r3, r1, #16
 800f020:	fb02 3306 	mla	r3, r2, r6, r3
 800f024:	b289      	uxth	r1, r1
 800f026:	3001      	adds	r0, #1
 800f028:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f02c:	4285      	cmp	r5, r0
 800f02e:	f84c 1b04 	str.w	r1, [ip], #4
 800f032:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f036:	dcec      	bgt.n	800f012 <__multadd+0x12>
 800f038:	b30e      	cbz	r6, 800f07e <__multadd+0x7e>
 800f03a:	68a3      	ldr	r3, [r4, #8]
 800f03c:	42ab      	cmp	r3, r5
 800f03e:	dc19      	bgt.n	800f074 <__multadd+0x74>
 800f040:	6861      	ldr	r1, [r4, #4]
 800f042:	4638      	mov	r0, r7
 800f044:	3101      	adds	r1, #1
 800f046:	f7ff ff79 	bl	800ef3c <_Balloc>
 800f04a:	4680      	mov	r8, r0
 800f04c:	b928      	cbnz	r0, 800f05a <__multadd+0x5a>
 800f04e:	4602      	mov	r2, r0
 800f050:	4b0c      	ldr	r3, [pc, #48]	@ (800f084 <__multadd+0x84>)
 800f052:	480d      	ldr	r0, [pc, #52]	@ (800f088 <__multadd+0x88>)
 800f054:	21ba      	movs	r1, #186	@ 0xba
 800f056:	f002 f9db 	bl	8011410 <__assert_func>
 800f05a:	6922      	ldr	r2, [r4, #16]
 800f05c:	3202      	adds	r2, #2
 800f05e:	f104 010c 	add.w	r1, r4, #12
 800f062:	0092      	lsls	r2, r2, #2
 800f064:	300c      	adds	r0, #12
 800f066:	f7ff f8b5 	bl	800e1d4 <memcpy>
 800f06a:	4621      	mov	r1, r4
 800f06c:	4638      	mov	r0, r7
 800f06e:	f7ff ffa5 	bl	800efbc <_Bfree>
 800f072:	4644      	mov	r4, r8
 800f074:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f078:	3501      	adds	r5, #1
 800f07a:	615e      	str	r6, [r3, #20]
 800f07c:	6125      	str	r5, [r4, #16]
 800f07e:	4620      	mov	r0, r4
 800f080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f084:	08012a5c 	.word	0x08012a5c
 800f088:	08012a6d 	.word	0x08012a6d

0800f08c <__s2b>:
 800f08c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f090:	460c      	mov	r4, r1
 800f092:	4615      	mov	r5, r2
 800f094:	461f      	mov	r7, r3
 800f096:	2209      	movs	r2, #9
 800f098:	3308      	adds	r3, #8
 800f09a:	4606      	mov	r6, r0
 800f09c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f0a0:	2100      	movs	r1, #0
 800f0a2:	2201      	movs	r2, #1
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	db09      	blt.n	800f0bc <__s2b+0x30>
 800f0a8:	4630      	mov	r0, r6
 800f0aa:	f7ff ff47 	bl	800ef3c <_Balloc>
 800f0ae:	b940      	cbnz	r0, 800f0c2 <__s2b+0x36>
 800f0b0:	4602      	mov	r2, r0
 800f0b2:	4b19      	ldr	r3, [pc, #100]	@ (800f118 <__s2b+0x8c>)
 800f0b4:	4819      	ldr	r0, [pc, #100]	@ (800f11c <__s2b+0x90>)
 800f0b6:	21d3      	movs	r1, #211	@ 0xd3
 800f0b8:	f002 f9aa 	bl	8011410 <__assert_func>
 800f0bc:	0052      	lsls	r2, r2, #1
 800f0be:	3101      	adds	r1, #1
 800f0c0:	e7f0      	b.n	800f0a4 <__s2b+0x18>
 800f0c2:	9b08      	ldr	r3, [sp, #32]
 800f0c4:	6143      	str	r3, [r0, #20]
 800f0c6:	2d09      	cmp	r5, #9
 800f0c8:	f04f 0301 	mov.w	r3, #1
 800f0cc:	6103      	str	r3, [r0, #16]
 800f0ce:	dd16      	ble.n	800f0fe <__s2b+0x72>
 800f0d0:	f104 0909 	add.w	r9, r4, #9
 800f0d4:	46c8      	mov	r8, r9
 800f0d6:	442c      	add	r4, r5
 800f0d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f0dc:	4601      	mov	r1, r0
 800f0de:	3b30      	subs	r3, #48	@ 0x30
 800f0e0:	220a      	movs	r2, #10
 800f0e2:	4630      	mov	r0, r6
 800f0e4:	f7ff ff8c 	bl	800f000 <__multadd>
 800f0e8:	45a0      	cmp	r8, r4
 800f0ea:	d1f5      	bne.n	800f0d8 <__s2b+0x4c>
 800f0ec:	f1a5 0408 	sub.w	r4, r5, #8
 800f0f0:	444c      	add	r4, r9
 800f0f2:	1b2d      	subs	r5, r5, r4
 800f0f4:	1963      	adds	r3, r4, r5
 800f0f6:	42bb      	cmp	r3, r7
 800f0f8:	db04      	blt.n	800f104 <__s2b+0x78>
 800f0fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0fe:	340a      	adds	r4, #10
 800f100:	2509      	movs	r5, #9
 800f102:	e7f6      	b.n	800f0f2 <__s2b+0x66>
 800f104:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f108:	4601      	mov	r1, r0
 800f10a:	3b30      	subs	r3, #48	@ 0x30
 800f10c:	220a      	movs	r2, #10
 800f10e:	4630      	mov	r0, r6
 800f110:	f7ff ff76 	bl	800f000 <__multadd>
 800f114:	e7ee      	b.n	800f0f4 <__s2b+0x68>
 800f116:	bf00      	nop
 800f118:	08012a5c 	.word	0x08012a5c
 800f11c:	08012a6d 	.word	0x08012a6d

0800f120 <__hi0bits>:
 800f120:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f124:	4603      	mov	r3, r0
 800f126:	bf36      	itet	cc
 800f128:	0403      	lslcc	r3, r0, #16
 800f12a:	2000      	movcs	r0, #0
 800f12c:	2010      	movcc	r0, #16
 800f12e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f132:	bf3c      	itt	cc
 800f134:	021b      	lslcc	r3, r3, #8
 800f136:	3008      	addcc	r0, #8
 800f138:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f13c:	bf3c      	itt	cc
 800f13e:	011b      	lslcc	r3, r3, #4
 800f140:	3004      	addcc	r0, #4
 800f142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f146:	bf3c      	itt	cc
 800f148:	009b      	lslcc	r3, r3, #2
 800f14a:	3002      	addcc	r0, #2
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	db05      	blt.n	800f15c <__hi0bits+0x3c>
 800f150:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f154:	f100 0001 	add.w	r0, r0, #1
 800f158:	bf08      	it	eq
 800f15a:	2020      	moveq	r0, #32
 800f15c:	4770      	bx	lr

0800f15e <__lo0bits>:
 800f15e:	6803      	ldr	r3, [r0, #0]
 800f160:	4602      	mov	r2, r0
 800f162:	f013 0007 	ands.w	r0, r3, #7
 800f166:	d00b      	beq.n	800f180 <__lo0bits+0x22>
 800f168:	07d9      	lsls	r1, r3, #31
 800f16a:	d421      	bmi.n	800f1b0 <__lo0bits+0x52>
 800f16c:	0798      	lsls	r0, r3, #30
 800f16e:	bf49      	itett	mi
 800f170:	085b      	lsrmi	r3, r3, #1
 800f172:	089b      	lsrpl	r3, r3, #2
 800f174:	2001      	movmi	r0, #1
 800f176:	6013      	strmi	r3, [r2, #0]
 800f178:	bf5c      	itt	pl
 800f17a:	6013      	strpl	r3, [r2, #0]
 800f17c:	2002      	movpl	r0, #2
 800f17e:	4770      	bx	lr
 800f180:	b299      	uxth	r1, r3
 800f182:	b909      	cbnz	r1, 800f188 <__lo0bits+0x2a>
 800f184:	0c1b      	lsrs	r3, r3, #16
 800f186:	2010      	movs	r0, #16
 800f188:	b2d9      	uxtb	r1, r3
 800f18a:	b909      	cbnz	r1, 800f190 <__lo0bits+0x32>
 800f18c:	3008      	adds	r0, #8
 800f18e:	0a1b      	lsrs	r3, r3, #8
 800f190:	0719      	lsls	r1, r3, #28
 800f192:	bf04      	itt	eq
 800f194:	091b      	lsreq	r3, r3, #4
 800f196:	3004      	addeq	r0, #4
 800f198:	0799      	lsls	r1, r3, #30
 800f19a:	bf04      	itt	eq
 800f19c:	089b      	lsreq	r3, r3, #2
 800f19e:	3002      	addeq	r0, #2
 800f1a0:	07d9      	lsls	r1, r3, #31
 800f1a2:	d403      	bmi.n	800f1ac <__lo0bits+0x4e>
 800f1a4:	085b      	lsrs	r3, r3, #1
 800f1a6:	f100 0001 	add.w	r0, r0, #1
 800f1aa:	d003      	beq.n	800f1b4 <__lo0bits+0x56>
 800f1ac:	6013      	str	r3, [r2, #0]
 800f1ae:	4770      	bx	lr
 800f1b0:	2000      	movs	r0, #0
 800f1b2:	4770      	bx	lr
 800f1b4:	2020      	movs	r0, #32
 800f1b6:	4770      	bx	lr

0800f1b8 <__i2b>:
 800f1b8:	b510      	push	{r4, lr}
 800f1ba:	460c      	mov	r4, r1
 800f1bc:	2101      	movs	r1, #1
 800f1be:	f7ff febd 	bl	800ef3c <_Balloc>
 800f1c2:	4602      	mov	r2, r0
 800f1c4:	b928      	cbnz	r0, 800f1d2 <__i2b+0x1a>
 800f1c6:	4b05      	ldr	r3, [pc, #20]	@ (800f1dc <__i2b+0x24>)
 800f1c8:	4805      	ldr	r0, [pc, #20]	@ (800f1e0 <__i2b+0x28>)
 800f1ca:	f240 1145 	movw	r1, #325	@ 0x145
 800f1ce:	f002 f91f 	bl	8011410 <__assert_func>
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	6144      	str	r4, [r0, #20]
 800f1d6:	6103      	str	r3, [r0, #16]
 800f1d8:	bd10      	pop	{r4, pc}
 800f1da:	bf00      	nop
 800f1dc:	08012a5c 	.word	0x08012a5c
 800f1e0:	08012a6d 	.word	0x08012a6d

0800f1e4 <__multiply>:
 800f1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1e8:	4614      	mov	r4, r2
 800f1ea:	690a      	ldr	r2, [r1, #16]
 800f1ec:	6923      	ldr	r3, [r4, #16]
 800f1ee:	429a      	cmp	r2, r3
 800f1f0:	bfa8      	it	ge
 800f1f2:	4623      	movge	r3, r4
 800f1f4:	460f      	mov	r7, r1
 800f1f6:	bfa4      	itt	ge
 800f1f8:	460c      	movge	r4, r1
 800f1fa:	461f      	movge	r7, r3
 800f1fc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f200:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f204:	68a3      	ldr	r3, [r4, #8]
 800f206:	6861      	ldr	r1, [r4, #4]
 800f208:	eb0a 0609 	add.w	r6, sl, r9
 800f20c:	42b3      	cmp	r3, r6
 800f20e:	b085      	sub	sp, #20
 800f210:	bfb8      	it	lt
 800f212:	3101      	addlt	r1, #1
 800f214:	f7ff fe92 	bl	800ef3c <_Balloc>
 800f218:	b930      	cbnz	r0, 800f228 <__multiply+0x44>
 800f21a:	4602      	mov	r2, r0
 800f21c:	4b44      	ldr	r3, [pc, #272]	@ (800f330 <__multiply+0x14c>)
 800f21e:	4845      	ldr	r0, [pc, #276]	@ (800f334 <__multiply+0x150>)
 800f220:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f224:	f002 f8f4 	bl	8011410 <__assert_func>
 800f228:	f100 0514 	add.w	r5, r0, #20
 800f22c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f230:	462b      	mov	r3, r5
 800f232:	2200      	movs	r2, #0
 800f234:	4543      	cmp	r3, r8
 800f236:	d321      	bcc.n	800f27c <__multiply+0x98>
 800f238:	f107 0114 	add.w	r1, r7, #20
 800f23c:	f104 0214 	add.w	r2, r4, #20
 800f240:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f244:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f248:	9302      	str	r3, [sp, #8]
 800f24a:	1b13      	subs	r3, r2, r4
 800f24c:	3b15      	subs	r3, #21
 800f24e:	f023 0303 	bic.w	r3, r3, #3
 800f252:	3304      	adds	r3, #4
 800f254:	f104 0715 	add.w	r7, r4, #21
 800f258:	42ba      	cmp	r2, r7
 800f25a:	bf38      	it	cc
 800f25c:	2304      	movcc	r3, #4
 800f25e:	9301      	str	r3, [sp, #4]
 800f260:	9b02      	ldr	r3, [sp, #8]
 800f262:	9103      	str	r1, [sp, #12]
 800f264:	428b      	cmp	r3, r1
 800f266:	d80c      	bhi.n	800f282 <__multiply+0x9e>
 800f268:	2e00      	cmp	r6, #0
 800f26a:	dd03      	ble.n	800f274 <__multiply+0x90>
 800f26c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f270:	2b00      	cmp	r3, #0
 800f272:	d05b      	beq.n	800f32c <__multiply+0x148>
 800f274:	6106      	str	r6, [r0, #16]
 800f276:	b005      	add	sp, #20
 800f278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f27c:	f843 2b04 	str.w	r2, [r3], #4
 800f280:	e7d8      	b.n	800f234 <__multiply+0x50>
 800f282:	f8b1 a000 	ldrh.w	sl, [r1]
 800f286:	f1ba 0f00 	cmp.w	sl, #0
 800f28a:	d024      	beq.n	800f2d6 <__multiply+0xf2>
 800f28c:	f104 0e14 	add.w	lr, r4, #20
 800f290:	46a9      	mov	r9, r5
 800f292:	f04f 0c00 	mov.w	ip, #0
 800f296:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f29a:	f8d9 3000 	ldr.w	r3, [r9]
 800f29e:	fa1f fb87 	uxth.w	fp, r7
 800f2a2:	b29b      	uxth	r3, r3
 800f2a4:	fb0a 330b 	mla	r3, sl, fp, r3
 800f2a8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f2ac:	f8d9 7000 	ldr.w	r7, [r9]
 800f2b0:	4463      	add	r3, ip
 800f2b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f2b6:	fb0a c70b 	mla	r7, sl, fp, ip
 800f2ba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f2be:	b29b      	uxth	r3, r3
 800f2c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f2c4:	4572      	cmp	r2, lr
 800f2c6:	f849 3b04 	str.w	r3, [r9], #4
 800f2ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f2ce:	d8e2      	bhi.n	800f296 <__multiply+0xb2>
 800f2d0:	9b01      	ldr	r3, [sp, #4]
 800f2d2:	f845 c003 	str.w	ip, [r5, r3]
 800f2d6:	9b03      	ldr	r3, [sp, #12]
 800f2d8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f2dc:	3104      	adds	r1, #4
 800f2de:	f1b9 0f00 	cmp.w	r9, #0
 800f2e2:	d021      	beq.n	800f328 <__multiply+0x144>
 800f2e4:	682b      	ldr	r3, [r5, #0]
 800f2e6:	f104 0c14 	add.w	ip, r4, #20
 800f2ea:	46ae      	mov	lr, r5
 800f2ec:	f04f 0a00 	mov.w	sl, #0
 800f2f0:	f8bc b000 	ldrh.w	fp, [ip]
 800f2f4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f2f8:	fb09 770b 	mla	r7, r9, fp, r7
 800f2fc:	4457      	add	r7, sl
 800f2fe:	b29b      	uxth	r3, r3
 800f300:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f304:	f84e 3b04 	str.w	r3, [lr], #4
 800f308:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f30c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f310:	f8be 3000 	ldrh.w	r3, [lr]
 800f314:	fb09 330a 	mla	r3, r9, sl, r3
 800f318:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f31c:	4562      	cmp	r2, ip
 800f31e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f322:	d8e5      	bhi.n	800f2f0 <__multiply+0x10c>
 800f324:	9f01      	ldr	r7, [sp, #4]
 800f326:	51eb      	str	r3, [r5, r7]
 800f328:	3504      	adds	r5, #4
 800f32a:	e799      	b.n	800f260 <__multiply+0x7c>
 800f32c:	3e01      	subs	r6, #1
 800f32e:	e79b      	b.n	800f268 <__multiply+0x84>
 800f330:	08012a5c 	.word	0x08012a5c
 800f334:	08012a6d 	.word	0x08012a6d

0800f338 <__pow5mult>:
 800f338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f33c:	4615      	mov	r5, r2
 800f33e:	f012 0203 	ands.w	r2, r2, #3
 800f342:	4607      	mov	r7, r0
 800f344:	460e      	mov	r6, r1
 800f346:	d007      	beq.n	800f358 <__pow5mult+0x20>
 800f348:	4c25      	ldr	r4, [pc, #148]	@ (800f3e0 <__pow5mult+0xa8>)
 800f34a:	3a01      	subs	r2, #1
 800f34c:	2300      	movs	r3, #0
 800f34e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f352:	f7ff fe55 	bl	800f000 <__multadd>
 800f356:	4606      	mov	r6, r0
 800f358:	10ad      	asrs	r5, r5, #2
 800f35a:	d03d      	beq.n	800f3d8 <__pow5mult+0xa0>
 800f35c:	69fc      	ldr	r4, [r7, #28]
 800f35e:	b97c      	cbnz	r4, 800f380 <__pow5mult+0x48>
 800f360:	2010      	movs	r0, #16
 800f362:	f7fc feb9 	bl	800c0d8 <malloc>
 800f366:	4602      	mov	r2, r0
 800f368:	61f8      	str	r0, [r7, #28]
 800f36a:	b928      	cbnz	r0, 800f378 <__pow5mult+0x40>
 800f36c:	4b1d      	ldr	r3, [pc, #116]	@ (800f3e4 <__pow5mult+0xac>)
 800f36e:	481e      	ldr	r0, [pc, #120]	@ (800f3e8 <__pow5mult+0xb0>)
 800f370:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f374:	f002 f84c 	bl	8011410 <__assert_func>
 800f378:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f37c:	6004      	str	r4, [r0, #0]
 800f37e:	60c4      	str	r4, [r0, #12]
 800f380:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f384:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f388:	b94c      	cbnz	r4, 800f39e <__pow5mult+0x66>
 800f38a:	f240 2171 	movw	r1, #625	@ 0x271
 800f38e:	4638      	mov	r0, r7
 800f390:	f7ff ff12 	bl	800f1b8 <__i2b>
 800f394:	2300      	movs	r3, #0
 800f396:	f8c8 0008 	str.w	r0, [r8, #8]
 800f39a:	4604      	mov	r4, r0
 800f39c:	6003      	str	r3, [r0, #0]
 800f39e:	f04f 0900 	mov.w	r9, #0
 800f3a2:	07eb      	lsls	r3, r5, #31
 800f3a4:	d50a      	bpl.n	800f3bc <__pow5mult+0x84>
 800f3a6:	4631      	mov	r1, r6
 800f3a8:	4622      	mov	r2, r4
 800f3aa:	4638      	mov	r0, r7
 800f3ac:	f7ff ff1a 	bl	800f1e4 <__multiply>
 800f3b0:	4631      	mov	r1, r6
 800f3b2:	4680      	mov	r8, r0
 800f3b4:	4638      	mov	r0, r7
 800f3b6:	f7ff fe01 	bl	800efbc <_Bfree>
 800f3ba:	4646      	mov	r6, r8
 800f3bc:	106d      	asrs	r5, r5, #1
 800f3be:	d00b      	beq.n	800f3d8 <__pow5mult+0xa0>
 800f3c0:	6820      	ldr	r0, [r4, #0]
 800f3c2:	b938      	cbnz	r0, 800f3d4 <__pow5mult+0x9c>
 800f3c4:	4622      	mov	r2, r4
 800f3c6:	4621      	mov	r1, r4
 800f3c8:	4638      	mov	r0, r7
 800f3ca:	f7ff ff0b 	bl	800f1e4 <__multiply>
 800f3ce:	6020      	str	r0, [r4, #0]
 800f3d0:	f8c0 9000 	str.w	r9, [r0]
 800f3d4:	4604      	mov	r4, r0
 800f3d6:	e7e4      	b.n	800f3a2 <__pow5mult+0x6a>
 800f3d8:	4630      	mov	r0, r6
 800f3da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3de:	bf00      	nop
 800f3e0:	08012ac8 	.word	0x08012ac8
 800f3e4:	080129ed 	.word	0x080129ed
 800f3e8:	08012a6d 	.word	0x08012a6d

0800f3ec <__lshift>:
 800f3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3f0:	460c      	mov	r4, r1
 800f3f2:	6849      	ldr	r1, [r1, #4]
 800f3f4:	6923      	ldr	r3, [r4, #16]
 800f3f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f3fa:	68a3      	ldr	r3, [r4, #8]
 800f3fc:	4607      	mov	r7, r0
 800f3fe:	4691      	mov	r9, r2
 800f400:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f404:	f108 0601 	add.w	r6, r8, #1
 800f408:	42b3      	cmp	r3, r6
 800f40a:	db0b      	blt.n	800f424 <__lshift+0x38>
 800f40c:	4638      	mov	r0, r7
 800f40e:	f7ff fd95 	bl	800ef3c <_Balloc>
 800f412:	4605      	mov	r5, r0
 800f414:	b948      	cbnz	r0, 800f42a <__lshift+0x3e>
 800f416:	4602      	mov	r2, r0
 800f418:	4b28      	ldr	r3, [pc, #160]	@ (800f4bc <__lshift+0xd0>)
 800f41a:	4829      	ldr	r0, [pc, #164]	@ (800f4c0 <__lshift+0xd4>)
 800f41c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f420:	f001 fff6 	bl	8011410 <__assert_func>
 800f424:	3101      	adds	r1, #1
 800f426:	005b      	lsls	r3, r3, #1
 800f428:	e7ee      	b.n	800f408 <__lshift+0x1c>
 800f42a:	2300      	movs	r3, #0
 800f42c:	f100 0114 	add.w	r1, r0, #20
 800f430:	f100 0210 	add.w	r2, r0, #16
 800f434:	4618      	mov	r0, r3
 800f436:	4553      	cmp	r3, sl
 800f438:	db33      	blt.n	800f4a2 <__lshift+0xb6>
 800f43a:	6920      	ldr	r0, [r4, #16]
 800f43c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f440:	f104 0314 	add.w	r3, r4, #20
 800f444:	f019 091f 	ands.w	r9, r9, #31
 800f448:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f44c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f450:	d02b      	beq.n	800f4aa <__lshift+0xbe>
 800f452:	f1c9 0e20 	rsb	lr, r9, #32
 800f456:	468a      	mov	sl, r1
 800f458:	2200      	movs	r2, #0
 800f45a:	6818      	ldr	r0, [r3, #0]
 800f45c:	fa00 f009 	lsl.w	r0, r0, r9
 800f460:	4310      	orrs	r0, r2
 800f462:	f84a 0b04 	str.w	r0, [sl], #4
 800f466:	f853 2b04 	ldr.w	r2, [r3], #4
 800f46a:	459c      	cmp	ip, r3
 800f46c:	fa22 f20e 	lsr.w	r2, r2, lr
 800f470:	d8f3      	bhi.n	800f45a <__lshift+0x6e>
 800f472:	ebac 0304 	sub.w	r3, ip, r4
 800f476:	3b15      	subs	r3, #21
 800f478:	f023 0303 	bic.w	r3, r3, #3
 800f47c:	3304      	adds	r3, #4
 800f47e:	f104 0015 	add.w	r0, r4, #21
 800f482:	4584      	cmp	ip, r0
 800f484:	bf38      	it	cc
 800f486:	2304      	movcc	r3, #4
 800f488:	50ca      	str	r2, [r1, r3]
 800f48a:	b10a      	cbz	r2, 800f490 <__lshift+0xa4>
 800f48c:	f108 0602 	add.w	r6, r8, #2
 800f490:	3e01      	subs	r6, #1
 800f492:	4638      	mov	r0, r7
 800f494:	612e      	str	r6, [r5, #16]
 800f496:	4621      	mov	r1, r4
 800f498:	f7ff fd90 	bl	800efbc <_Bfree>
 800f49c:	4628      	mov	r0, r5
 800f49e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	e7c5      	b.n	800f436 <__lshift+0x4a>
 800f4aa:	3904      	subs	r1, #4
 800f4ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800f4b4:	459c      	cmp	ip, r3
 800f4b6:	d8f9      	bhi.n	800f4ac <__lshift+0xc0>
 800f4b8:	e7ea      	b.n	800f490 <__lshift+0xa4>
 800f4ba:	bf00      	nop
 800f4bc:	08012a5c 	.word	0x08012a5c
 800f4c0:	08012a6d 	.word	0x08012a6d

0800f4c4 <__mcmp>:
 800f4c4:	690a      	ldr	r2, [r1, #16]
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	6900      	ldr	r0, [r0, #16]
 800f4ca:	1a80      	subs	r0, r0, r2
 800f4cc:	b530      	push	{r4, r5, lr}
 800f4ce:	d10e      	bne.n	800f4ee <__mcmp+0x2a>
 800f4d0:	3314      	adds	r3, #20
 800f4d2:	3114      	adds	r1, #20
 800f4d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f4d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f4dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f4e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f4e4:	4295      	cmp	r5, r2
 800f4e6:	d003      	beq.n	800f4f0 <__mcmp+0x2c>
 800f4e8:	d205      	bcs.n	800f4f6 <__mcmp+0x32>
 800f4ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f4ee:	bd30      	pop	{r4, r5, pc}
 800f4f0:	42a3      	cmp	r3, r4
 800f4f2:	d3f3      	bcc.n	800f4dc <__mcmp+0x18>
 800f4f4:	e7fb      	b.n	800f4ee <__mcmp+0x2a>
 800f4f6:	2001      	movs	r0, #1
 800f4f8:	e7f9      	b.n	800f4ee <__mcmp+0x2a>
	...

0800f4fc <__mdiff>:
 800f4fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f500:	4689      	mov	r9, r1
 800f502:	4606      	mov	r6, r0
 800f504:	4611      	mov	r1, r2
 800f506:	4648      	mov	r0, r9
 800f508:	4614      	mov	r4, r2
 800f50a:	f7ff ffdb 	bl	800f4c4 <__mcmp>
 800f50e:	1e05      	subs	r5, r0, #0
 800f510:	d112      	bne.n	800f538 <__mdiff+0x3c>
 800f512:	4629      	mov	r1, r5
 800f514:	4630      	mov	r0, r6
 800f516:	f7ff fd11 	bl	800ef3c <_Balloc>
 800f51a:	4602      	mov	r2, r0
 800f51c:	b928      	cbnz	r0, 800f52a <__mdiff+0x2e>
 800f51e:	4b3f      	ldr	r3, [pc, #252]	@ (800f61c <__mdiff+0x120>)
 800f520:	f240 2137 	movw	r1, #567	@ 0x237
 800f524:	483e      	ldr	r0, [pc, #248]	@ (800f620 <__mdiff+0x124>)
 800f526:	f001 ff73 	bl	8011410 <__assert_func>
 800f52a:	2301      	movs	r3, #1
 800f52c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f530:	4610      	mov	r0, r2
 800f532:	b003      	add	sp, #12
 800f534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f538:	bfbc      	itt	lt
 800f53a:	464b      	movlt	r3, r9
 800f53c:	46a1      	movlt	r9, r4
 800f53e:	4630      	mov	r0, r6
 800f540:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f544:	bfba      	itte	lt
 800f546:	461c      	movlt	r4, r3
 800f548:	2501      	movlt	r5, #1
 800f54a:	2500      	movge	r5, #0
 800f54c:	f7ff fcf6 	bl	800ef3c <_Balloc>
 800f550:	4602      	mov	r2, r0
 800f552:	b918      	cbnz	r0, 800f55c <__mdiff+0x60>
 800f554:	4b31      	ldr	r3, [pc, #196]	@ (800f61c <__mdiff+0x120>)
 800f556:	f240 2145 	movw	r1, #581	@ 0x245
 800f55a:	e7e3      	b.n	800f524 <__mdiff+0x28>
 800f55c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f560:	6926      	ldr	r6, [r4, #16]
 800f562:	60c5      	str	r5, [r0, #12]
 800f564:	f109 0310 	add.w	r3, r9, #16
 800f568:	f109 0514 	add.w	r5, r9, #20
 800f56c:	f104 0e14 	add.w	lr, r4, #20
 800f570:	f100 0b14 	add.w	fp, r0, #20
 800f574:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f578:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f57c:	9301      	str	r3, [sp, #4]
 800f57e:	46d9      	mov	r9, fp
 800f580:	f04f 0c00 	mov.w	ip, #0
 800f584:	9b01      	ldr	r3, [sp, #4]
 800f586:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f58a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f58e:	9301      	str	r3, [sp, #4]
 800f590:	fa1f f38a 	uxth.w	r3, sl
 800f594:	4619      	mov	r1, r3
 800f596:	b283      	uxth	r3, r0
 800f598:	1acb      	subs	r3, r1, r3
 800f59a:	0c00      	lsrs	r0, r0, #16
 800f59c:	4463      	add	r3, ip
 800f59e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f5a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f5a6:	b29b      	uxth	r3, r3
 800f5a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f5ac:	4576      	cmp	r6, lr
 800f5ae:	f849 3b04 	str.w	r3, [r9], #4
 800f5b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f5b6:	d8e5      	bhi.n	800f584 <__mdiff+0x88>
 800f5b8:	1b33      	subs	r3, r6, r4
 800f5ba:	3b15      	subs	r3, #21
 800f5bc:	f023 0303 	bic.w	r3, r3, #3
 800f5c0:	3415      	adds	r4, #21
 800f5c2:	3304      	adds	r3, #4
 800f5c4:	42a6      	cmp	r6, r4
 800f5c6:	bf38      	it	cc
 800f5c8:	2304      	movcc	r3, #4
 800f5ca:	441d      	add	r5, r3
 800f5cc:	445b      	add	r3, fp
 800f5ce:	461e      	mov	r6, r3
 800f5d0:	462c      	mov	r4, r5
 800f5d2:	4544      	cmp	r4, r8
 800f5d4:	d30e      	bcc.n	800f5f4 <__mdiff+0xf8>
 800f5d6:	f108 0103 	add.w	r1, r8, #3
 800f5da:	1b49      	subs	r1, r1, r5
 800f5dc:	f021 0103 	bic.w	r1, r1, #3
 800f5e0:	3d03      	subs	r5, #3
 800f5e2:	45a8      	cmp	r8, r5
 800f5e4:	bf38      	it	cc
 800f5e6:	2100      	movcc	r1, #0
 800f5e8:	440b      	add	r3, r1
 800f5ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f5ee:	b191      	cbz	r1, 800f616 <__mdiff+0x11a>
 800f5f0:	6117      	str	r7, [r2, #16]
 800f5f2:	e79d      	b.n	800f530 <__mdiff+0x34>
 800f5f4:	f854 1b04 	ldr.w	r1, [r4], #4
 800f5f8:	46e6      	mov	lr, ip
 800f5fa:	0c08      	lsrs	r0, r1, #16
 800f5fc:	fa1c fc81 	uxtah	ip, ip, r1
 800f600:	4471      	add	r1, lr
 800f602:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f606:	b289      	uxth	r1, r1
 800f608:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f60c:	f846 1b04 	str.w	r1, [r6], #4
 800f610:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f614:	e7dd      	b.n	800f5d2 <__mdiff+0xd6>
 800f616:	3f01      	subs	r7, #1
 800f618:	e7e7      	b.n	800f5ea <__mdiff+0xee>
 800f61a:	bf00      	nop
 800f61c:	08012a5c 	.word	0x08012a5c
 800f620:	08012a6d 	.word	0x08012a6d

0800f624 <__ulp>:
 800f624:	b082      	sub	sp, #8
 800f626:	ed8d 0b00 	vstr	d0, [sp]
 800f62a:	9a01      	ldr	r2, [sp, #4]
 800f62c:	4b0f      	ldr	r3, [pc, #60]	@ (800f66c <__ulp+0x48>)
 800f62e:	4013      	ands	r3, r2
 800f630:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f634:	2b00      	cmp	r3, #0
 800f636:	dc08      	bgt.n	800f64a <__ulp+0x26>
 800f638:	425b      	negs	r3, r3
 800f63a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f63e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f642:	da04      	bge.n	800f64e <__ulp+0x2a>
 800f644:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f648:	4113      	asrs	r3, r2
 800f64a:	2200      	movs	r2, #0
 800f64c:	e008      	b.n	800f660 <__ulp+0x3c>
 800f64e:	f1a2 0314 	sub.w	r3, r2, #20
 800f652:	2b1e      	cmp	r3, #30
 800f654:	bfda      	itte	le
 800f656:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f65a:	40da      	lsrle	r2, r3
 800f65c:	2201      	movgt	r2, #1
 800f65e:	2300      	movs	r3, #0
 800f660:	4619      	mov	r1, r3
 800f662:	4610      	mov	r0, r2
 800f664:	ec41 0b10 	vmov	d0, r0, r1
 800f668:	b002      	add	sp, #8
 800f66a:	4770      	bx	lr
 800f66c:	7ff00000 	.word	0x7ff00000

0800f670 <__b2d>:
 800f670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f674:	6906      	ldr	r6, [r0, #16]
 800f676:	f100 0814 	add.w	r8, r0, #20
 800f67a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f67e:	1f37      	subs	r7, r6, #4
 800f680:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f684:	4610      	mov	r0, r2
 800f686:	f7ff fd4b 	bl	800f120 <__hi0bits>
 800f68a:	f1c0 0320 	rsb	r3, r0, #32
 800f68e:	280a      	cmp	r0, #10
 800f690:	600b      	str	r3, [r1, #0]
 800f692:	491b      	ldr	r1, [pc, #108]	@ (800f700 <__b2d+0x90>)
 800f694:	dc15      	bgt.n	800f6c2 <__b2d+0x52>
 800f696:	f1c0 0c0b 	rsb	ip, r0, #11
 800f69a:	fa22 f30c 	lsr.w	r3, r2, ip
 800f69e:	45b8      	cmp	r8, r7
 800f6a0:	ea43 0501 	orr.w	r5, r3, r1
 800f6a4:	bf34      	ite	cc
 800f6a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f6aa:	2300      	movcs	r3, #0
 800f6ac:	3015      	adds	r0, #21
 800f6ae:	fa02 f000 	lsl.w	r0, r2, r0
 800f6b2:	fa23 f30c 	lsr.w	r3, r3, ip
 800f6b6:	4303      	orrs	r3, r0
 800f6b8:	461c      	mov	r4, r3
 800f6ba:	ec45 4b10 	vmov	d0, r4, r5
 800f6be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6c2:	45b8      	cmp	r8, r7
 800f6c4:	bf3a      	itte	cc
 800f6c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f6ca:	f1a6 0708 	subcc.w	r7, r6, #8
 800f6ce:	2300      	movcs	r3, #0
 800f6d0:	380b      	subs	r0, #11
 800f6d2:	d012      	beq.n	800f6fa <__b2d+0x8a>
 800f6d4:	f1c0 0120 	rsb	r1, r0, #32
 800f6d8:	fa23 f401 	lsr.w	r4, r3, r1
 800f6dc:	4082      	lsls	r2, r0
 800f6de:	4322      	orrs	r2, r4
 800f6e0:	4547      	cmp	r7, r8
 800f6e2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f6e6:	bf8c      	ite	hi
 800f6e8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f6ec:	2200      	movls	r2, #0
 800f6ee:	4083      	lsls	r3, r0
 800f6f0:	40ca      	lsrs	r2, r1
 800f6f2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f6f6:	4313      	orrs	r3, r2
 800f6f8:	e7de      	b.n	800f6b8 <__b2d+0x48>
 800f6fa:	ea42 0501 	orr.w	r5, r2, r1
 800f6fe:	e7db      	b.n	800f6b8 <__b2d+0x48>
 800f700:	3ff00000 	.word	0x3ff00000

0800f704 <__d2b>:
 800f704:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f708:	460f      	mov	r7, r1
 800f70a:	2101      	movs	r1, #1
 800f70c:	ec59 8b10 	vmov	r8, r9, d0
 800f710:	4616      	mov	r6, r2
 800f712:	f7ff fc13 	bl	800ef3c <_Balloc>
 800f716:	4604      	mov	r4, r0
 800f718:	b930      	cbnz	r0, 800f728 <__d2b+0x24>
 800f71a:	4602      	mov	r2, r0
 800f71c:	4b23      	ldr	r3, [pc, #140]	@ (800f7ac <__d2b+0xa8>)
 800f71e:	4824      	ldr	r0, [pc, #144]	@ (800f7b0 <__d2b+0xac>)
 800f720:	f240 310f 	movw	r1, #783	@ 0x30f
 800f724:	f001 fe74 	bl	8011410 <__assert_func>
 800f728:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f72c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f730:	b10d      	cbz	r5, 800f736 <__d2b+0x32>
 800f732:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f736:	9301      	str	r3, [sp, #4]
 800f738:	f1b8 0300 	subs.w	r3, r8, #0
 800f73c:	d023      	beq.n	800f786 <__d2b+0x82>
 800f73e:	4668      	mov	r0, sp
 800f740:	9300      	str	r3, [sp, #0]
 800f742:	f7ff fd0c 	bl	800f15e <__lo0bits>
 800f746:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f74a:	b1d0      	cbz	r0, 800f782 <__d2b+0x7e>
 800f74c:	f1c0 0320 	rsb	r3, r0, #32
 800f750:	fa02 f303 	lsl.w	r3, r2, r3
 800f754:	430b      	orrs	r3, r1
 800f756:	40c2      	lsrs	r2, r0
 800f758:	6163      	str	r3, [r4, #20]
 800f75a:	9201      	str	r2, [sp, #4]
 800f75c:	9b01      	ldr	r3, [sp, #4]
 800f75e:	61a3      	str	r3, [r4, #24]
 800f760:	2b00      	cmp	r3, #0
 800f762:	bf0c      	ite	eq
 800f764:	2201      	moveq	r2, #1
 800f766:	2202      	movne	r2, #2
 800f768:	6122      	str	r2, [r4, #16]
 800f76a:	b1a5      	cbz	r5, 800f796 <__d2b+0x92>
 800f76c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f770:	4405      	add	r5, r0
 800f772:	603d      	str	r5, [r7, #0]
 800f774:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f778:	6030      	str	r0, [r6, #0]
 800f77a:	4620      	mov	r0, r4
 800f77c:	b003      	add	sp, #12
 800f77e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f782:	6161      	str	r1, [r4, #20]
 800f784:	e7ea      	b.n	800f75c <__d2b+0x58>
 800f786:	a801      	add	r0, sp, #4
 800f788:	f7ff fce9 	bl	800f15e <__lo0bits>
 800f78c:	9b01      	ldr	r3, [sp, #4]
 800f78e:	6163      	str	r3, [r4, #20]
 800f790:	3020      	adds	r0, #32
 800f792:	2201      	movs	r2, #1
 800f794:	e7e8      	b.n	800f768 <__d2b+0x64>
 800f796:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f79a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f79e:	6038      	str	r0, [r7, #0]
 800f7a0:	6918      	ldr	r0, [r3, #16]
 800f7a2:	f7ff fcbd 	bl	800f120 <__hi0bits>
 800f7a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f7aa:	e7e5      	b.n	800f778 <__d2b+0x74>
 800f7ac:	08012a5c 	.word	0x08012a5c
 800f7b0:	08012a6d 	.word	0x08012a6d

0800f7b4 <__ratio>:
 800f7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7b8:	b085      	sub	sp, #20
 800f7ba:	e9cd 1000 	strd	r1, r0, [sp]
 800f7be:	a902      	add	r1, sp, #8
 800f7c0:	f7ff ff56 	bl	800f670 <__b2d>
 800f7c4:	9800      	ldr	r0, [sp, #0]
 800f7c6:	a903      	add	r1, sp, #12
 800f7c8:	ec55 4b10 	vmov	r4, r5, d0
 800f7cc:	f7ff ff50 	bl	800f670 <__b2d>
 800f7d0:	9b01      	ldr	r3, [sp, #4]
 800f7d2:	6919      	ldr	r1, [r3, #16]
 800f7d4:	9b00      	ldr	r3, [sp, #0]
 800f7d6:	691b      	ldr	r3, [r3, #16]
 800f7d8:	1ac9      	subs	r1, r1, r3
 800f7da:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f7de:	1a9b      	subs	r3, r3, r2
 800f7e0:	ec5b ab10 	vmov	sl, fp, d0
 800f7e4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	bfce      	itee	gt
 800f7ec:	462a      	movgt	r2, r5
 800f7ee:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f7f2:	465a      	movle	r2, fp
 800f7f4:	462f      	mov	r7, r5
 800f7f6:	46d9      	mov	r9, fp
 800f7f8:	bfcc      	ite	gt
 800f7fa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f7fe:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f802:	464b      	mov	r3, r9
 800f804:	4652      	mov	r2, sl
 800f806:	4620      	mov	r0, r4
 800f808:	4639      	mov	r1, r7
 800f80a:	f7f1 f83f 	bl	800088c <__aeabi_ddiv>
 800f80e:	ec41 0b10 	vmov	d0, r0, r1
 800f812:	b005      	add	sp, #20
 800f814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f818 <__copybits>:
 800f818:	3901      	subs	r1, #1
 800f81a:	b570      	push	{r4, r5, r6, lr}
 800f81c:	1149      	asrs	r1, r1, #5
 800f81e:	6914      	ldr	r4, [r2, #16]
 800f820:	3101      	adds	r1, #1
 800f822:	f102 0314 	add.w	r3, r2, #20
 800f826:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f82a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f82e:	1f05      	subs	r5, r0, #4
 800f830:	42a3      	cmp	r3, r4
 800f832:	d30c      	bcc.n	800f84e <__copybits+0x36>
 800f834:	1aa3      	subs	r3, r4, r2
 800f836:	3b11      	subs	r3, #17
 800f838:	f023 0303 	bic.w	r3, r3, #3
 800f83c:	3211      	adds	r2, #17
 800f83e:	42a2      	cmp	r2, r4
 800f840:	bf88      	it	hi
 800f842:	2300      	movhi	r3, #0
 800f844:	4418      	add	r0, r3
 800f846:	2300      	movs	r3, #0
 800f848:	4288      	cmp	r0, r1
 800f84a:	d305      	bcc.n	800f858 <__copybits+0x40>
 800f84c:	bd70      	pop	{r4, r5, r6, pc}
 800f84e:	f853 6b04 	ldr.w	r6, [r3], #4
 800f852:	f845 6f04 	str.w	r6, [r5, #4]!
 800f856:	e7eb      	b.n	800f830 <__copybits+0x18>
 800f858:	f840 3b04 	str.w	r3, [r0], #4
 800f85c:	e7f4      	b.n	800f848 <__copybits+0x30>

0800f85e <__any_on>:
 800f85e:	f100 0214 	add.w	r2, r0, #20
 800f862:	6900      	ldr	r0, [r0, #16]
 800f864:	114b      	asrs	r3, r1, #5
 800f866:	4298      	cmp	r0, r3
 800f868:	b510      	push	{r4, lr}
 800f86a:	db11      	blt.n	800f890 <__any_on+0x32>
 800f86c:	dd0a      	ble.n	800f884 <__any_on+0x26>
 800f86e:	f011 011f 	ands.w	r1, r1, #31
 800f872:	d007      	beq.n	800f884 <__any_on+0x26>
 800f874:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f878:	fa24 f001 	lsr.w	r0, r4, r1
 800f87c:	fa00 f101 	lsl.w	r1, r0, r1
 800f880:	428c      	cmp	r4, r1
 800f882:	d10b      	bne.n	800f89c <__any_on+0x3e>
 800f884:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f888:	4293      	cmp	r3, r2
 800f88a:	d803      	bhi.n	800f894 <__any_on+0x36>
 800f88c:	2000      	movs	r0, #0
 800f88e:	bd10      	pop	{r4, pc}
 800f890:	4603      	mov	r3, r0
 800f892:	e7f7      	b.n	800f884 <__any_on+0x26>
 800f894:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f898:	2900      	cmp	r1, #0
 800f89a:	d0f5      	beq.n	800f888 <__any_on+0x2a>
 800f89c:	2001      	movs	r0, #1
 800f89e:	e7f6      	b.n	800f88e <__any_on+0x30>

0800f8a0 <_realloc_r>:
 800f8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8a4:	4680      	mov	r8, r0
 800f8a6:	4615      	mov	r5, r2
 800f8a8:	460c      	mov	r4, r1
 800f8aa:	b921      	cbnz	r1, 800f8b6 <_realloc_r+0x16>
 800f8ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8b0:	4611      	mov	r1, r2
 800f8b2:	f7fc bc43 	b.w	800c13c <_malloc_r>
 800f8b6:	b92a      	cbnz	r2, 800f8c4 <_realloc_r+0x24>
 800f8b8:	f7ff faf6 	bl	800eea8 <_free_r>
 800f8bc:	2400      	movs	r4, #0
 800f8be:	4620      	mov	r0, r4
 800f8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8c4:	f002 f921 	bl	8011b0a <_malloc_usable_size_r>
 800f8c8:	4285      	cmp	r5, r0
 800f8ca:	4606      	mov	r6, r0
 800f8cc:	d802      	bhi.n	800f8d4 <_realloc_r+0x34>
 800f8ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f8d2:	d8f4      	bhi.n	800f8be <_realloc_r+0x1e>
 800f8d4:	4629      	mov	r1, r5
 800f8d6:	4640      	mov	r0, r8
 800f8d8:	f7fc fc30 	bl	800c13c <_malloc_r>
 800f8dc:	4607      	mov	r7, r0
 800f8de:	2800      	cmp	r0, #0
 800f8e0:	d0ec      	beq.n	800f8bc <_realloc_r+0x1c>
 800f8e2:	42b5      	cmp	r5, r6
 800f8e4:	462a      	mov	r2, r5
 800f8e6:	4621      	mov	r1, r4
 800f8e8:	bf28      	it	cs
 800f8ea:	4632      	movcs	r2, r6
 800f8ec:	f7fe fc72 	bl	800e1d4 <memcpy>
 800f8f0:	4621      	mov	r1, r4
 800f8f2:	4640      	mov	r0, r8
 800f8f4:	f7ff fad8 	bl	800eea8 <_free_r>
 800f8f8:	463c      	mov	r4, r7
 800f8fa:	e7e0      	b.n	800f8be <_realloc_r+0x1e>

0800f8fc <sulp>:
 800f8fc:	b570      	push	{r4, r5, r6, lr}
 800f8fe:	4604      	mov	r4, r0
 800f900:	460d      	mov	r5, r1
 800f902:	ec45 4b10 	vmov	d0, r4, r5
 800f906:	4616      	mov	r6, r2
 800f908:	f7ff fe8c 	bl	800f624 <__ulp>
 800f90c:	ec51 0b10 	vmov	r0, r1, d0
 800f910:	b17e      	cbz	r6, 800f932 <sulp+0x36>
 800f912:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f916:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	dd09      	ble.n	800f932 <sulp+0x36>
 800f91e:	051b      	lsls	r3, r3, #20
 800f920:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f924:	2400      	movs	r4, #0
 800f926:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f92a:	4622      	mov	r2, r4
 800f92c:	462b      	mov	r3, r5
 800f92e:	f7f0 fe83 	bl	8000638 <__aeabi_dmul>
 800f932:	ec41 0b10 	vmov	d0, r0, r1
 800f936:	bd70      	pop	{r4, r5, r6, pc}

0800f938 <_strtod_l>:
 800f938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f93c:	b09f      	sub	sp, #124	@ 0x7c
 800f93e:	460c      	mov	r4, r1
 800f940:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f942:	2200      	movs	r2, #0
 800f944:	921a      	str	r2, [sp, #104]	@ 0x68
 800f946:	9005      	str	r0, [sp, #20]
 800f948:	f04f 0a00 	mov.w	sl, #0
 800f94c:	f04f 0b00 	mov.w	fp, #0
 800f950:	460a      	mov	r2, r1
 800f952:	9219      	str	r2, [sp, #100]	@ 0x64
 800f954:	7811      	ldrb	r1, [r2, #0]
 800f956:	292b      	cmp	r1, #43	@ 0x2b
 800f958:	d04a      	beq.n	800f9f0 <_strtod_l+0xb8>
 800f95a:	d838      	bhi.n	800f9ce <_strtod_l+0x96>
 800f95c:	290d      	cmp	r1, #13
 800f95e:	d832      	bhi.n	800f9c6 <_strtod_l+0x8e>
 800f960:	2908      	cmp	r1, #8
 800f962:	d832      	bhi.n	800f9ca <_strtod_l+0x92>
 800f964:	2900      	cmp	r1, #0
 800f966:	d03b      	beq.n	800f9e0 <_strtod_l+0xa8>
 800f968:	2200      	movs	r2, #0
 800f96a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f96c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f96e:	782a      	ldrb	r2, [r5, #0]
 800f970:	2a30      	cmp	r2, #48	@ 0x30
 800f972:	f040 80b3 	bne.w	800fadc <_strtod_l+0x1a4>
 800f976:	786a      	ldrb	r2, [r5, #1]
 800f978:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f97c:	2a58      	cmp	r2, #88	@ 0x58
 800f97e:	d16e      	bne.n	800fa5e <_strtod_l+0x126>
 800f980:	9302      	str	r3, [sp, #8]
 800f982:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f984:	9301      	str	r3, [sp, #4]
 800f986:	ab1a      	add	r3, sp, #104	@ 0x68
 800f988:	9300      	str	r3, [sp, #0]
 800f98a:	4a8e      	ldr	r2, [pc, #568]	@ (800fbc4 <_strtod_l+0x28c>)
 800f98c:	9805      	ldr	r0, [sp, #20]
 800f98e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f990:	a919      	add	r1, sp, #100	@ 0x64
 800f992:	f001 fdd7 	bl	8011544 <__gethex>
 800f996:	f010 060f 	ands.w	r6, r0, #15
 800f99a:	4604      	mov	r4, r0
 800f99c:	d005      	beq.n	800f9aa <_strtod_l+0x72>
 800f99e:	2e06      	cmp	r6, #6
 800f9a0:	d128      	bne.n	800f9f4 <_strtod_l+0xbc>
 800f9a2:	3501      	adds	r5, #1
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	9519      	str	r5, [sp, #100]	@ 0x64
 800f9a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	f040 858e 	bne.w	80104ce <_strtod_l+0xb96>
 800f9b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f9b4:	b1cb      	cbz	r3, 800f9ea <_strtod_l+0xb2>
 800f9b6:	4652      	mov	r2, sl
 800f9b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f9bc:	ec43 2b10 	vmov	d0, r2, r3
 800f9c0:	b01f      	add	sp, #124	@ 0x7c
 800f9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9c6:	2920      	cmp	r1, #32
 800f9c8:	d1ce      	bne.n	800f968 <_strtod_l+0x30>
 800f9ca:	3201      	adds	r2, #1
 800f9cc:	e7c1      	b.n	800f952 <_strtod_l+0x1a>
 800f9ce:	292d      	cmp	r1, #45	@ 0x2d
 800f9d0:	d1ca      	bne.n	800f968 <_strtod_l+0x30>
 800f9d2:	2101      	movs	r1, #1
 800f9d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f9d6:	1c51      	adds	r1, r2, #1
 800f9d8:	9119      	str	r1, [sp, #100]	@ 0x64
 800f9da:	7852      	ldrb	r2, [r2, #1]
 800f9dc:	2a00      	cmp	r2, #0
 800f9de:	d1c5      	bne.n	800f96c <_strtod_l+0x34>
 800f9e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f9e2:	9419      	str	r4, [sp, #100]	@ 0x64
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	f040 8570 	bne.w	80104ca <_strtod_l+0xb92>
 800f9ea:	4652      	mov	r2, sl
 800f9ec:	465b      	mov	r3, fp
 800f9ee:	e7e5      	b.n	800f9bc <_strtod_l+0x84>
 800f9f0:	2100      	movs	r1, #0
 800f9f2:	e7ef      	b.n	800f9d4 <_strtod_l+0x9c>
 800f9f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f9f6:	b13a      	cbz	r2, 800fa08 <_strtod_l+0xd0>
 800f9f8:	2135      	movs	r1, #53	@ 0x35
 800f9fa:	a81c      	add	r0, sp, #112	@ 0x70
 800f9fc:	f7ff ff0c 	bl	800f818 <__copybits>
 800fa00:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fa02:	9805      	ldr	r0, [sp, #20]
 800fa04:	f7ff fada 	bl	800efbc <_Bfree>
 800fa08:	3e01      	subs	r6, #1
 800fa0a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800fa0c:	2e04      	cmp	r6, #4
 800fa0e:	d806      	bhi.n	800fa1e <_strtod_l+0xe6>
 800fa10:	e8df f006 	tbb	[pc, r6]
 800fa14:	201d0314 	.word	0x201d0314
 800fa18:	14          	.byte	0x14
 800fa19:	00          	.byte	0x00
 800fa1a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800fa1e:	05e1      	lsls	r1, r4, #23
 800fa20:	bf48      	it	mi
 800fa22:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800fa26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fa2a:	0d1b      	lsrs	r3, r3, #20
 800fa2c:	051b      	lsls	r3, r3, #20
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d1bb      	bne.n	800f9aa <_strtod_l+0x72>
 800fa32:	f7fe fb99 	bl	800e168 <__errno>
 800fa36:	2322      	movs	r3, #34	@ 0x22
 800fa38:	6003      	str	r3, [r0, #0]
 800fa3a:	e7b6      	b.n	800f9aa <_strtod_l+0x72>
 800fa3c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800fa40:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800fa44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800fa48:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fa4c:	e7e7      	b.n	800fa1e <_strtod_l+0xe6>
 800fa4e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800fbcc <_strtod_l+0x294>
 800fa52:	e7e4      	b.n	800fa1e <_strtod_l+0xe6>
 800fa54:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800fa58:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800fa5c:	e7df      	b.n	800fa1e <_strtod_l+0xe6>
 800fa5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fa60:	1c5a      	adds	r2, r3, #1
 800fa62:	9219      	str	r2, [sp, #100]	@ 0x64
 800fa64:	785b      	ldrb	r3, [r3, #1]
 800fa66:	2b30      	cmp	r3, #48	@ 0x30
 800fa68:	d0f9      	beq.n	800fa5e <_strtod_l+0x126>
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d09d      	beq.n	800f9aa <_strtod_l+0x72>
 800fa6e:	2301      	movs	r3, #1
 800fa70:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fa74:	930c      	str	r3, [sp, #48]	@ 0x30
 800fa76:	2300      	movs	r3, #0
 800fa78:	9308      	str	r3, [sp, #32]
 800fa7a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa7c:	461f      	mov	r7, r3
 800fa7e:	220a      	movs	r2, #10
 800fa80:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800fa82:	7805      	ldrb	r5, [r0, #0]
 800fa84:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800fa88:	b2d9      	uxtb	r1, r3
 800fa8a:	2909      	cmp	r1, #9
 800fa8c:	d928      	bls.n	800fae0 <_strtod_l+0x1a8>
 800fa8e:	494e      	ldr	r1, [pc, #312]	@ (800fbc8 <_strtod_l+0x290>)
 800fa90:	2201      	movs	r2, #1
 800fa92:	f001 fc3a 	bl	801130a <strncmp>
 800fa96:	2800      	cmp	r0, #0
 800fa98:	d032      	beq.n	800fb00 <_strtod_l+0x1c8>
 800fa9a:	2000      	movs	r0, #0
 800fa9c:	462a      	mov	r2, r5
 800fa9e:	4681      	mov	r9, r0
 800faa0:	463d      	mov	r5, r7
 800faa2:	4603      	mov	r3, r0
 800faa4:	2a65      	cmp	r2, #101	@ 0x65
 800faa6:	d001      	beq.n	800faac <_strtod_l+0x174>
 800faa8:	2a45      	cmp	r2, #69	@ 0x45
 800faaa:	d114      	bne.n	800fad6 <_strtod_l+0x19e>
 800faac:	b91d      	cbnz	r5, 800fab6 <_strtod_l+0x17e>
 800faae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fab0:	4302      	orrs	r2, r0
 800fab2:	d095      	beq.n	800f9e0 <_strtod_l+0xa8>
 800fab4:	2500      	movs	r5, #0
 800fab6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800fab8:	1c62      	adds	r2, r4, #1
 800faba:	9219      	str	r2, [sp, #100]	@ 0x64
 800fabc:	7862      	ldrb	r2, [r4, #1]
 800fabe:	2a2b      	cmp	r2, #43	@ 0x2b
 800fac0:	d077      	beq.n	800fbb2 <_strtod_l+0x27a>
 800fac2:	2a2d      	cmp	r2, #45	@ 0x2d
 800fac4:	d07b      	beq.n	800fbbe <_strtod_l+0x286>
 800fac6:	f04f 0c00 	mov.w	ip, #0
 800faca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800face:	2909      	cmp	r1, #9
 800fad0:	f240 8082 	bls.w	800fbd8 <_strtod_l+0x2a0>
 800fad4:	9419      	str	r4, [sp, #100]	@ 0x64
 800fad6:	f04f 0800 	mov.w	r8, #0
 800fada:	e0a2      	b.n	800fc22 <_strtod_l+0x2ea>
 800fadc:	2300      	movs	r3, #0
 800fade:	e7c7      	b.n	800fa70 <_strtod_l+0x138>
 800fae0:	2f08      	cmp	r7, #8
 800fae2:	bfd5      	itete	le
 800fae4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800fae6:	9908      	ldrgt	r1, [sp, #32]
 800fae8:	fb02 3301 	mlale	r3, r2, r1, r3
 800faec:	fb02 3301 	mlagt	r3, r2, r1, r3
 800faf0:	f100 0001 	add.w	r0, r0, #1
 800faf4:	bfd4      	ite	le
 800faf6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800faf8:	9308      	strgt	r3, [sp, #32]
 800fafa:	3701      	adds	r7, #1
 800fafc:	9019      	str	r0, [sp, #100]	@ 0x64
 800fafe:	e7bf      	b.n	800fa80 <_strtod_l+0x148>
 800fb00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fb02:	1c5a      	adds	r2, r3, #1
 800fb04:	9219      	str	r2, [sp, #100]	@ 0x64
 800fb06:	785a      	ldrb	r2, [r3, #1]
 800fb08:	b37f      	cbz	r7, 800fb6a <_strtod_l+0x232>
 800fb0a:	4681      	mov	r9, r0
 800fb0c:	463d      	mov	r5, r7
 800fb0e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800fb12:	2b09      	cmp	r3, #9
 800fb14:	d912      	bls.n	800fb3c <_strtod_l+0x204>
 800fb16:	2301      	movs	r3, #1
 800fb18:	e7c4      	b.n	800faa4 <_strtod_l+0x16c>
 800fb1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fb1c:	1c5a      	adds	r2, r3, #1
 800fb1e:	9219      	str	r2, [sp, #100]	@ 0x64
 800fb20:	785a      	ldrb	r2, [r3, #1]
 800fb22:	3001      	adds	r0, #1
 800fb24:	2a30      	cmp	r2, #48	@ 0x30
 800fb26:	d0f8      	beq.n	800fb1a <_strtod_l+0x1e2>
 800fb28:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800fb2c:	2b08      	cmp	r3, #8
 800fb2e:	f200 84d3 	bhi.w	80104d8 <_strtod_l+0xba0>
 800fb32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fb34:	930c      	str	r3, [sp, #48]	@ 0x30
 800fb36:	4681      	mov	r9, r0
 800fb38:	2000      	movs	r0, #0
 800fb3a:	4605      	mov	r5, r0
 800fb3c:	3a30      	subs	r2, #48	@ 0x30
 800fb3e:	f100 0301 	add.w	r3, r0, #1
 800fb42:	d02a      	beq.n	800fb9a <_strtod_l+0x262>
 800fb44:	4499      	add	r9, r3
 800fb46:	eb00 0c05 	add.w	ip, r0, r5
 800fb4a:	462b      	mov	r3, r5
 800fb4c:	210a      	movs	r1, #10
 800fb4e:	4563      	cmp	r3, ip
 800fb50:	d10d      	bne.n	800fb6e <_strtod_l+0x236>
 800fb52:	1c69      	adds	r1, r5, #1
 800fb54:	4401      	add	r1, r0
 800fb56:	4428      	add	r0, r5
 800fb58:	2808      	cmp	r0, #8
 800fb5a:	dc16      	bgt.n	800fb8a <_strtod_l+0x252>
 800fb5c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fb5e:	230a      	movs	r3, #10
 800fb60:	fb03 2300 	mla	r3, r3, r0, r2
 800fb64:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb66:	2300      	movs	r3, #0
 800fb68:	e018      	b.n	800fb9c <_strtod_l+0x264>
 800fb6a:	4638      	mov	r0, r7
 800fb6c:	e7da      	b.n	800fb24 <_strtod_l+0x1ec>
 800fb6e:	2b08      	cmp	r3, #8
 800fb70:	f103 0301 	add.w	r3, r3, #1
 800fb74:	dc03      	bgt.n	800fb7e <_strtod_l+0x246>
 800fb76:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800fb78:	434e      	muls	r6, r1
 800fb7a:	960a      	str	r6, [sp, #40]	@ 0x28
 800fb7c:	e7e7      	b.n	800fb4e <_strtod_l+0x216>
 800fb7e:	2b10      	cmp	r3, #16
 800fb80:	bfde      	ittt	le
 800fb82:	9e08      	ldrle	r6, [sp, #32]
 800fb84:	434e      	mulle	r6, r1
 800fb86:	9608      	strle	r6, [sp, #32]
 800fb88:	e7e1      	b.n	800fb4e <_strtod_l+0x216>
 800fb8a:	280f      	cmp	r0, #15
 800fb8c:	dceb      	bgt.n	800fb66 <_strtod_l+0x22e>
 800fb8e:	9808      	ldr	r0, [sp, #32]
 800fb90:	230a      	movs	r3, #10
 800fb92:	fb03 2300 	mla	r3, r3, r0, r2
 800fb96:	9308      	str	r3, [sp, #32]
 800fb98:	e7e5      	b.n	800fb66 <_strtod_l+0x22e>
 800fb9a:	4629      	mov	r1, r5
 800fb9c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fb9e:	1c50      	adds	r0, r2, #1
 800fba0:	9019      	str	r0, [sp, #100]	@ 0x64
 800fba2:	7852      	ldrb	r2, [r2, #1]
 800fba4:	4618      	mov	r0, r3
 800fba6:	460d      	mov	r5, r1
 800fba8:	e7b1      	b.n	800fb0e <_strtod_l+0x1d6>
 800fbaa:	f04f 0900 	mov.w	r9, #0
 800fbae:	2301      	movs	r3, #1
 800fbb0:	e77d      	b.n	800faae <_strtod_l+0x176>
 800fbb2:	f04f 0c00 	mov.w	ip, #0
 800fbb6:	1ca2      	adds	r2, r4, #2
 800fbb8:	9219      	str	r2, [sp, #100]	@ 0x64
 800fbba:	78a2      	ldrb	r2, [r4, #2]
 800fbbc:	e785      	b.n	800faca <_strtod_l+0x192>
 800fbbe:	f04f 0c01 	mov.w	ip, #1
 800fbc2:	e7f8      	b.n	800fbb6 <_strtod_l+0x27e>
 800fbc4:	08012be0 	.word	0x08012be0
 800fbc8:	08012bc8 	.word	0x08012bc8
 800fbcc:	7ff00000 	.word	0x7ff00000
 800fbd0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fbd2:	1c51      	adds	r1, r2, #1
 800fbd4:	9119      	str	r1, [sp, #100]	@ 0x64
 800fbd6:	7852      	ldrb	r2, [r2, #1]
 800fbd8:	2a30      	cmp	r2, #48	@ 0x30
 800fbda:	d0f9      	beq.n	800fbd0 <_strtod_l+0x298>
 800fbdc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800fbe0:	2908      	cmp	r1, #8
 800fbe2:	f63f af78 	bhi.w	800fad6 <_strtod_l+0x19e>
 800fbe6:	3a30      	subs	r2, #48	@ 0x30
 800fbe8:	920e      	str	r2, [sp, #56]	@ 0x38
 800fbea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fbec:	920f      	str	r2, [sp, #60]	@ 0x3c
 800fbee:	f04f 080a 	mov.w	r8, #10
 800fbf2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fbf4:	1c56      	adds	r6, r2, #1
 800fbf6:	9619      	str	r6, [sp, #100]	@ 0x64
 800fbf8:	7852      	ldrb	r2, [r2, #1]
 800fbfa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800fbfe:	f1be 0f09 	cmp.w	lr, #9
 800fc02:	d939      	bls.n	800fc78 <_strtod_l+0x340>
 800fc04:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fc06:	1a76      	subs	r6, r6, r1
 800fc08:	2e08      	cmp	r6, #8
 800fc0a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800fc0e:	dc03      	bgt.n	800fc18 <_strtod_l+0x2e0>
 800fc10:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fc12:	4588      	cmp	r8, r1
 800fc14:	bfa8      	it	ge
 800fc16:	4688      	movge	r8, r1
 800fc18:	f1bc 0f00 	cmp.w	ip, #0
 800fc1c:	d001      	beq.n	800fc22 <_strtod_l+0x2ea>
 800fc1e:	f1c8 0800 	rsb	r8, r8, #0
 800fc22:	2d00      	cmp	r5, #0
 800fc24:	d14e      	bne.n	800fcc4 <_strtod_l+0x38c>
 800fc26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fc28:	4308      	orrs	r0, r1
 800fc2a:	f47f aebe 	bne.w	800f9aa <_strtod_l+0x72>
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	f47f aed6 	bne.w	800f9e0 <_strtod_l+0xa8>
 800fc34:	2a69      	cmp	r2, #105	@ 0x69
 800fc36:	d028      	beq.n	800fc8a <_strtod_l+0x352>
 800fc38:	dc25      	bgt.n	800fc86 <_strtod_l+0x34e>
 800fc3a:	2a49      	cmp	r2, #73	@ 0x49
 800fc3c:	d025      	beq.n	800fc8a <_strtod_l+0x352>
 800fc3e:	2a4e      	cmp	r2, #78	@ 0x4e
 800fc40:	f47f aece 	bne.w	800f9e0 <_strtod_l+0xa8>
 800fc44:	499b      	ldr	r1, [pc, #620]	@ (800feb4 <_strtod_l+0x57c>)
 800fc46:	a819      	add	r0, sp, #100	@ 0x64
 800fc48:	f001 fe9e 	bl	8011988 <__match>
 800fc4c:	2800      	cmp	r0, #0
 800fc4e:	f43f aec7 	beq.w	800f9e0 <_strtod_l+0xa8>
 800fc52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fc54:	781b      	ldrb	r3, [r3, #0]
 800fc56:	2b28      	cmp	r3, #40	@ 0x28
 800fc58:	d12e      	bne.n	800fcb8 <_strtod_l+0x380>
 800fc5a:	4997      	ldr	r1, [pc, #604]	@ (800feb8 <_strtod_l+0x580>)
 800fc5c:	aa1c      	add	r2, sp, #112	@ 0x70
 800fc5e:	a819      	add	r0, sp, #100	@ 0x64
 800fc60:	f001 fea6 	bl	80119b0 <__hexnan>
 800fc64:	2805      	cmp	r0, #5
 800fc66:	d127      	bne.n	800fcb8 <_strtod_l+0x380>
 800fc68:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fc6a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800fc6e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800fc72:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800fc76:	e698      	b.n	800f9aa <_strtod_l+0x72>
 800fc78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fc7a:	fb08 2101 	mla	r1, r8, r1, r2
 800fc7e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800fc82:	920e      	str	r2, [sp, #56]	@ 0x38
 800fc84:	e7b5      	b.n	800fbf2 <_strtod_l+0x2ba>
 800fc86:	2a6e      	cmp	r2, #110	@ 0x6e
 800fc88:	e7da      	b.n	800fc40 <_strtod_l+0x308>
 800fc8a:	498c      	ldr	r1, [pc, #560]	@ (800febc <_strtod_l+0x584>)
 800fc8c:	a819      	add	r0, sp, #100	@ 0x64
 800fc8e:	f001 fe7b 	bl	8011988 <__match>
 800fc92:	2800      	cmp	r0, #0
 800fc94:	f43f aea4 	beq.w	800f9e0 <_strtod_l+0xa8>
 800fc98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fc9a:	4989      	ldr	r1, [pc, #548]	@ (800fec0 <_strtod_l+0x588>)
 800fc9c:	3b01      	subs	r3, #1
 800fc9e:	a819      	add	r0, sp, #100	@ 0x64
 800fca0:	9319      	str	r3, [sp, #100]	@ 0x64
 800fca2:	f001 fe71 	bl	8011988 <__match>
 800fca6:	b910      	cbnz	r0, 800fcae <_strtod_l+0x376>
 800fca8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fcaa:	3301      	adds	r3, #1
 800fcac:	9319      	str	r3, [sp, #100]	@ 0x64
 800fcae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800fed0 <_strtod_l+0x598>
 800fcb2:	f04f 0a00 	mov.w	sl, #0
 800fcb6:	e678      	b.n	800f9aa <_strtod_l+0x72>
 800fcb8:	4882      	ldr	r0, [pc, #520]	@ (800fec4 <_strtod_l+0x58c>)
 800fcba:	f001 fba1 	bl	8011400 <nan>
 800fcbe:	ec5b ab10 	vmov	sl, fp, d0
 800fcc2:	e672      	b.n	800f9aa <_strtod_l+0x72>
 800fcc4:	eba8 0309 	sub.w	r3, r8, r9
 800fcc8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fcca:	9309      	str	r3, [sp, #36]	@ 0x24
 800fccc:	2f00      	cmp	r7, #0
 800fcce:	bf08      	it	eq
 800fcd0:	462f      	moveq	r7, r5
 800fcd2:	2d10      	cmp	r5, #16
 800fcd4:	462c      	mov	r4, r5
 800fcd6:	bfa8      	it	ge
 800fcd8:	2410      	movge	r4, #16
 800fcda:	f7f0 fc33 	bl	8000544 <__aeabi_ui2d>
 800fcde:	2d09      	cmp	r5, #9
 800fce0:	4682      	mov	sl, r0
 800fce2:	468b      	mov	fp, r1
 800fce4:	dc13      	bgt.n	800fd0e <_strtod_l+0x3d6>
 800fce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	f43f ae5e 	beq.w	800f9aa <_strtod_l+0x72>
 800fcee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcf0:	dd78      	ble.n	800fde4 <_strtod_l+0x4ac>
 800fcf2:	2b16      	cmp	r3, #22
 800fcf4:	dc5f      	bgt.n	800fdb6 <_strtod_l+0x47e>
 800fcf6:	4974      	ldr	r1, [pc, #464]	@ (800fec8 <_strtod_l+0x590>)
 800fcf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fcfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd00:	4652      	mov	r2, sl
 800fd02:	465b      	mov	r3, fp
 800fd04:	f7f0 fc98 	bl	8000638 <__aeabi_dmul>
 800fd08:	4682      	mov	sl, r0
 800fd0a:	468b      	mov	fp, r1
 800fd0c:	e64d      	b.n	800f9aa <_strtod_l+0x72>
 800fd0e:	4b6e      	ldr	r3, [pc, #440]	@ (800fec8 <_strtod_l+0x590>)
 800fd10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fd14:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800fd18:	f7f0 fc8e 	bl	8000638 <__aeabi_dmul>
 800fd1c:	4682      	mov	sl, r0
 800fd1e:	9808      	ldr	r0, [sp, #32]
 800fd20:	468b      	mov	fp, r1
 800fd22:	f7f0 fc0f 	bl	8000544 <__aeabi_ui2d>
 800fd26:	4602      	mov	r2, r0
 800fd28:	460b      	mov	r3, r1
 800fd2a:	4650      	mov	r0, sl
 800fd2c:	4659      	mov	r1, fp
 800fd2e:	f7f0 facd 	bl	80002cc <__adddf3>
 800fd32:	2d0f      	cmp	r5, #15
 800fd34:	4682      	mov	sl, r0
 800fd36:	468b      	mov	fp, r1
 800fd38:	ddd5      	ble.n	800fce6 <_strtod_l+0x3ae>
 800fd3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd3c:	1b2c      	subs	r4, r5, r4
 800fd3e:	441c      	add	r4, r3
 800fd40:	2c00      	cmp	r4, #0
 800fd42:	f340 8096 	ble.w	800fe72 <_strtod_l+0x53a>
 800fd46:	f014 030f 	ands.w	r3, r4, #15
 800fd4a:	d00a      	beq.n	800fd62 <_strtod_l+0x42a>
 800fd4c:	495e      	ldr	r1, [pc, #376]	@ (800fec8 <_strtod_l+0x590>)
 800fd4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fd52:	4652      	mov	r2, sl
 800fd54:	465b      	mov	r3, fp
 800fd56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd5a:	f7f0 fc6d 	bl	8000638 <__aeabi_dmul>
 800fd5e:	4682      	mov	sl, r0
 800fd60:	468b      	mov	fp, r1
 800fd62:	f034 040f 	bics.w	r4, r4, #15
 800fd66:	d073      	beq.n	800fe50 <_strtod_l+0x518>
 800fd68:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800fd6c:	dd48      	ble.n	800fe00 <_strtod_l+0x4c8>
 800fd6e:	2400      	movs	r4, #0
 800fd70:	46a0      	mov	r8, r4
 800fd72:	940a      	str	r4, [sp, #40]	@ 0x28
 800fd74:	46a1      	mov	r9, r4
 800fd76:	9a05      	ldr	r2, [sp, #20]
 800fd78:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800fed0 <_strtod_l+0x598>
 800fd7c:	2322      	movs	r3, #34	@ 0x22
 800fd7e:	6013      	str	r3, [r2, #0]
 800fd80:	f04f 0a00 	mov.w	sl, #0
 800fd84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	f43f ae0f 	beq.w	800f9aa <_strtod_l+0x72>
 800fd8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fd8e:	9805      	ldr	r0, [sp, #20]
 800fd90:	f7ff f914 	bl	800efbc <_Bfree>
 800fd94:	9805      	ldr	r0, [sp, #20]
 800fd96:	4649      	mov	r1, r9
 800fd98:	f7ff f910 	bl	800efbc <_Bfree>
 800fd9c:	9805      	ldr	r0, [sp, #20]
 800fd9e:	4641      	mov	r1, r8
 800fda0:	f7ff f90c 	bl	800efbc <_Bfree>
 800fda4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fda6:	9805      	ldr	r0, [sp, #20]
 800fda8:	f7ff f908 	bl	800efbc <_Bfree>
 800fdac:	9805      	ldr	r0, [sp, #20]
 800fdae:	4621      	mov	r1, r4
 800fdb0:	f7ff f904 	bl	800efbc <_Bfree>
 800fdb4:	e5f9      	b.n	800f9aa <_strtod_l+0x72>
 800fdb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fdb8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	dbbc      	blt.n	800fd3a <_strtod_l+0x402>
 800fdc0:	4c41      	ldr	r4, [pc, #260]	@ (800fec8 <_strtod_l+0x590>)
 800fdc2:	f1c5 050f 	rsb	r5, r5, #15
 800fdc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fdca:	4652      	mov	r2, sl
 800fdcc:	465b      	mov	r3, fp
 800fdce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fdd2:	f7f0 fc31 	bl	8000638 <__aeabi_dmul>
 800fdd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fdd8:	1b5d      	subs	r5, r3, r5
 800fdda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fdde:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fde2:	e78f      	b.n	800fd04 <_strtod_l+0x3cc>
 800fde4:	3316      	adds	r3, #22
 800fde6:	dba8      	blt.n	800fd3a <_strtod_l+0x402>
 800fde8:	4b37      	ldr	r3, [pc, #220]	@ (800fec8 <_strtod_l+0x590>)
 800fdea:	eba9 0808 	sub.w	r8, r9, r8
 800fdee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800fdf2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800fdf6:	4650      	mov	r0, sl
 800fdf8:	4659      	mov	r1, fp
 800fdfa:	f7f0 fd47 	bl	800088c <__aeabi_ddiv>
 800fdfe:	e783      	b.n	800fd08 <_strtod_l+0x3d0>
 800fe00:	4b32      	ldr	r3, [pc, #200]	@ (800fecc <_strtod_l+0x594>)
 800fe02:	9308      	str	r3, [sp, #32]
 800fe04:	2300      	movs	r3, #0
 800fe06:	1124      	asrs	r4, r4, #4
 800fe08:	4650      	mov	r0, sl
 800fe0a:	4659      	mov	r1, fp
 800fe0c:	461e      	mov	r6, r3
 800fe0e:	2c01      	cmp	r4, #1
 800fe10:	dc21      	bgt.n	800fe56 <_strtod_l+0x51e>
 800fe12:	b10b      	cbz	r3, 800fe18 <_strtod_l+0x4e0>
 800fe14:	4682      	mov	sl, r0
 800fe16:	468b      	mov	fp, r1
 800fe18:	492c      	ldr	r1, [pc, #176]	@ (800fecc <_strtod_l+0x594>)
 800fe1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800fe1e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800fe22:	4652      	mov	r2, sl
 800fe24:	465b      	mov	r3, fp
 800fe26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe2a:	f7f0 fc05 	bl	8000638 <__aeabi_dmul>
 800fe2e:	4b28      	ldr	r3, [pc, #160]	@ (800fed0 <_strtod_l+0x598>)
 800fe30:	460a      	mov	r2, r1
 800fe32:	400b      	ands	r3, r1
 800fe34:	4927      	ldr	r1, [pc, #156]	@ (800fed4 <_strtod_l+0x59c>)
 800fe36:	428b      	cmp	r3, r1
 800fe38:	4682      	mov	sl, r0
 800fe3a:	d898      	bhi.n	800fd6e <_strtod_l+0x436>
 800fe3c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800fe40:	428b      	cmp	r3, r1
 800fe42:	bf86      	itte	hi
 800fe44:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800fed8 <_strtod_l+0x5a0>
 800fe48:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800fe4c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800fe50:	2300      	movs	r3, #0
 800fe52:	9308      	str	r3, [sp, #32]
 800fe54:	e07a      	b.n	800ff4c <_strtod_l+0x614>
 800fe56:	07e2      	lsls	r2, r4, #31
 800fe58:	d505      	bpl.n	800fe66 <_strtod_l+0x52e>
 800fe5a:	9b08      	ldr	r3, [sp, #32]
 800fe5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe60:	f7f0 fbea 	bl	8000638 <__aeabi_dmul>
 800fe64:	2301      	movs	r3, #1
 800fe66:	9a08      	ldr	r2, [sp, #32]
 800fe68:	3208      	adds	r2, #8
 800fe6a:	3601      	adds	r6, #1
 800fe6c:	1064      	asrs	r4, r4, #1
 800fe6e:	9208      	str	r2, [sp, #32]
 800fe70:	e7cd      	b.n	800fe0e <_strtod_l+0x4d6>
 800fe72:	d0ed      	beq.n	800fe50 <_strtod_l+0x518>
 800fe74:	4264      	negs	r4, r4
 800fe76:	f014 020f 	ands.w	r2, r4, #15
 800fe7a:	d00a      	beq.n	800fe92 <_strtod_l+0x55a>
 800fe7c:	4b12      	ldr	r3, [pc, #72]	@ (800fec8 <_strtod_l+0x590>)
 800fe7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe82:	4650      	mov	r0, sl
 800fe84:	4659      	mov	r1, fp
 800fe86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe8a:	f7f0 fcff 	bl	800088c <__aeabi_ddiv>
 800fe8e:	4682      	mov	sl, r0
 800fe90:	468b      	mov	fp, r1
 800fe92:	1124      	asrs	r4, r4, #4
 800fe94:	d0dc      	beq.n	800fe50 <_strtod_l+0x518>
 800fe96:	2c1f      	cmp	r4, #31
 800fe98:	dd20      	ble.n	800fedc <_strtod_l+0x5a4>
 800fe9a:	2400      	movs	r4, #0
 800fe9c:	46a0      	mov	r8, r4
 800fe9e:	940a      	str	r4, [sp, #40]	@ 0x28
 800fea0:	46a1      	mov	r9, r4
 800fea2:	9a05      	ldr	r2, [sp, #20]
 800fea4:	2322      	movs	r3, #34	@ 0x22
 800fea6:	f04f 0a00 	mov.w	sl, #0
 800feaa:	f04f 0b00 	mov.w	fp, #0
 800feae:	6013      	str	r3, [r2, #0]
 800feb0:	e768      	b.n	800fd84 <_strtod_l+0x44c>
 800feb2:	bf00      	nop
 800feb4:	080129b6 	.word	0x080129b6
 800feb8:	08012bcc 	.word	0x08012bcc
 800febc:	080129ae 	.word	0x080129ae
 800fec0:	080129e3 	.word	0x080129e3
 800fec4:	08012c8f 	.word	0x08012c8f
 800fec8:	08012b00 	.word	0x08012b00
 800fecc:	08012ad8 	.word	0x08012ad8
 800fed0:	7ff00000 	.word	0x7ff00000
 800fed4:	7ca00000 	.word	0x7ca00000
 800fed8:	7fefffff 	.word	0x7fefffff
 800fedc:	f014 0310 	ands.w	r3, r4, #16
 800fee0:	bf18      	it	ne
 800fee2:	236a      	movne	r3, #106	@ 0x6a
 800fee4:	4ea9      	ldr	r6, [pc, #676]	@ (801018c <_strtod_l+0x854>)
 800fee6:	9308      	str	r3, [sp, #32]
 800fee8:	4650      	mov	r0, sl
 800feea:	4659      	mov	r1, fp
 800feec:	2300      	movs	r3, #0
 800feee:	07e2      	lsls	r2, r4, #31
 800fef0:	d504      	bpl.n	800fefc <_strtod_l+0x5c4>
 800fef2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fef6:	f7f0 fb9f 	bl	8000638 <__aeabi_dmul>
 800fefa:	2301      	movs	r3, #1
 800fefc:	1064      	asrs	r4, r4, #1
 800fefe:	f106 0608 	add.w	r6, r6, #8
 800ff02:	d1f4      	bne.n	800feee <_strtod_l+0x5b6>
 800ff04:	b10b      	cbz	r3, 800ff0a <_strtod_l+0x5d2>
 800ff06:	4682      	mov	sl, r0
 800ff08:	468b      	mov	fp, r1
 800ff0a:	9b08      	ldr	r3, [sp, #32]
 800ff0c:	b1b3      	cbz	r3, 800ff3c <_strtod_l+0x604>
 800ff0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ff12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	4659      	mov	r1, fp
 800ff1a:	dd0f      	ble.n	800ff3c <_strtod_l+0x604>
 800ff1c:	2b1f      	cmp	r3, #31
 800ff1e:	dd55      	ble.n	800ffcc <_strtod_l+0x694>
 800ff20:	2b34      	cmp	r3, #52	@ 0x34
 800ff22:	bfde      	ittt	le
 800ff24:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800ff28:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ff2c:	4093      	lslle	r3, r2
 800ff2e:	f04f 0a00 	mov.w	sl, #0
 800ff32:	bfcc      	ite	gt
 800ff34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ff38:	ea03 0b01 	andle.w	fp, r3, r1
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	2300      	movs	r3, #0
 800ff40:	4650      	mov	r0, sl
 800ff42:	4659      	mov	r1, fp
 800ff44:	f7f0 fde0 	bl	8000b08 <__aeabi_dcmpeq>
 800ff48:	2800      	cmp	r0, #0
 800ff4a:	d1a6      	bne.n	800fe9a <_strtod_l+0x562>
 800ff4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ff4e:	9300      	str	r3, [sp, #0]
 800ff50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ff52:	9805      	ldr	r0, [sp, #20]
 800ff54:	462b      	mov	r3, r5
 800ff56:	463a      	mov	r2, r7
 800ff58:	f7ff f898 	bl	800f08c <__s2b>
 800ff5c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ff5e:	2800      	cmp	r0, #0
 800ff60:	f43f af05 	beq.w	800fd6e <_strtod_l+0x436>
 800ff64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ff66:	2a00      	cmp	r2, #0
 800ff68:	eba9 0308 	sub.w	r3, r9, r8
 800ff6c:	bfa8      	it	ge
 800ff6e:	2300      	movge	r3, #0
 800ff70:	9312      	str	r3, [sp, #72]	@ 0x48
 800ff72:	2400      	movs	r4, #0
 800ff74:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ff78:	9316      	str	r3, [sp, #88]	@ 0x58
 800ff7a:	46a0      	mov	r8, r4
 800ff7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ff7e:	9805      	ldr	r0, [sp, #20]
 800ff80:	6859      	ldr	r1, [r3, #4]
 800ff82:	f7fe ffdb 	bl	800ef3c <_Balloc>
 800ff86:	4681      	mov	r9, r0
 800ff88:	2800      	cmp	r0, #0
 800ff8a:	f43f aef4 	beq.w	800fd76 <_strtod_l+0x43e>
 800ff8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ff90:	691a      	ldr	r2, [r3, #16]
 800ff92:	3202      	adds	r2, #2
 800ff94:	f103 010c 	add.w	r1, r3, #12
 800ff98:	0092      	lsls	r2, r2, #2
 800ff9a:	300c      	adds	r0, #12
 800ff9c:	f7fe f91a 	bl	800e1d4 <memcpy>
 800ffa0:	ec4b ab10 	vmov	d0, sl, fp
 800ffa4:	9805      	ldr	r0, [sp, #20]
 800ffa6:	aa1c      	add	r2, sp, #112	@ 0x70
 800ffa8:	a91b      	add	r1, sp, #108	@ 0x6c
 800ffaa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ffae:	f7ff fba9 	bl	800f704 <__d2b>
 800ffb2:	901a      	str	r0, [sp, #104]	@ 0x68
 800ffb4:	2800      	cmp	r0, #0
 800ffb6:	f43f aede 	beq.w	800fd76 <_strtod_l+0x43e>
 800ffba:	9805      	ldr	r0, [sp, #20]
 800ffbc:	2101      	movs	r1, #1
 800ffbe:	f7ff f8fb 	bl	800f1b8 <__i2b>
 800ffc2:	4680      	mov	r8, r0
 800ffc4:	b948      	cbnz	r0, 800ffda <_strtod_l+0x6a2>
 800ffc6:	f04f 0800 	mov.w	r8, #0
 800ffca:	e6d4      	b.n	800fd76 <_strtod_l+0x43e>
 800ffcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ffd0:	fa02 f303 	lsl.w	r3, r2, r3
 800ffd4:	ea03 0a0a 	and.w	sl, r3, sl
 800ffd8:	e7b0      	b.n	800ff3c <_strtod_l+0x604>
 800ffda:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ffdc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ffde:	2d00      	cmp	r5, #0
 800ffe0:	bfab      	itete	ge
 800ffe2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ffe4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ffe6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ffe8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ffea:	bfac      	ite	ge
 800ffec:	18ef      	addge	r7, r5, r3
 800ffee:	1b5e      	sublt	r6, r3, r5
 800fff0:	9b08      	ldr	r3, [sp, #32]
 800fff2:	1aed      	subs	r5, r5, r3
 800fff4:	4415      	add	r5, r2
 800fff6:	4b66      	ldr	r3, [pc, #408]	@ (8010190 <_strtod_l+0x858>)
 800fff8:	3d01      	subs	r5, #1
 800fffa:	429d      	cmp	r5, r3
 800fffc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010000:	da50      	bge.n	80100a4 <_strtod_l+0x76c>
 8010002:	1b5b      	subs	r3, r3, r5
 8010004:	2b1f      	cmp	r3, #31
 8010006:	eba2 0203 	sub.w	r2, r2, r3
 801000a:	f04f 0101 	mov.w	r1, #1
 801000e:	dc3d      	bgt.n	801008c <_strtod_l+0x754>
 8010010:	fa01 f303 	lsl.w	r3, r1, r3
 8010014:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010016:	2300      	movs	r3, #0
 8010018:	9310      	str	r3, [sp, #64]	@ 0x40
 801001a:	18bd      	adds	r5, r7, r2
 801001c:	9b08      	ldr	r3, [sp, #32]
 801001e:	42af      	cmp	r7, r5
 8010020:	4416      	add	r6, r2
 8010022:	441e      	add	r6, r3
 8010024:	463b      	mov	r3, r7
 8010026:	bfa8      	it	ge
 8010028:	462b      	movge	r3, r5
 801002a:	42b3      	cmp	r3, r6
 801002c:	bfa8      	it	ge
 801002e:	4633      	movge	r3, r6
 8010030:	2b00      	cmp	r3, #0
 8010032:	bfc2      	ittt	gt
 8010034:	1aed      	subgt	r5, r5, r3
 8010036:	1af6      	subgt	r6, r6, r3
 8010038:	1aff      	subgt	r7, r7, r3
 801003a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801003c:	2b00      	cmp	r3, #0
 801003e:	dd16      	ble.n	801006e <_strtod_l+0x736>
 8010040:	4641      	mov	r1, r8
 8010042:	9805      	ldr	r0, [sp, #20]
 8010044:	461a      	mov	r2, r3
 8010046:	f7ff f977 	bl	800f338 <__pow5mult>
 801004a:	4680      	mov	r8, r0
 801004c:	2800      	cmp	r0, #0
 801004e:	d0ba      	beq.n	800ffc6 <_strtod_l+0x68e>
 8010050:	4601      	mov	r1, r0
 8010052:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010054:	9805      	ldr	r0, [sp, #20]
 8010056:	f7ff f8c5 	bl	800f1e4 <__multiply>
 801005a:	900e      	str	r0, [sp, #56]	@ 0x38
 801005c:	2800      	cmp	r0, #0
 801005e:	f43f ae8a 	beq.w	800fd76 <_strtod_l+0x43e>
 8010062:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010064:	9805      	ldr	r0, [sp, #20]
 8010066:	f7fe ffa9 	bl	800efbc <_Bfree>
 801006a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801006c:	931a      	str	r3, [sp, #104]	@ 0x68
 801006e:	2d00      	cmp	r5, #0
 8010070:	dc1d      	bgt.n	80100ae <_strtod_l+0x776>
 8010072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010074:	2b00      	cmp	r3, #0
 8010076:	dd23      	ble.n	80100c0 <_strtod_l+0x788>
 8010078:	4649      	mov	r1, r9
 801007a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801007c:	9805      	ldr	r0, [sp, #20]
 801007e:	f7ff f95b 	bl	800f338 <__pow5mult>
 8010082:	4681      	mov	r9, r0
 8010084:	b9e0      	cbnz	r0, 80100c0 <_strtod_l+0x788>
 8010086:	f04f 0900 	mov.w	r9, #0
 801008a:	e674      	b.n	800fd76 <_strtod_l+0x43e>
 801008c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8010090:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8010094:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010098:	35e2      	adds	r5, #226	@ 0xe2
 801009a:	fa01 f305 	lsl.w	r3, r1, r5
 801009e:	9310      	str	r3, [sp, #64]	@ 0x40
 80100a0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80100a2:	e7ba      	b.n	801001a <_strtod_l+0x6e2>
 80100a4:	2300      	movs	r3, #0
 80100a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80100a8:	2301      	movs	r3, #1
 80100aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80100ac:	e7b5      	b.n	801001a <_strtod_l+0x6e2>
 80100ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80100b0:	9805      	ldr	r0, [sp, #20]
 80100b2:	462a      	mov	r2, r5
 80100b4:	f7ff f99a 	bl	800f3ec <__lshift>
 80100b8:	901a      	str	r0, [sp, #104]	@ 0x68
 80100ba:	2800      	cmp	r0, #0
 80100bc:	d1d9      	bne.n	8010072 <_strtod_l+0x73a>
 80100be:	e65a      	b.n	800fd76 <_strtod_l+0x43e>
 80100c0:	2e00      	cmp	r6, #0
 80100c2:	dd07      	ble.n	80100d4 <_strtod_l+0x79c>
 80100c4:	4649      	mov	r1, r9
 80100c6:	9805      	ldr	r0, [sp, #20]
 80100c8:	4632      	mov	r2, r6
 80100ca:	f7ff f98f 	bl	800f3ec <__lshift>
 80100ce:	4681      	mov	r9, r0
 80100d0:	2800      	cmp	r0, #0
 80100d2:	d0d8      	beq.n	8010086 <_strtod_l+0x74e>
 80100d4:	2f00      	cmp	r7, #0
 80100d6:	dd08      	ble.n	80100ea <_strtod_l+0x7b2>
 80100d8:	4641      	mov	r1, r8
 80100da:	9805      	ldr	r0, [sp, #20]
 80100dc:	463a      	mov	r2, r7
 80100de:	f7ff f985 	bl	800f3ec <__lshift>
 80100e2:	4680      	mov	r8, r0
 80100e4:	2800      	cmp	r0, #0
 80100e6:	f43f ae46 	beq.w	800fd76 <_strtod_l+0x43e>
 80100ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80100ec:	9805      	ldr	r0, [sp, #20]
 80100ee:	464a      	mov	r2, r9
 80100f0:	f7ff fa04 	bl	800f4fc <__mdiff>
 80100f4:	4604      	mov	r4, r0
 80100f6:	2800      	cmp	r0, #0
 80100f8:	f43f ae3d 	beq.w	800fd76 <_strtod_l+0x43e>
 80100fc:	68c3      	ldr	r3, [r0, #12]
 80100fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010100:	2300      	movs	r3, #0
 8010102:	60c3      	str	r3, [r0, #12]
 8010104:	4641      	mov	r1, r8
 8010106:	f7ff f9dd 	bl	800f4c4 <__mcmp>
 801010a:	2800      	cmp	r0, #0
 801010c:	da46      	bge.n	801019c <_strtod_l+0x864>
 801010e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010110:	ea53 030a 	orrs.w	r3, r3, sl
 8010114:	d16c      	bne.n	80101f0 <_strtod_l+0x8b8>
 8010116:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801011a:	2b00      	cmp	r3, #0
 801011c:	d168      	bne.n	80101f0 <_strtod_l+0x8b8>
 801011e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010122:	0d1b      	lsrs	r3, r3, #20
 8010124:	051b      	lsls	r3, r3, #20
 8010126:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801012a:	d961      	bls.n	80101f0 <_strtod_l+0x8b8>
 801012c:	6963      	ldr	r3, [r4, #20]
 801012e:	b913      	cbnz	r3, 8010136 <_strtod_l+0x7fe>
 8010130:	6923      	ldr	r3, [r4, #16]
 8010132:	2b01      	cmp	r3, #1
 8010134:	dd5c      	ble.n	80101f0 <_strtod_l+0x8b8>
 8010136:	4621      	mov	r1, r4
 8010138:	2201      	movs	r2, #1
 801013a:	9805      	ldr	r0, [sp, #20]
 801013c:	f7ff f956 	bl	800f3ec <__lshift>
 8010140:	4641      	mov	r1, r8
 8010142:	4604      	mov	r4, r0
 8010144:	f7ff f9be 	bl	800f4c4 <__mcmp>
 8010148:	2800      	cmp	r0, #0
 801014a:	dd51      	ble.n	80101f0 <_strtod_l+0x8b8>
 801014c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010150:	9a08      	ldr	r2, [sp, #32]
 8010152:	0d1b      	lsrs	r3, r3, #20
 8010154:	051b      	lsls	r3, r3, #20
 8010156:	2a00      	cmp	r2, #0
 8010158:	d06b      	beq.n	8010232 <_strtod_l+0x8fa>
 801015a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801015e:	d868      	bhi.n	8010232 <_strtod_l+0x8fa>
 8010160:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010164:	f67f ae9d 	bls.w	800fea2 <_strtod_l+0x56a>
 8010168:	4b0a      	ldr	r3, [pc, #40]	@ (8010194 <_strtod_l+0x85c>)
 801016a:	4650      	mov	r0, sl
 801016c:	4659      	mov	r1, fp
 801016e:	2200      	movs	r2, #0
 8010170:	f7f0 fa62 	bl	8000638 <__aeabi_dmul>
 8010174:	4b08      	ldr	r3, [pc, #32]	@ (8010198 <_strtod_l+0x860>)
 8010176:	400b      	ands	r3, r1
 8010178:	4682      	mov	sl, r0
 801017a:	468b      	mov	fp, r1
 801017c:	2b00      	cmp	r3, #0
 801017e:	f47f ae05 	bne.w	800fd8c <_strtod_l+0x454>
 8010182:	9a05      	ldr	r2, [sp, #20]
 8010184:	2322      	movs	r3, #34	@ 0x22
 8010186:	6013      	str	r3, [r2, #0]
 8010188:	e600      	b.n	800fd8c <_strtod_l+0x454>
 801018a:	bf00      	nop
 801018c:	08012bf8 	.word	0x08012bf8
 8010190:	fffffc02 	.word	0xfffffc02
 8010194:	39500000 	.word	0x39500000
 8010198:	7ff00000 	.word	0x7ff00000
 801019c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80101a0:	d165      	bne.n	801026e <_strtod_l+0x936>
 80101a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80101a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80101a8:	b35a      	cbz	r2, 8010202 <_strtod_l+0x8ca>
 80101aa:	4a9f      	ldr	r2, [pc, #636]	@ (8010428 <_strtod_l+0xaf0>)
 80101ac:	4293      	cmp	r3, r2
 80101ae:	d12b      	bne.n	8010208 <_strtod_l+0x8d0>
 80101b0:	9b08      	ldr	r3, [sp, #32]
 80101b2:	4651      	mov	r1, sl
 80101b4:	b303      	cbz	r3, 80101f8 <_strtod_l+0x8c0>
 80101b6:	4b9d      	ldr	r3, [pc, #628]	@ (801042c <_strtod_l+0xaf4>)
 80101b8:	465a      	mov	r2, fp
 80101ba:	4013      	ands	r3, r2
 80101bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80101c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80101c4:	d81b      	bhi.n	80101fe <_strtod_l+0x8c6>
 80101c6:	0d1b      	lsrs	r3, r3, #20
 80101c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80101cc:	fa02 f303 	lsl.w	r3, r2, r3
 80101d0:	4299      	cmp	r1, r3
 80101d2:	d119      	bne.n	8010208 <_strtod_l+0x8d0>
 80101d4:	4b96      	ldr	r3, [pc, #600]	@ (8010430 <_strtod_l+0xaf8>)
 80101d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80101d8:	429a      	cmp	r2, r3
 80101da:	d102      	bne.n	80101e2 <_strtod_l+0x8aa>
 80101dc:	3101      	adds	r1, #1
 80101de:	f43f adca 	beq.w	800fd76 <_strtod_l+0x43e>
 80101e2:	4b92      	ldr	r3, [pc, #584]	@ (801042c <_strtod_l+0xaf4>)
 80101e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80101e6:	401a      	ands	r2, r3
 80101e8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80101ec:	f04f 0a00 	mov.w	sl, #0
 80101f0:	9b08      	ldr	r3, [sp, #32]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d1b8      	bne.n	8010168 <_strtod_l+0x830>
 80101f6:	e5c9      	b.n	800fd8c <_strtod_l+0x454>
 80101f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80101fc:	e7e8      	b.n	80101d0 <_strtod_l+0x898>
 80101fe:	4613      	mov	r3, r2
 8010200:	e7e6      	b.n	80101d0 <_strtod_l+0x898>
 8010202:	ea53 030a 	orrs.w	r3, r3, sl
 8010206:	d0a1      	beq.n	801014c <_strtod_l+0x814>
 8010208:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801020a:	b1db      	cbz	r3, 8010244 <_strtod_l+0x90c>
 801020c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801020e:	4213      	tst	r3, r2
 8010210:	d0ee      	beq.n	80101f0 <_strtod_l+0x8b8>
 8010212:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010214:	9a08      	ldr	r2, [sp, #32]
 8010216:	4650      	mov	r0, sl
 8010218:	4659      	mov	r1, fp
 801021a:	b1bb      	cbz	r3, 801024c <_strtod_l+0x914>
 801021c:	f7ff fb6e 	bl	800f8fc <sulp>
 8010220:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010224:	ec53 2b10 	vmov	r2, r3, d0
 8010228:	f7f0 f850 	bl	80002cc <__adddf3>
 801022c:	4682      	mov	sl, r0
 801022e:	468b      	mov	fp, r1
 8010230:	e7de      	b.n	80101f0 <_strtod_l+0x8b8>
 8010232:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010236:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801023a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801023e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8010242:	e7d5      	b.n	80101f0 <_strtod_l+0x8b8>
 8010244:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010246:	ea13 0f0a 	tst.w	r3, sl
 801024a:	e7e1      	b.n	8010210 <_strtod_l+0x8d8>
 801024c:	f7ff fb56 	bl	800f8fc <sulp>
 8010250:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010254:	ec53 2b10 	vmov	r2, r3, d0
 8010258:	f7f0 f836 	bl	80002c8 <__aeabi_dsub>
 801025c:	2200      	movs	r2, #0
 801025e:	2300      	movs	r3, #0
 8010260:	4682      	mov	sl, r0
 8010262:	468b      	mov	fp, r1
 8010264:	f7f0 fc50 	bl	8000b08 <__aeabi_dcmpeq>
 8010268:	2800      	cmp	r0, #0
 801026a:	d0c1      	beq.n	80101f0 <_strtod_l+0x8b8>
 801026c:	e619      	b.n	800fea2 <_strtod_l+0x56a>
 801026e:	4641      	mov	r1, r8
 8010270:	4620      	mov	r0, r4
 8010272:	f7ff fa9f 	bl	800f7b4 <__ratio>
 8010276:	ec57 6b10 	vmov	r6, r7, d0
 801027a:	2200      	movs	r2, #0
 801027c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010280:	4630      	mov	r0, r6
 8010282:	4639      	mov	r1, r7
 8010284:	f7f0 fc54 	bl	8000b30 <__aeabi_dcmple>
 8010288:	2800      	cmp	r0, #0
 801028a:	d06f      	beq.n	801036c <_strtod_l+0xa34>
 801028c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801028e:	2b00      	cmp	r3, #0
 8010290:	d17a      	bne.n	8010388 <_strtod_l+0xa50>
 8010292:	f1ba 0f00 	cmp.w	sl, #0
 8010296:	d158      	bne.n	801034a <_strtod_l+0xa12>
 8010298:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801029a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d15a      	bne.n	8010358 <_strtod_l+0xa20>
 80102a2:	4b64      	ldr	r3, [pc, #400]	@ (8010434 <_strtod_l+0xafc>)
 80102a4:	2200      	movs	r2, #0
 80102a6:	4630      	mov	r0, r6
 80102a8:	4639      	mov	r1, r7
 80102aa:	f7f0 fc37 	bl	8000b1c <__aeabi_dcmplt>
 80102ae:	2800      	cmp	r0, #0
 80102b0:	d159      	bne.n	8010366 <_strtod_l+0xa2e>
 80102b2:	4630      	mov	r0, r6
 80102b4:	4639      	mov	r1, r7
 80102b6:	4b60      	ldr	r3, [pc, #384]	@ (8010438 <_strtod_l+0xb00>)
 80102b8:	2200      	movs	r2, #0
 80102ba:	f7f0 f9bd 	bl	8000638 <__aeabi_dmul>
 80102be:	4606      	mov	r6, r0
 80102c0:	460f      	mov	r7, r1
 80102c2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80102c6:	9606      	str	r6, [sp, #24]
 80102c8:	9307      	str	r3, [sp, #28]
 80102ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80102ce:	4d57      	ldr	r5, [pc, #348]	@ (801042c <_strtod_l+0xaf4>)
 80102d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80102d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80102d6:	401d      	ands	r5, r3
 80102d8:	4b58      	ldr	r3, [pc, #352]	@ (801043c <_strtod_l+0xb04>)
 80102da:	429d      	cmp	r5, r3
 80102dc:	f040 80b2 	bne.w	8010444 <_strtod_l+0xb0c>
 80102e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80102e2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80102e6:	ec4b ab10 	vmov	d0, sl, fp
 80102ea:	f7ff f99b 	bl	800f624 <__ulp>
 80102ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80102f2:	ec51 0b10 	vmov	r0, r1, d0
 80102f6:	f7f0 f99f 	bl	8000638 <__aeabi_dmul>
 80102fa:	4652      	mov	r2, sl
 80102fc:	465b      	mov	r3, fp
 80102fe:	f7ef ffe5 	bl	80002cc <__adddf3>
 8010302:	460b      	mov	r3, r1
 8010304:	4949      	ldr	r1, [pc, #292]	@ (801042c <_strtod_l+0xaf4>)
 8010306:	4a4e      	ldr	r2, [pc, #312]	@ (8010440 <_strtod_l+0xb08>)
 8010308:	4019      	ands	r1, r3
 801030a:	4291      	cmp	r1, r2
 801030c:	4682      	mov	sl, r0
 801030e:	d942      	bls.n	8010396 <_strtod_l+0xa5e>
 8010310:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010312:	4b47      	ldr	r3, [pc, #284]	@ (8010430 <_strtod_l+0xaf8>)
 8010314:	429a      	cmp	r2, r3
 8010316:	d103      	bne.n	8010320 <_strtod_l+0x9e8>
 8010318:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801031a:	3301      	adds	r3, #1
 801031c:	f43f ad2b 	beq.w	800fd76 <_strtod_l+0x43e>
 8010320:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8010430 <_strtod_l+0xaf8>
 8010324:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8010328:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801032a:	9805      	ldr	r0, [sp, #20]
 801032c:	f7fe fe46 	bl	800efbc <_Bfree>
 8010330:	9805      	ldr	r0, [sp, #20]
 8010332:	4649      	mov	r1, r9
 8010334:	f7fe fe42 	bl	800efbc <_Bfree>
 8010338:	9805      	ldr	r0, [sp, #20]
 801033a:	4641      	mov	r1, r8
 801033c:	f7fe fe3e 	bl	800efbc <_Bfree>
 8010340:	9805      	ldr	r0, [sp, #20]
 8010342:	4621      	mov	r1, r4
 8010344:	f7fe fe3a 	bl	800efbc <_Bfree>
 8010348:	e618      	b.n	800ff7c <_strtod_l+0x644>
 801034a:	f1ba 0f01 	cmp.w	sl, #1
 801034e:	d103      	bne.n	8010358 <_strtod_l+0xa20>
 8010350:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010352:	2b00      	cmp	r3, #0
 8010354:	f43f ada5 	beq.w	800fea2 <_strtod_l+0x56a>
 8010358:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010408 <_strtod_l+0xad0>
 801035c:	4f35      	ldr	r7, [pc, #212]	@ (8010434 <_strtod_l+0xafc>)
 801035e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010362:	2600      	movs	r6, #0
 8010364:	e7b1      	b.n	80102ca <_strtod_l+0x992>
 8010366:	4f34      	ldr	r7, [pc, #208]	@ (8010438 <_strtod_l+0xb00>)
 8010368:	2600      	movs	r6, #0
 801036a:	e7aa      	b.n	80102c2 <_strtod_l+0x98a>
 801036c:	4b32      	ldr	r3, [pc, #200]	@ (8010438 <_strtod_l+0xb00>)
 801036e:	4630      	mov	r0, r6
 8010370:	4639      	mov	r1, r7
 8010372:	2200      	movs	r2, #0
 8010374:	f7f0 f960 	bl	8000638 <__aeabi_dmul>
 8010378:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801037a:	4606      	mov	r6, r0
 801037c:	460f      	mov	r7, r1
 801037e:	2b00      	cmp	r3, #0
 8010380:	d09f      	beq.n	80102c2 <_strtod_l+0x98a>
 8010382:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010386:	e7a0      	b.n	80102ca <_strtod_l+0x992>
 8010388:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010410 <_strtod_l+0xad8>
 801038c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010390:	ec57 6b17 	vmov	r6, r7, d7
 8010394:	e799      	b.n	80102ca <_strtod_l+0x992>
 8010396:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801039a:	9b08      	ldr	r3, [sp, #32]
 801039c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d1c1      	bne.n	8010328 <_strtod_l+0x9f0>
 80103a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80103a8:	0d1b      	lsrs	r3, r3, #20
 80103aa:	051b      	lsls	r3, r3, #20
 80103ac:	429d      	cmp	r5, r3
 80103ae:	d1bb      	bne.n	8010328 <_strtod_l+0x9f0>
 80103b0:	4630      	mov	r0, r6
 80103b2:	4639      	mov	r1, r7
 80103b4:	f7f0 fca0 	bl	8000cf8 <__aeabi_d2lz>
 80103b8:	f7f0 f910 	bl	80005dc <__aeabi_l2d>
 80103bc:	4602      	mov	r2, r0
 80103be:	460b      	mov	r3, r1
 80103c0:	4630      	mov	r0, r6
 80103c2:	4639      	mov	r1, r7
 80103c4:	f7ef ff80 	bl	80002c8 <__aeabi_dsub>
 80103c8:	460b      	mov	r3, r1
 80103ca:	4602      	mov	r2, r0
 80103cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80103d0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80103d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80103d6:	ea46 060a 	orr.w	r6, r6, sl
 80103da:	431e      	orrs	r6, r3
 80103dc:	d06f      	beq.n	80104be <_strtod_l+0xb86>
 80103de:	a30e      	add	r3, pc, #56	@ (adr r3, 8010418 <_strtod_l+0xae0>)
 80103e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e4:	f7f0 fb9a 	bl	8000b1c <__aeabi_dcmplt>
 80103e8:	2800      	cmp	r0, #0
 80103ea:	f47f accf 	bne.w	800fd8c <_strtod_l+0x454>
 80103ee:	a30c      	add	r3, pc, #48	@ (adr r3, 8010420 <_strtod_l+0xae8>)
 80103f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80103f8:	f7f0 fbae 	bl	8000b58 <__aeabi_dcmpgt>
 80103fc:	2800      	cmp	r0, #0
 80103fe:	d093      	beq.n	8010328 <_strtod_l+0x9f0>
 8010400:	e4c4      	b.n	800fd8c <_strtod_l+0x454>
 8010402:	bf00      	nop
 8010404:	f3af 8000 	nop.w
 8010408:	00000000 	.word	0x00000000
 801040c:	bff00000 	.word	0xbff00000
 8010410:	00000000 	.word	0x00000000
 8010414:	3ff00000 	.word	0x3ff00000
 8010418:	94a03595 	.word	0x94a03595
 801041c:	3fdfffff 	.word	0x3fdfffff
 8010420:	35afe535 	.word	0x35afe535
 8010424:	3fe00000 	.word	0x3fe00000
 8010428:	000fffff 	.word	0x000fffff
 801042c:	7ff00000 	.word	0x7ff00000
 8010430:	7fefffff 	.word	0x7fefffff
 8010434:	3ff00000 	.word	0x3ff00000
 8010438:	3fe00000 	.word	0x3fe00000
 801043c:	7fe00000 	.word	0x7fe00000
 8010440:	7c9fffff 	.word	0x7c9fffff
 8010444:	9b08      	ldr	r3, [sp, #32]
 8010446:	b323      	cbz	r3, 8010492 <_strtod_l+0xb5a>
 8010448:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801044c:	d821      	bhi.n	8010492 <_strtod_l+0xb5a>
 801044e:	a328      	add	r3, pc, #160	@ (adr r3, 80104f0 <_strtod_l+0xbb8>)
 8010450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010454:	4630      	mov	r0, r6
 8010456:	4639      	mov	r1, r7
 8010458:	f7f0 fb6a 	bl	8000b30 <__aeabi_dcmple>
 801045c:	b1a0      	cbz	r0, 8010488 <_strtod_l+0xb50>
 801045e:	4639      	mov	r1, r7
 8010460:	4630      	mov	r0, r6
 8010462:	f7f0 fbc1 	bl	8000be8 <__aeabi_d2uiz>
 8010466:	2801      	cmp	r0, #1
 8010468:	bf38      	it	cc
 801046a:	2001      	movcc	r0, #1
 801046c:	f7f0 f86a 	bl	8000544 <__aeabi_ui2d>
 8010470:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010472:	4606      	mov	r6, r0
 8010474:	460f      	mov	r7, r1
 8010476:	b9fb      	cbnz	r3, 80104b8 <_strtod_l+0xb80>
 8010478:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801047c:	9014      	str	r0, [sp, #80]	@ 0x50
 801047e:	9315      	str	r3, [sp, #84]	@ 0x54
 8010480:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8010484:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010488:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801048a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801048e:	1b5b      	subs	r3, r3, r5
 8010490:	9311      	str	r3, [sp, #68]	@ 0x44
 8010492:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010496:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801049a:	f7ff f8c3 	bl	800f624 <__ulp>
 801049e:	4650      	mov	r0, sl
 80104a0:	ec53 2b10 	vmov	r2, r3, d0
 80104a4:	4659      	mov	r1, fp
 80104a6:	f7f0 f8c7 	bl	8000638 <__aeabi_dmul>
 80104aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80104ae:	f7ef ff0d 	bl	80002cc <__adddf3>
 80104b2:	4682      	mov	sl, r0
 80104b4:	468b      	mov	fp, r1
 80104b6:	e770      	b.n	801039a <_strtod_l+0xa62>
 80104b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80104bc:	e7e0      	b.n	8010480 <_strtod_l+0xb48>
 80104be:	a30e      	add	r3, pc, #56	@ (adr r3, 80104f8 <_strtod_l+0xbc0>)
 80104c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104c4:	f7f0 fb2a 	bl	8000b1c <__aeabi_dcmplt>
 80104c8:	e798      	b.n	80103fc <_strtod_l+0xac4>
 80104ca:	2300      	movs	r3, #0
 80104cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80104ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80104d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80104d2:	6013      	str	r3, [r2, #0]
 80104d4:	f7ff ba6d 	b.w	800f9b2 <_strtod_l+0x7a>
 80104d8:	2a65      	cmp	r2, #101	@ 0x65
 80104da:	f43f ab66 	beq.w	800fbaa <_strtod_l+0x272>
 80104de:	2a45      	cmp	r2, #69	@ 0x45
 80104e0:	f43f ab63 	beq.w	800fbaa <_strtod_l+0x272>
 80104e4:	2301      	movs	r3, #1
 80104e6:	f7ff bb9e 	b.w	800fc26 <_strtod_l+0x2ee>
 80104ea:	bf00      	nop
 80104ec:	f3af 8000 	nop.w
 80104f0:	ffc00000 	.word	0xffc00000
 80104f4:	41dfffff 	.word	0x41dfffff
 80104f8:	94a03595 	.word	0x94a03595
 80104fc:	3fcfffff 	.word	0x3fcfffff

08010500 <_strtod_r>:
 8010500:	4b01      	ldr	r3, [pc, #4]	@ (8010508 <_strtod_r+0x8>)
 8010502:	f7ff ba19 	b.w	800f938 <_strtod_l>
 8010506:	bf00      	nop
 8010508:	2000008c 	.word	0x2000008c

0801050c <_strtol_l.constprop.0>:
 801050c:	2b24      	cmp	r3, #36	@ 0x24
 801050e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010512:	4686      	mov	lr, r0
 8010514:	4690      	mov	r8, r2
 8010516:	d801      	bhi.n	801051c <_strtol_l.constprop.0+0x10>
 8010518:	2b01      	cmp	r3, #1
 801051a:	d106      	bne.n	801052a <_strtol_l.constprop.0+0x1e>
 801051c:	f7fd fe24 	bl	800e168 <__errno>
 8010520:	2316      	movs	r3, #22
 8010522:	6003      	str	r3, [r0, #0]
 8010524:	2000      	movs	r0, #0
 8010526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801052a:	4834      	ldr	r0, [pc, #208]	@ (80105fc <_strtol_l.constprop.0+0xf0>)
 801052c:	460d      	mov	r5, r1
 801052e:	462a      	mov	r2, r5
 8010530:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010534:	5d06      	ldrb	r6, [r0, r4]
 8010536:	f016 0608 	ands.w	r6, r6, #8
 801053a:	d1f8      	bne.n	801052e <_strtol_l.constprop.0+0x22>
 801053c:	2c2d      	cmp	r4, #45	@ 0x2d
 801053e:	d12d      	bne.n	801059c <_strtol_l.constprop.0+0x90>
 8010540:	782c      	ldrb	r4, [r5, #0]
 8010542:	2601      	movs	r6, #1
 8010544:	1c95      	adds	r5, r2, #2
 8010546:	f033 0210 	bics.w	r2, r3, #16
 801054a:	d109      	bne.n	8010560 <_strtol_l.constprop.0+0x54>
 801054c:	2c30      	cmp	r4, #48	@ 0x30
 801054e:	d12a      	bne.n	80105a6 <_strtol_l.constprop.0+0x9a>
 8010550:	782a      	ldrb	r2, [r5, #0]
 8010552:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010556:	2a58      	cmp	r2, #88	@ 0x58
 8010558:	d125      	bne.n	80105a6 <_strtol_l.constprop.0+0x9a>
 801055a:	786c      	ldrb	r4, [r5, #1]
 801055c:	2310      	movs	r3, #16
 801055e:	3502      	adds	r5, #2
 8010560:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010564:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8010568:	2200      	movs	r2, #0
 801056a:	fbbc f9f3 	udiv	r9, ip, r3
 801056e:	4610      	mov	r0, r2
 8010570:	fb03 ca19 	mls	sl, r3, r9, ip
 8010574:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010578:	2f09      	cmp	r7, #9
 801057a:	d81b      	bhi.n	80105b4 <_strtol_l.constprop.0+0xa8>
 801057c:	463c      	mov	r4, r7
 801057e:	42a3      	cmp	r3, r4
 8010580:	dd27      	ble.n	80105d2 <_strtol_l.constprop.0+0xc6>
 8010582:	1c57      	adds	r7, r2, #1
 8010584:	d007      	beq.n	8010596 <_strtol_l.constprop.0+0x8a>
 8010586:	4581      	cmp	r9, r0
 8010588:	d320      	bcc.n	80105cc <_strtol_l.constprop.0+0xc0>
 801058a:	d101      	bne.n	8010590 <_strtol_l.constprop.0+0x84>
 801058c:	45a2      	cmp	sl, r4
 801058e:	db1d      	blt.n	80105cc <_strtol_l.constprop.0+0xc0>
 8010590:	fb00 4003 	mla	r0, r0, r3, r4
 8010594:	2201      	movs	r2, #1
 8010596:	f815 4b01 	ldrb.w	r4, [r5], #1
 801059a:	e7eb      	b.n	8010574 <_strtol_l.constprop.0+0x68>
 801059c:	2c2b      	cmp	r4, #43	@ 0x2b
 801059e:	bf04      	itt	eq
 80105a0:	782c      	ldrbeq	r4, [r5, #0]
 80105a2:	1c95      	addeq	r5, r2, #2
 80105a4:	e7cf      	b.n	8010546 <_strtol_l.constprop.0+0x3a>
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d1da      	bne.n	8010560 <_strtol_l.constprop.0+0x54>
 80105aa:	2c30      	cmp	r4, #48	@ 0x30
 80105ac:	bf0c      	ite	eq
 80105ae:	2308      	moveq	r3, #8
 80105b0:	230a      	movne	r3, #10
 80105b2:	e7d5      	b.n	8010560 <_strtol_l.constprop.0+0x54>
 80105b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80105b8:	2f19      	cmp	r7, #25
 80105ba:	d801      	bhi.n	80105c0 <_strtol_l.constprop.0+0xb4>
 80105bc:	3c37      	subs	r4, #55	@ 0x37
 80105be:	e7de      	b.n	801057e <_strtol_l.constprop.0+0x72>
 80105c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80105c4:	2f19      	cmp	r7, #25
 80105c6:	d804      	bhi.n	80105d2 <_strtol_l.constprop.0+0xc6>
 80105c8:	3c57      	subs	r4, #87	@ 0x57
 80105ca:	e7d8      	b.n	801057e <_strtol_l.constprop.0+0x72>
 80105cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80105d0:	e7e1      	b.n	8010596 <_strtol_l.constprop.0+0x8a>
 80105d2:	1c53      	adds	r3, r2, #1
 80105d4:	d108      	bne.n	80105e8 <_strtol_l.constprop.0+0xdc>
 80105d6:	2322      	movs	r3, #34	@ 0x22
 80105d8:	f8ce 3000 	str.w	r3, [lr]
 80105dc:	4660      	mov	r0, ip
 80105de:	f1b8 0f00 	cmp.w	r8, #0
 80105e2:	d0a0      	beq.n	8010526 <_strtol_l.constprop.0+0x1a>
 80105e4:	1e69      	subs	r1, r5, #1
 80105e6:	e006      	b.n	80105f6 <_strtol_l.constprop.0+0xea>
 80105e8:	b106      	cbz	r6, 80105ec <_strtol_l.constprop.0+0xe0>
 80105ea:	4240      	negs	r0, r0
 80105ec:	f1b8 0f00 	cmp.w	r8, #0
 80105f0:	d099      	beq.n	8010526 <_strtol_l.constprop.0+0x1a>
 80105f2:	2a00      	cmp	r2, #0
 80105f4:	d1f6      	bne.n	80105e4 <_strtol_l.constprop.0+0xd8>
 80105f6:	f8c8 1000 	str.w	r1, [r8]
 80105fa:	e794      	b.n	8010526 <_strtol_l.constprop.0+0x1a>
 80105fc:	080128a9 	.word	0x080128a9

08010600 <_strtol_r>:
 8010600:	f7ff bf84 	b.w	801050c <_strtol_l.constprop.0>

08010604 <__ssputs_r>:
 8010604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010608:	688e      	ldr	r6, [r1, #8]
 801060a:	461f      	mov	r7, r3
 801060c:	42be      	cmp	r6, r7
 801060e:	680b      	ldr	r3, [r1, #0]
 8010610:	4682      	mov	sl, r0
 8010612:	460c      	mov	r4, r1
 8010614:	4690      	mov	r8, r2
 8010616:	d82d      	bhi.n	8010674 <__ssputs_r+0x70>
 8010618:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801061c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010620:	d026      	beq.n	8010670 <__ssputs_r+0x6c>
 8010622:	6965      	ldr	r5, [r4, #20]
 8010624:	6909      	ldr	r1, [r1, #16]
 8010626:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801062a:	eba3 0901 	sub.w	r9, r3, r1
 801062e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010632:	1c7b      	adds	r3, r7, #1
 8010634:	444b      	add	r3, r9
 8010636:	106d      	asrs	r5, r5, #1
 8010638:	429d      	cmp	r5, r3
 801063a:	bf38      	it	cc
 801063c:	461d      	movcc	r5, r3
 801063e:	0553      	lsls	r3, r2, #21
 8010640:	d527      	bpl.n	8010692 <__ssputs_r+0x8e>
 8010642:	4629      	mov	r1, r5
 8010644:	f7fb fd7a 	bl	800c13c <_malloc_r>
 8010648:	4606      	mov	r6, r0
 801064a:	b360      	cbz	r0, 80106a6 <__ssputs_r+0xa2>
 801064c:	6921      	ldr	r1, [r4, #16]
 801064e:	464a      	mov	r2, r9
 8010650:	f7fd fdc0 	bl	800e1d4 <memcpy>
 8010654:	89a3      	ldrh	r3, [r4, #12]
 8010656:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801065a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801065e:	81a3      	strh	r3, [r4, #12]
 8010660:	6126      	str	r6, [r4, #16]
 8010662:	6165      	str	r5, [r4, #20]
 8010664:	444e      	add	r6, r9
 8010666:	eba5 0509 	sub.w	r5, r5, r9
 801066a:	6026      	str	r6, [r4, #0]
 801066c:	60a5      	str	r5, [r4, #8]
 801066e:	463e      	mov	r6, r7
 8010670:	42be      	cmp	r6, r7
 8010672:	d900      	bls.n	8010676 <__ssputs_r+0x72>
 8010674:	463e      	mov	r6, r7
 8010676:	6820      	ldr	r0, [r4, #0]
 8010678:	4632      	mov	r2, r6
 801067a:	4641      	mov	r1, r8
 801067c:	f000 fe2b 	bl	80112d6 <memmove>
 8010680:	68a3      	ldr	r3, [r4, #8]
 8010682:	1b9b      	subs	r3, r3, r6
 8010684:	60a3      	str	r3, [r4, #8]
 8010686:	6823      	ldr	r3, [r4, #0]
 8010688:	4433      	add	r3, r6
 801068a:	6023      	str	r3, [r4, #0]
 801068c:	2000      	movs	r0, #0
 801068e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010692:	462a      	mov	r2, r5
 8010694:	f7ff f904 	bl	800f8a0 <_realloc_r>
 8010698:	4606      	mov	r6, r0
 801069a:	2800      	cmp	r0, #0
 801069c:	d1e0      	bne.n	8010660 <__ssputs_r+0x5c>
 801069e:	6921      	ldr	r1, [r4, #16]
 80106a0:	4650      	mov	r0, sl
 80106a2:	f7fe fc01 	bl	800eea8 <_free_r>
 80106a6:	230c      	movs	r3, #12
 80106a8:	f8ca 3000 	str.w	r3, [sl]
 80106ac:	89a3      	ldrh	r3, [r4, #12]
 80106ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80106b2:	81a3      	strh	r3, [r4, #12]
 80106b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80106b8:	e7e9      	b.n	801068e <__ssputs_r+0x8a>
	...

080106bc <_svfiprintf_r>:
 80106bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106c0:	4698      	mov	r8, r3
 80106c2:	898b      	ldrh	r3, [r1, #12]
 80106c4:	061b      	lsls	r3, r3, #24
 80106c6:	b09d      	sub	sp, #116	@ 0x74
 80106c8:	4607      	mov	r7, r0
 80106ca:	460d      	mov	r5, r1
 80106cc:	4614      	mov	r4, r2
 80106ce:	d510      	bpl.n	80106f2 <_svfiprintf_r+0x36>
 80106d0:	690b      	ldr	r3, [r1, #16]
 80106d2:	b973      	cbnz	r3, 80106f2 <_svfiprintf_r+0x36>
 80106d4:	2140      	movs	r1, #64	@ 0x40
 80106d6:	f7fb fd31 	bl	800c13c <_malloc_r>
 80106da:	6028      	str	r0, [r5, #0]
 80106dc:	6128      	str	r0, [r5, #16]
 80106de:	b930      	cbnz	r0, 80106ee <_svfiprintf_r+0x32>
 80106e0:	230c      	movs	r3, #12
 80106e2:	603b      	str	r3, [r7, #0]
 80106e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80106e8:	b01d      	add	sp, #116	@ 0x74
 80106ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106ee:	2340      	movs	r3, #64	@ 0x40
 80106f0:	616b      	str	r3, [r5, #20]
 80106f2:	2300      	movs	r3, #0
 80106f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80106f6:	2320      	movs	r3, #32
 80106f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80106fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8010700:	2330      	movs	r3, #48	@ 0x30
 8010702:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80108a0 <_svfiprintf_r+0x1e4>
 8010706:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801070a:	f04f 0901 	mov.w	r9, #1
 801070e:	4623      	mov	r3, r4
 8010710:	469a      	mov	sl, r3
 8010712:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010716:	b10a      	cbz	r2, 801071c <_svfiprintf_r+0x60>
 8010718:	2a25      	cmp	r2, #37	@ 0x25
 801071a:	d1f9      	bne.n	8010710 <_svfiprintf_r+0x54>
 801071c:	ebba 0b04 	subs.w	fp, sl, r4
 8010720:	d00b      	beq.n	801073a <_svfiprintf_r+0x7e>
 8010722:	465b      	mov	r3, fp
 8010724:	4622      	mov	r2, r4
 8010726:	4629      	mov	r1, r5
 8010728:	4638      	mov	r0, r7
 801072a:	f7ff ff6b 	bl	8010604 <__ssputs_r>
 801072e:	3001      	adds	r0, #1
 8010730:	f000 80a7 	beq.w	8010882 <_svfiprintf_r+0x1c6>
 8010734:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010736:	445a      	add	r2, fp
 8010738:	9209      	str	r2, [sp, #36]	@ 0x24
 801073a:	f89a 3000 	ldrb.w	r3, [sl]
 801073e:	2b00      	cmp	r3, #0
 8010740:	f000 809f 	beq.w	8010882 <_svfiprintf_r+0x1c6>
 8010744:	2300      	movs	r3, #0
 8010746:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801074a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801074e:	f10a 0a01 	add.w	sl, sl, #1
 8010752:	9304      	str	r3, [sp, #16]
 8010754:	9307      	str	r3, [sp, #28]
 8010756:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801075a:	931a      	str	r3, [sp, #104]	@ 0x68
 801075c:	4654      	mov	r4, sl
 801075e:	2205      	movs	r2, #5
 8010760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010764:	484e      	ldr	r0, [pc, #312]	@ (80108a0 <_svfiprintf_r+0x1e4>)
 8010766:	f7ef fd53 	bl	8000210 <memchr>
 801076a:	9a04      	ldr	r2, [sp, #16]
 801076c:	b9d8      	cbnz	r0, 80107a6 <_svfiprintf_r+0xea>
 801076e:	06d0      	lsls	r0, r2, #27
 8010770:	bf44      	itt	mi
 8010772:	2320      	movmi	r3, #32
 8010774:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010778:	0711      	lsls	r1, r2, #28
 801077a:	bf44      	itt	mi
 801077c:	232b      	movmi	r3, #43	@ 0x2b
 801077e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010782:	f89a 3000 	ldrb.w	r3, [sl]
 8010786:	2b2a      	cmp	r3, #42	@ 0x2a
 8010788:	d015      	beq.n	80107b6 <_svfiprintf_r+0xfa>
 801078a:	9a07      	ldr	r2, [sp, #28]
 801078c:	4654      	mov	r4, sl
 801078e:	2000      	movs	r0, #0
 8010790:	f04f 0c0a 	mov.w	ip, #10
 8010794:	4621      	mov	r1, r4
 8010796:	f811 3b01 	ldrb.w	r3, [r1], #1
 801079a:	3b30      	subs	r3, #48	@ 0x30
 801079c:	2b09      	cmp	r3, #9
 801079e:	d94b      	bls.n	8010838 <_svfiprintf_r+0x17c>
 80107a0:	b1b0      	cbz	r0, 80107d0 <_svfiprintf_r+0x114>
 80107a2:	9207      	str	r2, [sp, #28]
 80107a4:	e014      	b.n	80107d0 <_svfiprintf_r+0x114>
 80107a6:	eba0 0308 	sub.w	r3, r0, r8
 80107aa:	fa09 f303 	lsl.w	r3, r9, r3
 80107ae:	4313      	orrs	r3, r2
 80107b0:	9304      	str	r3, [sp, #16]
 80107b2:	46a2      	mov	sl, r4
 80107b4:	e7d2      	b.n	801075c <_svfiprintf_r+0xa0>
 80107b6:	9b03      	ldr	r3, [sp, #12]
 80107b8:	1d19      	adds	r1, r3, #4
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	9103      	str	r1, [sp, #12]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	bfbb      	ittet	lt
 80107c2:	425b      	neglt	r3, r3
 80107c4:	f042 0202 	orrlt.w	r2, r2, #2
 80107c8:	9307      	strge	r3, [sp, #28]
 80107ca:	9307      	strlt	r3, [sp, #28]
 80107cc:	bfb8      	it	lt
 80107ce:	9204      	strlt	r2, [sp, #16]
 80107d0:	7823      	ldrb	r3, [r4, #0]
 80107d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80107d4:	d10a      	bne.n	80107ec <_svfiprintf_r+0x130>
 80107d6:	7863      	ldrb	r3, [r4, #1]
 80107d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80107da:	d132      	bne.n	8010842 <_svfiprintf_r+0x186>
 80107dc:	9b03      	ldr	r3, [sp, #12]
 80107de:	1d1a      	adds	r2, r3, #4
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	9203      	str	r2, [sp, #12]
 80107e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80107e8:	3402      	adds	r4, #2
 80107ea:	9305      	str	r3, [sp, #20]
 80107ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80108b0 <_svfiprintf_r+0x1f4>
 80107f0:	7821      	ldrb	r1, [r4, #0]
 80107f2:	2203      	movs	r2, #3
 80107f4:	4650      	mov	r0, sl
 80107f6:	f7ef fd0b 	bl	8000210 <memchr>
 80107fa:	b138      	cbz	r0, 801080c <_svfiprintf_r+0x150>
 80107fc:	9b04      	ldr	r3, [sp, #16]
 80107fe:	eba0 000a 	sub.w	r0, r0, sl
 8010802:	2240      	movs	r2, #64	@ 0x40
 8010804:	4082      	lsls	r2, r0
 8010806:	4313      	orrs	r3, r2
 8010808:	3401      	adds	r4, #1
 801080a:	9304      	str	r3, [sp, #16]
 801080c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010810:	4824      	ldr	r0, [pc, #144]	@ (80108a4 <_svfiprintf_r+0x1e8>)
 8010812:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010816:	2206      	movs	r2, #6
 8010818:	f7ef fcfa 	bl	8000210 <memchr>
 801081c:	2800      	cmp	r0, #0
 801081e:	d036      	beq.n	801088e <_svfiprintf_r+0x1d2>
 8010820:	4b21      	ldr	r3, [pc, #132]	@ (80108a8 <_svfiprintf_r+0x1ec>)
 8010822:	bb1b      	cbnz	r3, 801086c <_svfiprintf_r+0x1b0>
 8010824:	9b03      	ldr	r3, [sp, #12]
 8010826:	3307      	adds	r3, #7
 8010828:	f023 0307 	bic.w	r3, r3, #7
 801082c:	3308      	adds	r3, #8
 801082e:	9303      	str	r3, [sp, #12]
 8010830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010832:	4433      	add	r3, r6
 8010834:	9309      	str	r3, [sp, #36]	@ 0x24
 8010836:	e76a      	b.n	801070e <_svfiprintf_r+0x52>
 8010838:	fb0c 3202 	mla	r2, ip, r2, r3
 801083c:	460c      	mov	r4, r1
 801083e:	2001      	movs	r0, #1
 8010840:	e7a8      	b.n	8010794 <_svfiprintf_r+0xd8>
 8010842:	2300      	movs	r3, #0
 8010844:	3401      	adds	r4, #1
 8010846:	9305      	str	r3, [sp, #20]
 8010848:	4619      	mov	r1, r3
 801084a:	f04f 0c0a 	mov.w	ip, #10
 801084e:	4620      	mov	r0, r4
 8010850:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010854:	3a30      	subs	r2, #48	@ 0x30
 8010856:	2a09      	cmp	r2, #9
 8010858:	d903      	bls.n	8010862 <_svfiprintf_r+0x1a6>
 801085a:	2b00      	cmp	r3, #0
 801085c:	d0c6      	beq.n	80107ec <_svfiprintf_r+0x130>
 801085e:	9105      	str	r1, [sp, #20]
 8010860:	e7c4      	b.n	80107ec <_svfiprintf_r+0x130>
 8010862:	fb0c 2101 	mla	r1, ip, r1, r2
 8010866:	4604      	mov	r4, r0
 8010868:	2301      	movs	r3, #1
 801086a:	e7f0      	b.n	801084e <_svfiprintf_r+0x192>
 801086c:	ab03      	add	r3, sp, #12
 801086e:	9300      	str	r3, [sp, #0]
 8010870:	462a      	mov	r2, r5
 8010872:	4b0e      	ldr	r3, [pc, #56]	@ (80108ac <_svfiprintf_r+0x1f0>)
 8010874:	a904      	add	r1, sp, #16
 8010876:	4638      	mov	r0, r7
 8010878:	f7fb fd8c 	bl	800c394 <_printf_float>
 801087c:	1c42      	adds	r2, r0, #1
 801087e:	4606      	mov	r6, r0
 8010880:	d1d6      	bne.n	8010830 <_svfiprintf_r+0x174>
 8010882:	89ab      	ldrh	r3, [r5, #12]
 8010884:	065b      	lsls	r3, r3, #25
 8010886:	f53f af2d 	bmi.w	80106e4 <_svfiprintf_r+0x28>
 801088a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801088c:	e72c      	b.n	80106e8 <_svfiprintf_r+0x2c>
 801088e:	ab03      	add	r3, sp, #12
 8010890:	9300      	str	r3, [sp, #0]
 8010892:	462a      	mov	r2, r5
 8010894:	4b05      	ldr	r3, [pc, #20]	@ (80108ac <_svfiprintf_r+0x1f0>)
 8010896:	a904      	add	r1, sp, #16
 8010898:	4638      	mov	r0, r7
 801089a:	f7fc f813 	bl	800c8c4 <_printf_i>
 801089e:	e7ed      	b.n	801087c <_svfiprintf_r+0x1c0>
 80108a0:	08012c20 	.word	0x08012c20
 80108a4:	08012c2a 	.word	0x08012c2a
 80108a8:	0800c395 	.word	0x0800c395
 80108ac:	08010605 	.word	0x08010605
 80108b0:	08012c26 	.word	0x08012c26

080108b4 <__sfputc_r>:
 80108b4:	6893      	ldr	r3, [r2, #8]
 80108b6:	3b01      	subs	r3, #1
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	b410      	push	{r4}
 80108bc:	6093      	str	r3, [r2, #8]
 80108be:	da08      	bge.n	80108d2 <__sfputc_r+0x1e>
 80108c0:	6994      	ldr	r4, [r2, #24]
 80108c2:	42a3      	cmp	r3, r4
 80108c4:	db01      	blt.n	80108ca <__sfputc_r+0x16>
 80108c6:	290a      	cmp	r1, #10
 80108c8:	d103      	bne.n	80108d2 <__sfputc_r+0x1e>
 80108ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108ce:	f7fd b9a1 	b.w	800dc14 <__swbuf_r>
 80108d2:	6813      	ldr	r3, [r2, #0]
 80108d4:	1c58      	adds	r0, r3, #1
 80108d6:	6010      	str	r0, [r2, #0]
 80108d8:	7019      	strb	r1, [r3, #0]
 80108da:	4608      	mov	r0, r1
 80108dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108e0:	4770      	bx	lr

080108e2 <__sfputs_r>:
 80108e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108e4:	4606      	mov	r6, r0
 80108e6:	460f      	mov	r7, r1
 80108e8:	4614      	mov	r4, r2
 80108ea:	18d5      	adds	r5, r2, r3
 80108ec:	42ac      	cmp	r4, r5
 80108ee:	d101      	bne.n	80108f4 <__sfputs_r+0x12>
 80108f0:	2000      	movs	r0, #0
 80108f2:	e007      	b.n	8010904 <__sfputs_r+0x22>
 80108f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108f8:	463a      	mov	r2, r7
 80108fa:	4630      	mov	r0, r6
 80108fc:	f7ff ffda 	bl	80108b4 <__sfputc_r>
 8010900:	1c43      	adds	r3, r0, #1
 8010902:	d1f3      	bne.n	80108ec <__sfputs_r+0xa>
 8010904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010908 <_vfiprintf_r>:
 8010908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801090c:	460d      	mov	r5, r1
 801090e:	b09d      	sub	sp, #116	@ 0x74
 8010910:	4614      	mov	r4, r2
 8010912:	4698      	mov	r8, r3
 8010914:	4606      	mov	r6, r0
 8010916:	b118      	cbz	r0, 8010920 <_vfiprintf_r+0x18>
 8010918:	6a03      	ldr	r3, [r0, #32]
 801091a:	b90b      	cbnz	r3, 8010920 <_vfiprintf_r+0x18>
 801091c:	f7fc fda8 	bl	800d470 <__sinit>
 8010920:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010922:	07d9      	lsls	r1, r3, #31
 8010924:	d405      	bmi.n	8010932 <_vfiprintf_r+0x2a>
 8010926:	89ab      	ldrh	r3, [r5, #12]
 8010928:	059a      	lsls	r2, r3, #22
 801092a:	d402      	bmi.n	8010932 <_vfiprintf_r+0x2a>
 801092c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801092e:	f7fd fc47 	bl	800e1c0 <__retarget_lock_acquire_recursive>
 8010932:	89ab      	ldrh	r3, [r5, #12]
 8010934:	071b      	lsls	r3, r3, #28
 8010936:	d501      	bpl.n	801093c <_vfiprintf_r+0x34>
 8010938:	692b      	ldr	r3, [r5, #16]
 801093a:	b99b      	cbnz	r3, 8010964 <_vfiprintf_r+0x5c>
 801093c:	4629      	mov	r1, r5
 801093e:	4630      	mov	r0, r6
 8010940:	f7fd f9a6 	bl	800dc90 <__swsetup_r>
 8010944:	b170      	cbz	r0, 8010964 <_vfiprintf_r+0x5c>
 8010946:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010948:	07dc      	lsls	r4, r3, #31
 801094a:	d504      	bpl.n	8010956 <_vfiprintf_r+0x4e>
 801094c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010950:	b01d      	add	sp, #116	@ 0x74
 8010952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010956:	89ab      	ldrh	r3, [r5, #12]
 8010958:	0598      	lsls	r0, r3, #22
 801095a:	d4f7      	bmi.n	801094c <_vfiprintf_r+0x44>
 801095c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801095e:	f7fd fc30 	bl	800e1c2 <__retarget_lock_release_recursive>
 8010962:	e7f3      	b.n	801094c <_vfiprintf_r+0x44>
 8010964:	2300      	movs	r3, #0
 8010966:	9309      	str	r3, [sp, #36]	@ 0x24
 8010968:	2320      	movs	r3, #32
 801096a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801096e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010972:	2330      	movs	r3, #48	@ 0x30
 8010974:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010b24 <_vfiprintf_r+0x21c>
 8010978:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801097c:	f04f 0901 	mov.w	r9, #1
 8010980:	4623      	mov	r3, r4
 8010982:	469a      	mov	sl, r3
 8010984:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010988:	b10a      	cbz	r2, 801098e <_vfiprintf_r+0x86>
 801098a:	2a25      	cmp	r2, #37	@ 0x25
 801098c:	d1f9      	bne.n	8010982 <_vfiprintf_r+0x7a>
 801098e:	ebba 0b04 	subs.w	fp, sl, r4
 8010992:	d00b      	beq.n	80109ac <_vfiprintf_r+0xa4>
 8010994:	465b      	mov	r3, fp
 8010996:	4622      	mov	r2, r4
 8010998:	4629      	mov	r1, r5
 801099a:	4630      	mov	r0, r6
 801099c:	f7ff ffa1 	bl	80108e2 <__sfputs_r>
 80109a0:	3001      	adds	r0, #1
 80109a2:	f000 80a7 	beq.w	8010af4 <_vfiprintf_r+0x1ec>
 80109a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80109a8:	445a      	add	r2, fp
 80109aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80109ac:	f89a 3000 	ldrb.w	r3, [sl]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	f000 809f 	beq.w	8010af4 <_vfiprintf_r+0x1ec>
 80109b6:	2300      	movs	r3, #0
 80109b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80109bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80109c0:	f10a 0a01 	add.w	sl, sl, #1
 80109c4:	9304      	str	r3, [sp, #16]
 80109c6:	9307      	str	r3, [sp, #28]
 80109c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80109cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80109ce:	4654      	mov	r4, sl
 80109d0:	2205      	movs	r2, #5
 80109d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109d6:	4853      	ldr	r0, [pc, #332]	@ (8010b24 <_vfiprintf_r+0x21c>)
 80109d8:	f7ef fc1a 	bl	8000210 <memchr>
 80109dc:	9a04      	ldr	r2, [sp, #16]
 80109de:	b9d8      	cbnz	r0, 8010a18 <_vfiprintf_r+0x110>
 80109e0:	06d1      	lsls	r1, r2, #27
 80109e2:	bf44      	itt	mi
 80109e4:	2320      	movmi	r3, #32
 80109e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80109ea:	0713      	lsls	r3, r2, #28
 80109ec:	bf44      	itt	mi
 80109ee:	232b      	movmi	r3, #43	@ 0x2b
 80109f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80109f4:	f89a 3000 	ldrb.w	r3, [sl]
 80109f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80109fa:	d015      	beq.n	8010a28 <_vfiprintf_r+0x120>
 80109fc:	9a07      	ldr	r2, [sp, #28]
 80109fe:	4654      	mov	r4, sl
 8010a00:	2000      	movs	r0, #0
 8010a02:	f04f 0c0a 	mov.w	ip, #10
 8010a06:	4621      	mov	r1, r4
 8010a08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a0c:	3b30      	subs	r3, #48	@ 0x30
 8010a0e:	2b09      	cmp	r3, #9
 8010a10:	d94b      	bls.n	8010aaa <_vfiprintf_r+0x1a2>
 8010a12:	b1b0      	cbz	r0, 8010a42 <_vfiprintf_r+0x13a>
 8010a14:	9207      	str	r2, [sp, #28]
 8010a16:	e014      	b.n	8010a42 <_vfiprintf_r+0x13a>
 8010a18:	eba0 0308 	sub.w	r3, r0, r8
 8010a1c:	fa09 f303 	lsl.w	r3, r9, r3
 8010a20:	4313      	orrs	r3, r2
 8010a22:	9304      	str	r3, [sp, #16]
 8010a24:	46a2      	mov	sl, r4
 8010a26:	e7d2      	b.n	80109ce <_vfiprintf_r+0xc6>
 8010a28:	9b03      	ldr	r3, [sp, #12]
 8010a2a:	1d19      	adds	r1, r3, #4
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	9103      	str	r1, [sp, #12]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	bfbb      	ittet	lt
 8010a34:	425b      	neglt	r3, r3
 8010a36:	f042 0202 	orrlt.w	r2, r2, #2
 8010a3a:	9307      	strge	r3, [sp, #28]
 8010a3c:	9307      	strlt	r3, [sp, #28]
 8010a3e:	bfb8      	it	lt
 8010a40:	9204      	strlt	r2, [sp, #16]
 8010a42:	7823      	ldrb	r3, [r4, #0]
 8010a44:	2b2e      	cmp	r3, #46	@ 0x2e
 8010a46:	d10a      	bne.n	8010a5e <_vfiprintf_r+0x156>
 8010a48:	7863      	ldrb	r3, [r4, #1]
 8010a4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a4c:	d132      	bne.n	8010ab4 <_vfiprintf_r+0x1ac>
 8010a4e:	9b03      	ldr	r3, [sp, #12]
 8010a50:	1d1a      	adds	r2, r3, #4
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	9203      	str	r2, [sp, #12]
 8010a56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010a5a:	3402      	adds	r4, #2
 8010a5c:	9305      	str	r3, [sp, #20]
 8010a5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010b34 <_vfiprintf_r+0x22c>
 8010a62:	7821      	ldrb	r1, [r4, #0]
 8010a64:	2203      	movs	r2, #3
 8010a66:	4650      	mov	r0, sl
 8010a68:	f7ef fbd2 	bl	8000210 <memchr>
 8010a6c:	b138      	cbz	r0, 8010a7e <_vfiprintf_r+0x176>
 8010a6e:	9b04      	ldr	r3, [sp, #16]
 8010a70:	eba0 000a 	sub.w	r0, r0, sl
 8010a74:	2240      	movs	r2, #64	@ 0x40
 8010a76:	4082      	lsls	r2, r0
 8010a78:	4313      	orrs	r3, r2
 8010a7a:	3401      	adds	r4, #1
 8010a7c:	9304      	str	r3, [sp, #16]
 8010a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a82:	4829      	ldr	r0, [pc, #164]	@ (8010b28 <_vfiprintf_r+0x220>)
 8010a84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010a88:	2206      	movs	r2, #6
 8010a8a:	f7ef fbc1 	bl	8000210 <memchr>
 8010a8e:	2800      	cmp	r0, #0
 8010a90:	d03f      	beq.n	8010b12 <_vfiprintf_r+0x20a>
 8010a92:	4b26      	ldr	r3, [pc, #152]	@ (8010b2c <_vfiprintf_r+0x224>)
 8010a94:	bb1b      	cbnz	r3, 8010ade <_vfiprintf_r+0x1d6>
 8010a96:	9b03      	ldr	r3, [sp, #12]
 8010a98:	3307      	adds	r3, #7
 8010a9a:	f023 0307 	bic.w	r3, r3, #7
 8010a9e:	3308      	adds	r3, #8
 8010aa0:	9303      	str	r3, [sp, #12]
 8010aa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010aa4:	443b      	add	r3, r7
 8010aa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8010aa8:	e76a      	b.n	8010980 <_vfiprintf_r+0x78>
 8010aaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8010aae:	460c      	mov	r4, r1
 8010ab0:	2001      	movs	r0, #1
 8010ab2:	e7a8      	b.n	8010a06 <_vfiprintf_r+0xfe>
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	3401      	adds	r4, #1
 8010ab8:	9305      	str	r3, [sp, #20]
 8010aba:	4619      	mov	r1, r3
 8010abc:	f04f 0c0a 	mov.w	ip, #10
 8010ac0:	4620      	mov	r0, r4
 8010ac2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ac6:	3a30      	subs	r2, #48	@ 0x30
 8010ac8:	2a09      	cmp	r2, #9
 8010aca:	d903      	bls.n	8010ad4 <_vfiprintf_r+0x1cc>
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d0c6      	beq.n	8010a5e <_vfiprintf_r+0x156>
 8010ad0:	9105      	str	r1, [sp, #20]
 8010ad2:	e7c4      	b.n	8010a5e <_vfiprintf_r+0x156>
 8010ad4:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ad8:	4604      	mov	r4, r0
 8010ada:	2301      	movs	r3, #1
 8010adc:	e7f0      	b.n	8010ac0 <_vfiprintf_r+0x1b8>
 8010ade:	ab03      	add	r3, sp, #12
 8010ae0:	9300      	str	r3, [sp, #0]
 8010ae2:	462a      	mov	r2, r5
 8010ae4:	4b12      	ldr	r3, [pc, #72]	@ (8010b30 <_vfiprintf_r+0x228>)
 8010ae6:	a904      	add	r1, sp, #16
 8010ae8:	4630      	mov	r0, r6
 8010aea:	f7fb fc53 	bl	800c394 <_printf_float>
 8010aee:	4607      	mov	r7, r0
 8010af0:	1c78      	adds	r0, r7, #1
 8010af2:	d1d6      	bne.n	8010aa2 <_vfiprintf_r+0x19a>
 8010af4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010af6:	07d9      	lsls	r1, r3, #31
 8010af8:	d405      	bmi.n	8010b06 <_vfiprintf_r+0x1fe>
 8010afa:	89ab      	ldrh	r3, [r5, #12]
 8010afc:	059a      	lsls	r2, r3, #22
 8010afe:	d402      	bmi.n	8010b06 <_vfiprintf_r+0x1fe>
 8010b00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010b02:	f7fd fb5e 	bl	800e1c2 <__retarget_lock_release_recursive>
 8010b06:	89ab      	ldrh	r3, [r5, #12]
 8010b08:	065b      	lsls	r3, r3, #25
 8010b0a:	f53f af1f 	bmi.w	801094c <_vfiprintf_r+0x44>
 8010b0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010b10:	e71e      	b.n	8010950 <_vfiprintf_r+0x48>
 8010b12:	ab03      	add	r3, sp, #12
 8010b14:	9300      	str	r3, [sp, #0]
 8010b16:	462a      	mov	r2, r5
 8010b18:	4b05      	ldr	r3, [pc, #20]	@ (8010b30 <_vfiprintf_r+0x228>)
 8010b1a:	a904      	add	r1, sp, #16
 8010b1c:	4630      	mov	r0, r6
 8010b1e:	f7fb fed1 	bl	800c8c4 <_printf_i>
 8010b22:	e7e4      	b.n	8010aee <_vfiprintf_r+0x1e6>
 8010b24:	08012c20 	.word	0x08012c20
 8010b28:	08012c2a 	.word	0x08012c2a
 8010b2c:	0800c395 	.word	0x0800c395
 8010b30:	080108e3 	.word	0x080108e3
 8010b34:	08012c26 	.word	0x08012c26

08010b38 <__svfiscanf_r>:
 8010b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b3c:	461d      	mov	r5, r3
 8010b3e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8010b40:	07df      	lsls	r7, r3, #31
 8010b42:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8010b46:	4606      	mov	r6, r0
 8010b48:	460c      	mov	r4, r1
 8010b4a:	4691      	mov	r9, r2
 8010b4c:	d405      	bmi.n	8010b5a <__svfiscanf_r+0x22>
 8010b4e:	898b      	ldrh	r3, [r1, #12]
 8010b50:	0598      	lsls	r0, r3, #22
 8010b52:	d402      	bmi.n	8010b5a <__svfiscanf_r+0x22>
 8010b54:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 8010b56:	f7fd fb33 	bl	800e1c0 <__retarget_lock_acquire_recursive>
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 8010b60:	4ba7      	ldr	r3, [pc, #668]	@ (8010e00 <__svfiscanf_r+0x2c8>)
 8010b62:	93a0      	str	r3, [sp, #640]	@ 0x280
 8010b64:	f10d 0804 	add.w	r8, sp, #4
 8010b68:	4ba6      	ldr	r3, [pc, #664]	@ (8010e04 <__svfiscanf_r+0x2cc>)
 8010b6a:	4fa7      	ldr	r7, [pc, #668]	@ (8010e08 <__svfiscanf_r+0x2d0>)
 8010b6c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8010b70:	93a1      	str	r3, [sp, #644]	@ 0x284
 8010b72:	9500      	str	r5, [sp, #0]
 8010b74:	f899 3000 	ldrb.w	r3, [r9]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	f000 816c 	beq.w	8010e56 <__svfiscanf_r+0x31e>
 8010b7e:	5cf9      	ldrb	r1, [r7, r3]
 8010b80:	f011 0108 	ands.w	r1, r1, #8
 8010b84:	f109 0501 	add.w	r5, r9, #1
 8010b88:	d019      	beq.n	8010bbe <__svfiscanf_r+0x86>
 8010b8a:	6863      	ldr	r3, [r4, #4]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	dd0f      	ble.n	8010bb0 <__svfiscanf_r+0x78>
 8010b90:	6823      	ldr	r3, [r4, #0]
 8010b92:	781a      	ldrb	r2, [r3, #0]
 8010b94:	5cba      	ldrb	r2, [r7, r2]
 8010b96:	0711      	lsls	r1, r2, #28
 8010b98:	d401      	bmi.n	8010b9e <__svfiscanf_r+0x66>
 8010b9a:	46a9      	mov	r9, r5
 8010b9c:	e7ea      	b.n	8010b74 <__svfiscanf_r+0x3c>
 8010b9e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010ba0:	3201      	adds	r2, #1
 8010ba2:	9245      	str	r2, [sp, #276]	@ 0x114
 8010ba4:	6862      	ldr	r2, [r4, #4]
 8010ba6:	3301      	adds	r3, #1
 8010ba8:	3a01      	subs	r2, #1
 8010baa:	6062      	str	r2, [r4, #4]
 8010bac:	6023      	str	r3, [r4, #0]
 8010bae:	e7ec      	b.n	8010b8a <__svfiscanf_r+0x52>
 8010bb0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010bb2:	4621      	mov	r1, r4
 8010bb4:	4630      	mov	r0, r6
 8010bb6:	4798      	blx	r3
 8010bb8:	2800      	cmp	r0, #0
 8010bba:	d0e9      	beq.n	8010b90 <__svfiscanf_r+0x58>
 8010bbc:	e7ed      	b.n	8010b9a <__svfiscanf_r+0x62>
 8010bbe:	2b25      	cmp	r3, #37	@ 0x25
 8010bc0:	d012      	beq.n	8010be8 <__svfiscanf_r+0xb0>
 8010bc2:	4699      	mov	r9, r3
 8010bc4:	6863      	ldr	r3, [r4, #4]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	f340 8095 	ble.w	8010cf6 <__svfiscanf_r+0x1be>
 8010bcc:	6822      	ldr	r2, [r4, #0]
 8010bce:	7813      	ldrb	r3, [r2, #0]
 8010bd0:	454b      	cmp	r3, r9
 8010bd2:	f040 8140 	bne.w	8010e56 <__svfiscanf_r+0x31e>
 8010bd6:	6863      	ldr	r3, [r4, #4]
 8010bd8:	3b01      	subs	r3, #1
 8010bda:	6063      	str	r3, [r4, #4]
 8010bdc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8010bde:	3201      	adds	r2, #1
 8010be0:	3301      	adds	r3, #1
 8010be2:	6022      	str	r2, [r4, #0]
 8010be4:	9345      	str	r3, [sp, #276]	@ 0x114
 8010be6:	e7d8      	b.n	8010b9a <__svfiscanf_r+0x62>
 8010be8:	9141      	str	r1, [sp, #260]	@ 0x104
 8010bea:	9143      	str	r1, [sp, #268]	@ 0x10c
 8010bec:	f899 3001 	ldrb.w	r3, [r9, #1]
 8010bf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8010bf2:	bf02      	ittt	eq
 8010bf4:	2310      	moveq	r3, #16
 8010bf6:	9341      	streq	r3, [sp, #260]	@ 0x104
 8010bf8:	f109 0502 	addeq.w	r5, r9, #2
 8010bfc:	220a      	movs	r2, #10
 8010bfe:	46a9      	mov	r9, r5
 8010c00:	f819 1b01 	ldrb.w	r1, [r9], #1
 8010c04:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8010c08:	2b09      	cmp	r3, #9
 8010c0a:	d91f      	bls.n	8010c4c <__svfiscanf_r+0x114>
 8010c0c:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 8010e0c <__svfiscanf_r+0x2d4>
 8010c10:	2203      	movs	r2, #3
 8010c12:	4650      	mov	r0, sl
 8010c14:	f7ef fafc 	bl	8000210 <memchr>
 8010c18:	b138      	cbz	r0, 8010c2a <__svfiscanf_r+0xf2>
 8010c1a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010c1c:	eba0 000a 	sub.w	r0, r0, sl
 8010c20:	2301      	movs	r3, #1
 8010c22:	4083      	lsls	r3, r0
 8010c24:	4313      	orrs	r3, r2
 8010c26:	9341      	str	r3, [sp, #260]	@ 0x104
 8010c28:	464d      	mov	r5, r9
 8010c2a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010c2e:	2b78      	cmp	r3, #120	@ 0x78
 8010c30:	d807      	bhi.n	8010c42 <__svfiscanf_r+0x10a>
 8010c32:	2b57      	cmp	r3, #87	@ 0x57
 8010c34:	d811      	bhi.n	8010c5a <__svfiscanf_r+0x122>
 8010c36:	2b25      	cmp	r3, #37	@ 0x25
 8010c38:	d0c3      	beq.n	8010bc2 <__svfiscanf_r+0x8a>
 8010c3a:	d857      	bhi.n	8010cec <__svfiscanf_r+0x1b4>
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	f000 80c1 	beq.w	8010dc4 <__svfiscanf_r+0x28c>
 8010c42:	2303      	movs	r3, #3
 8010c44:	9347      	str	r3, [sp, #284]	@ 0x11c
 8010c46:	230a      	movs	r3, #10
 8010c48:	9342      	str	r3, [sp, #264]	@ 0x108
 8010c4a:	e07e      	b.n	8010d4a <__svfiscanf_r+0x212>
 8010c4c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8010c4e:	fb02 1103 	mla	r1, r2, r3, r1
 8010c52:	3930      	subs	r1, #48	@ 0x30
 8010c54:	9143      	str	r1, [sp, #268]	@ 0x10c
 8010c56:	464d      	mov	r5, r9
 8010c58:	e7d1      	b.n	8010bfe <__svfiscanf_r+0xc6>
 8010c5a:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8010c5e:	2a20      	cmp	r2, #32
 8010c60:	d8ef      	bhi.n	8010c42 <__svfiscanf_r+0x10a>
 8010c62:	a101      	add	r1, pc, #4	@ (adr r1, 8010c68 <__svfiscanf_r+0x130>)
 8010c64:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010c68:	08010d29 	.word	0x08010d29
 8010c6c:	08010c43 	.word	0x08010c43
 8010c70:	08010c43 	.word	0x08010c43
 8010c74:	08010d83 	.word	0x08010d83
 8010c78:	08010c43 	.word	0x08010c43
 8010c7c:	08010c43 	.word	0x08010c43
 8010c80:	08010c43 	.word	0x08010c43
 8010c84:	08010c43 	.word	0x08010c43
 8010c88:	08010c43 	.word	0x08010c43
 8010c8c:	08010c43 	.word	0x08010c43
 8010c90:	08010c43 	.word	0x08010c43
 8010c94:	08010d99 	.word	0x08010d99
 8010c98:	08010d7f 	.word	0x08010d7f
 8010c9c:	08010cf3 	.word	0x08010cf3
 8010ca0:	08010cf3 	.word	0x08010cf3
 8010ca4:	08010cf3 	.word	0x08010cf3
 8010ca8:	08010c43 	.word	0x08010c43
 8010cac:	08010d3b 	.word	0x08010d3b
 8010cb0:	08010c43 	.word	0x08010c43
 8010cb4:	08010c43 	.word	0x08010c43
 8010cb8:	08010c43 	.word	0x08010c43
 8010cbc:	08010c43 	.word	0x08010c43
 8010cc0:	08010da9 	.word	0x08010da9
 8010cc4:	08010d43 	.word	0x08010d43
 8010cc8:	08010d21 	.word	0x08010d21
 8010ccc:	08010c43 	.word	0x08010c43
 8010cd0:	08010c43 	.word	0x08010c43
 8010cd4:	08010da5 	.word	0x08010da5
 8010cd8:	08010c43 	.word	0x08010c43
 8010cdc:	08010d7f 	.word	0x08010d7f
 8010ce0:	08010c43 	.word	0x08010c43
 8010ce4:	08010c43 	.word	0x08010c43
 8010ce8:	08010d29 	.word	0x08010d29
 8010cec:	3b45      	subs	r3, #69	@ 0x45
 8010cee:	2b02      	cmp	r3, #2
 8010cf0:	d8a7      	bhi.n	8010c42 <__svfiscanf_r+0x10a>
 8010cf2:	2305      	movs	r3, #5
 8010cf4:	e028      	b.n	8010d48 <__svfiscanf_r+0x210>
 8010cf6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010cf8:	4621      	mov	r1, r4
 8010cfa:	4630      	mov	r0, r6
 8010cfc:	4798      	blx	r3
 8010cfe:	2800      	cmp	r0, #0
 8010d00:	f43f af64 	beq.w	8010bcc <__svfiscanf_r+0x94>
 8010d04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010d06:	07da      	lsls	r2, r3, #31
 8010d08:	f140 809d 	bpl.w	8010e46 <__svfiscanf_r+0x30e>
 8010d0c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8010d0e:	2800      	cmp	r0, #0
 8010d10:	d061      	beq.n	8010dd6 <__svfiscanf_r+0x29e>
 8010d12:	89a3      	ldrh	r3, [r4, #12]
 8010d14:	0659      	lsls	r1, r3, #25
 8010d16:	d45e      	bmi.n	8010dd6 <__svfiscanf_r+0x29e>
 8010d18:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8010d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d20:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010d22:	f042 0220 	orr.w	r2, r2, #32
 8010d26:	9241      	str	r2, [sp, #260]	@ 0x104
 8010d28:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010d2e:	9241      	str	r2, [sp, #260]	@ 0x104
 8010d30:	2210      	movs	r2, #16
 8010d32:	2b6e      	cmp	r3, #110	@ 0x6e
 8010d34:	9242      	str	r2, [sp, #264]	@ 0x108
 8010d36:	d902      	bls.n	8010d3e <__svfiscanf_r+0x206>
 8010d38:	e005      	b.n	8010d46 <__svfiscanf_r+0x20e>
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	9342      	str	r3, [sp, #264]	@ 0x108
 8010d3e:	2303      	movs	r3, #3
 8010d40:	e002      	b.n	8010d48 <__svfiscanf_r+0x210>
 8010d42:	2308      	movs	r3, #8
 8010d44:	9342      	str	r3, [sp, #264]	@ 0x108
 8010d46:	2304      	movs	r3, #4
 8010d48:	9347      	str	r3, [sp, #284]	@ 0x11c
 8010d4a:	6863      	ldr	r3, [r4, #4]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	dd45      	ble.n	8010ddc <__svfiscanf_r+0x2a4>
 8010d50:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010d52:	0659      	lsls	r1, r3, #25
 8010d54:	d404      	bmi.n	8010d60 <__svfiscanf_r+0x228>
 8010d56:	6823      	ldr	r3, [r4, #0]
 8010d58:	781a      	ldrb	r2, [r3, #0]
 8010d5a:	5cba      	ldrb	r2, [r7, r2]
 8010d5c:	0712      	lsls	r2, r2, #28
 8010d5e:	d444      	bmi.n	8010dea <__svfiscanf_r+0x2b2>
 8010d60:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8010d62:	2b02      	cmp	r3, #2
 8010d64:	dc5b      	bgt.n	8010e1e <__svfiscanf_r+0x2e6>
 8010d66:	466b      	mov	r3, sp
 8010d68:	4622      	mov	r2, r4
 8010d6a:	a941      	add	r1, sp, #260	@ 0x104
 8010d6c:	4630      	mov	r0, r6
 8010d6e:	f000 f893 	bl	8010e98 <_scanf_chars>
 8010d72:	2801      	cmp	r0, #1
 8010d74:	d06f      	beq.n	8010e56 <__svfiscanf_r+0x31e>
 8010d76:	2802      	cmp	r0, #2
 8010d78:	f47f af0f 	bne.w	8010b9a <__svfiscanf_r+0x62>
 8010d7c:	e7c2      	b.n	8010d04 <__svfiscanf_r+0x1cc>
 8010d7e:	220a      	movs	r2, #10
 8010d80:	e7d7      	b.n	8010d32 <__svfiscanf_r+0x1fa>
 8010d82:	4629      	mov	r1, r5
 8010d84:	4640      	mov	r0, r8
 8010d86:	f000 fa6d 	bl	8011264 <__sccl>
 8010d8a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010d8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d90:	9341      	str	r3, [sp, #260]	@ 0x104
 8010d92:	4605      	mov	r5, r0
 8010d94:	2301      	movs	r3, #1
 8010d96:	e7d7      	b.n	8010d48 <__svfiscanf_r+0x210>
 8010d98:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010d9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d9e:	9341      	str	r3, [sp, #260]	@ 0x104
 8010da0:	2300      	movs	r3, #0
 8010da2:	e7d1      	b.n	8010d48 <__svfiscanf_r+0x210>
 8010da4:	2302      	movs	r3, #2
 8010da6:	e7cf      	b.n	8010d48 <__svfiscanf_r+0x210>
 8010da8:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8010daa:	06c3      	lsls	r3, r0, #27
 8010dac:	f53f aef5 	bmi.w	8010b9a <__svfiscanf_r+0x62>
 8010db0:	9b00      	ldr	r3, [sp, #0]
 8010db2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010db4:	1d19      	adds	r1, r3, #4
 8010db6:	9100      	str	r1, [sp, #0]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	07c0      	lsls	r0, r0, #31
 8010dbc:	bf4c      	ite	mi
 8010dbe:	801a      	strhmi	r2, [r3, #0]
 8010dc0:	601a      	strpl	r2, [r3, #0]
 8010dc2:	e6ea      	b.n	8010b9a <__svfiscanf_r+0x62>
 8010dc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010dc6:	07de      	lsls	r6, r3, #31
 8010dc8:	d405      	bmi.n	8010dd6 <__svfiscanf_r+0x29e>
 8010dca:	89a3      	ldrh	r3, [r4, #12]
 8010dcc:	059d      	lsls	r5, r3, #22
 8010dce:	d402      	bmi.n	8010dd6 <__svfiscanf_r+0x29e>
 8010dd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010dd2:	f7fd f9f6 	bl	800e1c2 <__retarget_lock_release_recursive>
 8010dd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010dda:	e79d      	b.n	8010d18 <__svfiscanf_r+0x1e0>
 8010ddc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010dde:	4621      	mov	r1, r4
 8010de0:	4630      	mov	r0, r6
 8010de2:	4798      	blx	r3
 8010de4:	2800      	cmp	r0, #0
 8010de6:	d0b3      	beq.n	8010d50 <__svfiscanf_r+0x218>
 8010de8:	e78c      	b.n	8010d04 <__svfiscanf_r+0x1cc>
 8010dea:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010dec:	3201      	adds	r2, #1
 8010dee:	9245      	str	r2, [sp, #276]	@ 0x114
 8010df0:	6862      	ldr	r2, [r4, #4]
 8010df2:	3a01      	subs	r2, #1
 8010df4:	2a00      	cmp	r2, #0
 8010df6:	6062      	str	r2, [r4, #4]
 8010df8:	dd0a      	ble.n	8010e10 <__svfiscanf_r+0x2d8>
 8010dfa:	3301      	adds	r3, #1
 8010dfc:	6023      	str	r3, [r4, #0]
 8010dfe:	e7aa      	b.n	8010d56 <__svfiscanf_r+0x21e>
 8010e00:	0800db07 	.word	0x0800db07
 8010e04:	0800d74d 	.word	0x0800d74d
 8010e08:	080128a9 	.word	0x080128a9
 8010e0c:	08012c26 	.word	0x08012c26
 8010e10:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010e12:	4621      	mov	r1, r4
 8010e14:	4630      	mov	r0, r6
 8010e16:	4798      	blx	r3
 8010e18:	2800      	cmp	r0, #0
 8010e1a:	d09c      	beq.n	8010d56 <__svfiscanf_r+0x21e>
 8010e1c:	e772      	b.n	8010d04 <__svfiscanf_r+0x1cc>
 8010e1e:	2b04      	cmp	r3, #4
 8010e20:	dc06      	bgt.n	8010e30 <__svfiscanf_r+0x2f8>
 8010e22:	466b      	mov	r3, sp
 8010e24:	4622      	mov	r2, r4
 8010e26:	a941      	add	r1, sp, #260	@ 0x104
 8010e28:	4630      	mov	r0, r6
 8010e2a:	f000 f88f 	bl	8010f4c <_scanf_i>
 8010e2e:	e7a0      	b.n	8010d72 <__svfiscanf_r+0x23a>
 8010e30:	4b0e      	ldr	r3, [pc, #56]	@ (8010e6c <__svfiscanf_r+0x334>)
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	f43f aeb1 	beq.w	8010b9a <__svfiscanf_r+0x62>
 8010e38:	466b      	mov	r3, sp
 8010e3a:	4622      	mov	r2, r4
 8010e3c:	a941      	add	r1, sp, #260	@ 0x104
 8010e3e:	4630      	mov	r0, r6
 8010e40:	f7fb fe60 	bl	800cb04 <_scanf_float>
 8010e44:	e795      	b.n	8010d72 <__svfiscanf_r+0x23a>
 8010e46:	89a3      	ldrh	r3, [r4, #12]
 8010e48:	0598      	lsls	r0, r3, #22
 8010e4a:	f53f af5f 	bmi.w	8010d0c <__svfiscanf_r+0x1d4>
 8010e4e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010e50:	f7fd f9b7 	bl	800e1c2 <__retarget_lock_release_recursive>
 8010e54:	e75a      	b.n	8010d0c <__svfiscanf_r+0x1d4>
 8010e56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010e58:	07da      	lsls	r2, r3, #31
 8010e5a:	d405      	bmi.n	8010e68 <__svfiscanf_r+0x330>
 8010e5c:	89a3      	ldrh	r3, [r4, #12]
 8010e5e:	059b      	lsls	r3, r3, #22
 8010e60:	d402      	bmi.n	8010e68 <__svfiscanf_r+0x330>
 8010e62:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010e64:	f7fd f9ad 	bl	800e1c2 <__retarget_lock_release_recursive>
 8010e68:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8010e6a:	e755      	b.n	8010d18 <__svfiscanf_r+0x1e0>
 8010e6c:	0800cb05 	.word	0x0800cb05

08010e70 <_vfiscanf_r>:
 8010e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e74:	460d      	mov	r5, r1
 8010e76:	4616      	mov	r6, r2
 8010e78:	461f      	mov	r7, r3
 8010e7a:	4604      	mov	r4, r0
 8010e7c:	b118      	cbz	r0, 8010e86 <_vfiscanf_r+0x16>
 8010e7e:	6a03      	ldr	r3, [r0, #32]
 8010e80:	b90b      	cbnz	r3, 8010e86 <_vfiscanf_r+0x16>
 8010e82:	f7fc faf5 	bl	800d470 <__sinit>
 8010e86:	463b      	mov	r3, r7
 8010e88:	4632      	mov	r2, r6
 8010e8a:	4629      	mov	r1, r5
 8010e8c:	4620      	mov	r0, r4
 8010e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e92:	f7ff be51 	b.w	8010b38 <__svfiscanf_r>
	...

08010e98 <_scanf_chars>:
 8010e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e9c:	4615      	mov	r5, r2
 8010e9e:	688a      	ldr	r2, [r1, #8]
 8010ea0:	4680      	mov	r8, r0
 8010ea2:	460c      	mov	r4, r1
 8010ea4:	b932      	cbnz	r2, 8010eb4 <_scanf_chars+0x1c>
 8010ea6:	698a      	ldr	r2, [r1, #24]
 8010ea8:	2a00      	cmp	r2, #0
 8010eaa:	bf14      	ite	ne
 8010eac:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8010eb0:	2201      	moveq	r2, #1
 8010eb2:	608a      	str	r2, [r1, #8]
 8010eb4:	6822      	ldr	r2, [r4, #0]
 8010eb6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8010f48 <_scanf_chars+0xb0>
 8010eba:	06d1      	lsls	r1, r2, #27
 8010ebc:	bf5f      	itttt	pl
 8010ebe:	681a      	ldrpl	r2, [r3, #0]
 8010ec0:	1d11      	addpl	r1, r2, #4
 8010ec2:	6019      	strpl	r1, [r3, #0]
 8010ec4:	6816      	ldrpl	r6, [r2, #0]
 8010ec6:	2700      	movs	r7, #0
 8010ec8:	69a0      	ldr	r0, [r4, #24]
 8010eca:	b188      	cbz	r0, 8010ef0 <_scanf_chars+0x58>
 8010ecc:	2801      	cmp	r0, #1
 8010ece:	d107      	bne.n	8010ee0 <_scanf_chars+0x48>
 8010ed0:	682b      	ldr	r3, [r5, #0]
 8010ed2:	781a      	ldrb	r2, [r3, #0]
 8010ed4:	6963      	ldr	r3, [r4, #20]
 8010ed6:	5c9b      	ldrb	r3, [r3, r2]
 8010ed8:	b953      	cbnz	r3, 8010ef0 <_scanf_chars+0x58>
 8010eda:	2f00      	cmp	r7, #0
 8010edc:	d031      	beq.n	8010f42 <_scanf_chars+0xaa>
 8010ede:	e022      	b.n	8010f26 <_scanf_chars+0x8e>
 8010ee0:	2802      	cmp	r0, #2
 8010ee2:	d120      	bne.n	8010f26 <_scanf_chars+0x8e>
 8010ee4:	682b      	ldr	r3, [r5, #0]
 8010ee6:	781b      	ldrb	r3, [r3, #0]
 8010ee8:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010eec:	071b      	lsls	r3, r3, #28
 8010eee:	d41a      	bmi.n	8010f26 <_scanf_chars+0x8e>
 8010ef0:	6823      	ldr	r3, [r4, #0]
 8010ef2:	06da      	lsls	r2, r3, #27
 8010ef4:	bf5e      	ittt	pl
 8010ef6:	682b      	ldrpl	r3, [r5, #0]
 8010ef8:	781b      	ldrbpl	r3, [r3, #0]
 8010efa:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010efe:	682a      	ldr	r2, [r5, #0]
 8010f00:	686b      	ldr	r3, [r5, #4]
 8010f02:	3201      	adds	r2, #1
 8010f04:	602a      	str	r2, [r5, #0]
 8010f06:	68a2      	ldr	r2, [r4, #8]
 8010f08:	3b01      	subs	r3, #1
 8010f0a:	3a01      	subs	r2, #1
 8010f0c:	606b      	str	r3, [r5, #4]
 8010f0e:	3701      	adds	r7, #1
 8010f10:	60a2      	str	r2, [r4, #8]
 8010f12:	b142      	cbz	r2, 8010f26 <_scanf_chars+0x8e>
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	dcd7      	bgt.n	8010ec8 <_scanf_chars+0x30>
 8010f18:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010f1c:	4629      	mov	r1, r5
 8010f1e:	4640      	mov	r0, r8
 8010f20:	4798      	blx	r3
 8010f22:	2800      	cmp	r0, #0
 8010f24:	d0d0      	beq.n	8010ec8 <_scanf_chars+0x30>
 8010f26:	6823      	ldr	r3, [r4, #0]
 8010f28:	f013 0310 	ands.w	r3, r3, #16
 8010f2c:	d105      	bne.n	8010f3a <_scanf_chars+0xa2>
 8010f2e:	68e2      	ldr	r2, [r4, #12]
 8010f30:	3201      	adds	r2, #1
 8010f32:	60e2      	str	r2, [r4, #12]
 8010f34:	69a2      	ldr	r2, [r4, #24]
 8010f36:	b102      	cbz	r2, 8010f3a <_scanf_chars+0xa2>
 8010f38:	7033      	strb	r3, [r6, #0]
 8010f3a:	6923      	ldr	r3, [r4, #16]
 8010f3c:	443b      	add	r3, r7
 8010f3e:	6123      	str	r3, [r4, #16]
 8010f40:	2000      	movs	r0, #0
 8010f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f46:	bf00      	nop
 8010f48:	080128a9 	.word	0x080128a9

08010f4c <_scanf_i>:
 8010f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f50:	4698      	mov	r8, r3
 8010f52:	4b74      	ldr	r3, [pc, #464]	@ (8011124 <_scanf_i+0x1d8>)
 8010f54:	460c      	mov	r4, r1
 8010f56:	4682      	mov	sl, r0
 8010f58:	4616      	mov	r6, r2
 8010f5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010f5e:	b087      	sub	sp, #28
 8010f60:	ab03      	add	r3, sp, #12
 8010f62:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010f66:	4b70      	ldr	r3, [pc, #448]	@ (8011128 <_scanf_i+0x1dc>)
 8010f68:	69a1      	ldr	r1, [r4, #24]
 8010f6a:	4a70      	ldr	r2, [pc, #448]	@ (801112c <_scanf_i+0x1e0>)
 8010f6c:	2903      	cmp	r1, #3
 8010f6e:	bf08      	it	eq
 8010f70:	461a      	moveq	r2, r3
 8010f72:	68a3      	ldr	r3, [r4, #8]
 8010f74:	9201      	str	r2, [sp, #4]
 8010f76:	1e5a      	subs	r2, r3, #1
 8010f78:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8010f7c:	bf88      	it	hi
 8010f7e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010f82:	4627      	mov	r7, r4
 8010f84:	bf82      	ittt	hi
 8010f86:	eb03 0905 	addhi.w	r9, r3, r5
 8010f8a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8010f8e:	60a3      	strhi	r3, [r4, #8]
 8010f90:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010f94:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8010f98:	bf98      	it	ls
 8010f9a:	f04f 0900 	movls.w	r9, #0
 8010f9e:	6023      	str	r3, [r4, #0]
 8010fa0:	463d      	mov	r5, r7
 8010fa2:	f04f 0b00 	mov.w	fp, #0
 8010fa6:	6831      	ldr	r1, [r6, #0]
 8010fa8:	ab03      	add	r3, sp, #12
 8010faa:	7809      	ldrb	r1, [r1, #0]
 8010fac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010fb0:	2202      	movs	r2, #2
 8010fb2:	f7ef f92d 	bl	8000210 <memchr>
 8010fb6:	b328      	cbz	r0, 8011004 <_scanf_i+0xb8>
 8010fb8:	f1bb 0f01 	cmp.w	fp, #1
 8010fbc:	d159      	bne.n	8011072 <_scanf_i+0x126>
 8010fbe:	6862      	ldr	r2, [r4, #4]
 8010fc0:	b92a      	cbnz	r2, 8010fce <_scanf_i+0x82>
 8010fc2:	6822      	ldr	r2, [r4, #0]
 8010fc4:	2108      	movs	r1, #8
 8010fc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010fca:	6061      	str	r1, [r4, #4]
 8010fcc:	6022      	str	r2, [r4, #0]
 8010fce:	6822      	ldr	r2, [r4, #0]
 8010fd0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8010fd4:	6022      	str	r2, [r4, #0]
 8010fd6:	68a2      	ldr	r2, [r4, #8]
 8010fd8:	1e51      	subs	r1, r2, #1
 8010fda:	60a1      	str	r1, [r4, #8]
 8010fdc:	b192      	cbz	r2, 8011004 <_scanf_i+0xb8>
 8010fde:	6832      	ldr	r2, [r6, #0]
 8010fe0:	1c51      	adds	r1, r2, #1
 8010fe2:	6031      	str	r1, [r6, #0]
 8010fe4:	7812      	ldrb	r2, [r2, #0]
 8010fe6:	f805 2b01 	strb.w	r2, [r5], #1
 8010fea:	6872      	ldr	r2, [r6, #4]
 8010fec:	3a01      	subs	r2, #1
 8010fee:	2a00      	cmp	r2, #0
 8010ff0:	6072      	str	r2, [r6, #4]
 8010ff2:	dc07      	bgt.n	8011004 <_scanf_i+0xb8>
 8010ff4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8010ff8:	4631      	mov	r1, r6
 8010ffa:	4650      	mov	r0, sl
 8010ffc:	4790      	blx	r2
 8010ffe:	2800      	cmp	r0, #0
 8011000:	f040 8085 	bne.w	801110e <_scanf_i+0x1c2>
 8011004:	f10b 0b01 	add.w	fp, fp, #1
 8011008:	f1bb 0f03 	cmp.w	fp, #3
 801100c:	d1cb      	bne.n	8010fa6 <_scanf_i+0x5a>
 801100e:	6863      	ldr	r3, [r4, #4]
 8011010:	b90b      	cbnz	r3, 8011016 <_scanf_i+0xca>
 8011012:	230a      	movs	r3, #10
 8011014:	6063      	str	r3, [r4, #4]
 8011016:	6863      	ldr	r3, [r4, #4]
 8011018:	4945      	ldr	r1, [pc, #276]	@ (8011130 <_scanf_i+0x1e4>)
 801101a:	6960      	ldr	r0, [r4, #20]
 801101c:	1ac9      	subs	r1, r1, r3
 801101e:	f000 f921 	bl	8011264 <__sccl>
 8011022:	f04f 0b00 	mov.w	fp, #0
 8011026:	68a3      	ldr	r3, [r4, #8]
 8011028:	6822      	ldr	r2, [r4, #0]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d03d      	beq.n	80110aa <_scanf_i+0x15e>
 801102e:	6831      	ldr	r1, [r6, #0]
 8011030:	6960      	ldr	r0, [r4, #20]
 8011032:	f891 c000 	ldrb.w	ip, [r1]
 8011036:	f810 000c 	ldrb.w	r0, [r0, ip]
 801103a:	2800      	cmp	r0, #0
 801103c:	d035      	beq.n	80110aa <_scanf_i+0x15e>
 801103e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8011042:	d124      	bne.n	801108e <_scanf_i+0x142>
 8011044:	0510      	lsls	r0, r2, #20
 8011046:	d522      	bpl.n	801108e <_scanf_i+0x142>
 8011048:	f10b 0b01 	add.w	fp, fp, #1
 801104c:	f1b9 0f00 	cmp.w	r9, #0
 8011050:	d003      	beq.n	801105a <_scanf_i+0x10e>
 8011052:	3301      	adds	r3, #1
 8011054:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8011058:	60a3      	str	r3, [r4, #8]
 801105a:	6873      	ldr	r3, [r6, #4]
 801105c:	3b01      	subs	r3, #1
 801105e:	2b00      	cmp	r3, #0
 8011060:	6073      	str	r3, [r6, #4]
 8011062:	dd1b      	ble.n	801109c <_scanf_i+0x150>
 8011064:	6833      	ldr	r3, [r6, #0]
 8011066:	3301      	adds	r3, #1
 8011068:	6033      	str	r3, [r6, #0]
 801106a:	68a3      	ldr	r3, [r4, #8]
 801106c:	3b01      	subs	r3, #1
 801106e:	60a3      	str	r3, [r4, #8]
 8011070:	e7d9      	b.n	8011026 <_scanf_i+0xda>
 8011072:	f1bb 0f02 	cmp.w	fp, #2
 8011076:	d1ae      	bne.n	8010fd6 <_scanf_i+0x8a>
 8011078:	6822      	ldr	r2, [r4, #0]
 801107a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801107e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8011082:	d1bf      	bne.n	8011004 <_scanf_i+0xb8>
 8011084:	2110      	movs	r1, #16
 8011086:	6061      	str	r1, [r4, #4]
 8011088:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801108c:	e7a2      	b.n	8010fd4 <_scanf_i+0x88>
 801108e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8011092:	6022      	str	r2, [r4, #0]
 8011094:	780b      	ldrb	r3, [r1, #0]
 8011096:	f805 3b01 	strb.w	r3, [r5], #1
 801109a:	e7de      	b.n	801105a <_scanf_i+0x10e>
 801109c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80110a0:	4631      	mov	r1, r6
 80110a2:	4650      	mov	r0, sl
 80110a4:	4798      	blx	r3
 80110a6:	2800      	cmp	r0, #0
 80110a8:	d0df      	beq.n	801106a <_scanf_i+0x11e>
 80110aa:	6823      	ldr	r3, [r4, #0]
 80110ac:	05d9      	lsls	r1, r3, #23
 80110ae:	d50d      	bpl.n	80110cc <_scanf_i+0x180>
 80110b0:	42bd      	cmp	r5, r7
 80110b2:	d909      	bls.n	80110c8 <_scanf_i+0x17c>
 80110b4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80110b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80110bc:	4632      	mov	r2, r6
 80110be:	4650      	mov	r0, sl
 80110c0:	4798      	blx	r3
 80110c2:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80110c6:	464d      	mov	r5, r9
 80110c8:	42bd      	cmp	r5, r7
 80110ca:	d028      	beq.n	801111e <_scanf_i+0x1d2>
 80110cc:	6822      	ldr	r2, [r4, #0]
 80110ce:	f012 0210 	ands.w	r2, r2, #16
 80110d2:	d113      	bne.n	80110fc <_scanf_i+0x1b0>
 80110d4:	702a      	strb	r2, [r5, #0]
 80110d6:	6863      	ldr	r3, [r4, #4]
 80110d8:	9e01      	ldr	r6, [sp, #4]
 80110da:	4639      	mov	r1, r7
 80110dc:	4650      	mov	r0, sl
 80110de:	47b0      	blx	r6
 80110e0:	f8d8 3000 	ldr.w	r3, [r8]
 80110e4:	6821      	ldr	r1, [r4, #0]
 80110e6:	1d1a      	adds	r2, r3, #4
 80110e8:	f8c8 2000 	str.w	r2, [r8]
 80110ec:	f011 0f20 	tst.w	r1, #32
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	d00f      	beq.n	8011114 <_scanf_i+0x1c8>
 80110f4:	6018      	str	r0, [r3, #0]
 80110f6:	68e3      	ldr	r3, [r4, #12]
 80110f8:	3301      	adds	r3, #1
 80110fa:	60e3      	str	r3, [r4, #12]
 80110fc:	6923      	ldr	r3, [r4, #16]
 80110fe:	1bed      	subs	r5, r5, r7
 8011100:	445d      	add	r5, fp
 8011102:	442b      	add	r3, r5
 8011104:	6123      	str	r3, [r4, #16]
 8011106:	2000      	movs	r0, #0
 8011108:	b007      	add	sp, #28
 801110a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801110e:	f04f 0b00 	mov.w	fp, #0
 8011112:	e7ca      	b.n	80110aa <_scanf_i+0x15e>
 8011114:	07ca      	lsls	r2, r1, #31
 8011116:	bf4c      	ite	mi
 8011118:	8018      	strhmi	r0, [r3, #0]
 801111a:	6018      	strpl	r0, [r3, #0]
 801111c:	e7eb      	b.n	80110f6 <_scanf_i+0x1aa>
 801111e:	2001      	movs	r0, #1
 8011120:	e7f2      	b.n	8011108 <_scanf_i+0x1bc>
 8011122:	bf00      	nop
 8011124:	08012884 	.word	0x08012884
 8011128:	08010601 	.word	0x08010601
 801112c:	08011bf9 	.word	0x08011bf9
 8011130:	08012c41 	.word	0x08012c41

08011134 <__sflags>:
 8011134:	780b      	ldrb	r3, [r1, #0]
 8011136:	2b72      	cmp	r3, #114	@ 0x72
 8011138:	b530      	push	{r4, r5, lr}
 801113a:	d022      	beq.n	8011182 <__sflags+0x4e>
 801113c:	2b77      	cmp	r3, #119	@ 0x77
 801113e:	d024      	beq.n	801118a <__sflags+0x56>
 8011140:	2b61      	cmp	r3, #97	@ 0x61
 8011142:	d027      	beq.n	8011194 <__sflags+0x60>
 8011144:	2316      	movs	r3, #22
 8011146:	6003      	str	r3, [r0, #0]
 8011148:	2000      	movs	r0, #0
 801114a:	bd30      	pop	{r4, r5, pc}
 801114c:	2d62      	cmp	r5, #98	@ 0x62
 801114e:	d012      	beq.n	8011176 <__sflags+0x42>
 8011150:	2d78      	cmp	r5, #120	@ 0x78
 8011152:	d013      	beq.n	801117c <__sflags+0x48>
 8011154:	2d2b      	cmp	r5, #43	@ 0x2b
 8011156:	d107      	bne.n	8011168 <__sflags+0x34>
 8011158:	f020 001c 	bic.w	r0, r0, #28
 801115c:	f023 0303 	bic.w	r3, r3, #3
 8011160:	f040 0010 	orr.w	r0, r0, #16
 8011164:	f043 0302 	orr.w	r3, r3, #2
 8011168:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801116c:	2d00      	cmp	r5, #0
 801116e:	d1ed      	bne.n	801114c <__sflags+0x18>
 8011170:	4323      	orrs	r3, r4
 8011172:	6013      	str	r3, [r2, #0]
 8011174:	e7e9      	b.n	801114a <__sflags+0x16>
 8011176:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801117a:	e7f5      	b.n	8011168 <__sflags+0x34>
 801117c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8011180:	e7f2      	b.n	8011168 <__sflags+0x34>
 8011182:	2400      	movs	r4, #0
 8011184:	4623      	mov	r3, r4
 8011186:	2004      	movs	r0, #4
 8011188:	e7ee      	b.n	8011168 <__sflags+0x34>
 801118a:	f44f 64c0 	mov.w	r4, #1536	@ 0x600
 801118e:	2301      	movs	r3, #1
 8011190:	2008      	movs	r0, #8
 8011192:	e7e9      	b.n	8011168 <__sflags+0x34>
 8011194:	f44f 7402 	mov.w	r4, #520	@ 0x208
 8011198:	2301      	movs	r3, #1
 801119a:	f44f 7084 	mov.w	r0, #264	@ 0x108
 801119e:	e7e3      	b.n	8011168 <__sflags+0x34>

080111a0 <__swhatbuf_r>:
 80111a0:	b570      	push	{r4, r5, r6, lr}
 80111a2:	460c      	mov	r4, r1
 80111a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111a8:	2900      	cmp	r1, #0
 80111aa:	b096      	sub	sp, #88	@ 0x58
 80111ac:	4615      	mov	r5, r2
 80111ae:	461e      	mov	r6, r3
 80111b0:	da0d      	bge.n	80111ce <__swhatbuf_r+0x2e>
 80111b2:	89a3      	ldrh	r3, [r4, #12]
 80111b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80111b8:	f04f 0100 	mov.w	r1, #0
 80111bc:	bf14      	ite	ne
 80111be:	2340      	movne	r3, #64	@ 0x40
 80111c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80111c4:	2000      	movs	r0, #0
 80111c6:	6031      	str	r1, [r6, #0]
 80111c8:	602b      	str	r3, [r5, #0]
 80111ca:	b016      	add	sp, #88	@ 0x58
 80111cc:	bd70      	pop	{r4, r5, r6, pc}
 80111ce:	466a      	mov	r2, sp
 80111d0:	f000 f8de 	bl	8011390 <_fstat_r>
 80111d4:	2800      	cmp	r0, #0
 80111d6:	dbec      	blt.n	80111b2 <__swhatbuf_r+0x12>
 80111d8:	9901      	ldr	r1, [sp, #4]
 80111da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80111de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80111e2:	4259      	negs	r1, r3
 80111e4:	4159      	adcs	r1, r3
 80111e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80111ea:	e7eb      	b.n	80111c4 <__swhatbuf_r+0x24>

080111ec <__smakebuf_r>:
 80111ec:	898b      	ldrh	r3, [r1, #12]
 80111ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80111f0:	079d      	lsls	r5, r3, #30
 80111f2:	4606      	mov	r6, r0
 80111f4:	460c      	mov	r4, r1
 80111f6:	d507      	bpl.n	8011208 <__smakebuf_r+0x1c>
 80111f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80111fc:	6023      	str	r3, [r4, #0]
 80111fe:	6123      	str	r3, [r4, #16]
 8011200:	2301      	movs	r3, #1
 8011202:	6163      	str	r3, [r4, #20]
 8011204:	b003      	add	sp, #12
 8011206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011208:	ab01      	add	r3, sp, #4
 801120a:	466a      	mov	r2, sp
 801120c:	f7ff ffc8 	bl	80111a0 <__swhatbuf_r>
 8011210:	9f00      	ldr	r7, [sp, #0]
 8011212:	4605      	mov	r5, r0
 8011214:	4639      	mov	r1, r7
 8011216:	4630      	mov	r0, r6
 8011218:	f7fa ff90 	bl	800c13c <_malloc_r>
 801121c:	b948      	cbnz	r0, 8011232 <__smakebuf_r+0x46>
 801121e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011222:	059a      	lsls	r2, r3, #22
 8011224:	d4ee      	bmi.n	8011204 <__smakebuf_r+0x18>
 8011226:	f023 0303 	bic.w	r3, r3, #3
 801122a:	f043 0302 	orr.w	r3, r3, #2
 801122e:	81a3      	strh	r3, [r4, #12]
 8011230:	e7e2      	b.n	80111f8 <__smakebuf_r+0xc>
 8011232:	89a3      	ldrh	r3, [r4, #12]
 8011234:	6020      	str	r0, [r4, #0]
 8011236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801123a:	81a3      	strh	r3, [r4, #12]
 801123c:	9b01      	ldr	r3, [sp, #4]
 801123e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011242:	b15b      	cbz	r3, 801125c <__smakebuf_r+0x70>
 8011244:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011248:	4630      	mov	r0, r6
 801124a:	f000 f8b3 	bl	80113b4 <_isatty_r>
 801124e:	b128      	cbz	r0, 801125c <__smakebuf_r+0x70>
 8011250:	89a3      	ldrh	r3, [r4, #12]
 8011252:	f023 0303 	bic.w	r3, r3, #3
 8011256:	f043 0301 	orr.w	r3, r3, #1
 801125a:	81a3      	strh	r3, [r4, #12]
 801125c:	89a3      	ldrh	r3, [r4, #12]
 801125e:	431d      	orrs	r5, r3
 8011260:	81a5      	strh	r5, [r4, #12]
 8011262:	e7cf      	b.n	8011204 <__smakebuf_r+0x18>

08011264 <__sccl>:
 8011264:	b570      	push	{r4, r5, r6, lr}
 8011266:	780b      	ldrb	r3, [r1, #0]
 8011268:	4604      	mov	r4, r0
 801126a:	2b5e      	cmp	r3, #94	@ 0x5e
 801126c:	bf0b      	itete	eq
 801126e:	784b      	ldrbeq	r3, [r1, #1]
 8011270:	1c4a      	addne	r2, r1, #1
 8011272:	1c8a      	addeq	r2, r1, #2
 8011274:	2100      	movne	r1, #0
 8011276:	bf08      	it	eq
 8011278:	2101      	moveq	r1, #1
 801127a:	3801      	subs	r0, #1
 801127c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8011280:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011284:	42a8      	cmp	r0, r5
 8011286:	d1fb      	bne.n	8011280 <__sccl+0x1c>
 8011288:	b90b      	cbnz	r3, 801128e <__sccl+0x2a>
 801128a:	1e50      	subs	r0, r2, #1
 801128c:	bd70      	pop	{r4, r5, r6, pc}
 801128e:	f081 0101 	eor.w	r1, r1, #1
 8011292:	54e1      	strb	r1, [r4, r3]
 8011294:	4610      	mov	r0, r2
 8011296:	4602      	mov	r2, r0
 8011298:	f812 5b01 	ldrb.w	r5, [r2], #1
 801129c:	2d2d      	cmp	r5, #45	@ 0x2d
 801129e:	d005      	beq.n	80112ac <__sccl+0x48>
 80112a0:	2d5d      	cmp	r5, #93	@ 0x5d
 80112a2:	d016      	beq.n	80112d2 <__sccl+0x6e>
 80112a4:	2d00      	cmp	r5, #0
 80112a6:	d0f1      	beq.n	801128c <__sccl+0x28>
 80112a8:	462b      	mov	r3, r5
 80112aa:	e7f2      	b.n	8011292 <__sccl+0x2e>
 80112ac:	7846      	ldrb	r6, [r0, #1]
 80112ae:	2e5d      	cmp	r6, #93	@ 0x5d
 80112b0:	d0fa      	beq.n	80112a8 <__sccl+0x44>
 80112b2:	42b3      	cmp	r3, r6
 80112b4:	dcf8      	bgt.n	80112a8 <__sccl+0x44>
 80112b6:	3002      	adds	r0, #2
 80112b8:	461a      	mov	r2, r3
 80112ba:	3201      	adds	r2, #1
 80112bc:	4296      	cmp	r6, r2
 80112be:	54a1      	strb	r1, [r4, r2]
 80112c0:	dcfb      	bgt.n	80112ba <__sccl+0x56>
 80112c2:	1af2      	subs	r2, r6, r3
 80112c4:	3a01      	subs	r2, #1
 80112c6:	1c5d      	adds	r5, r3, #1
 80112c8:	42b3      	cmp	r3, r6
 80112ca:	bfa8      	it	ge
 80112cc:	2200      	movge	r2, #0
 80112ce:	18ab      	adds	r3, r5, r2
 80112d0:	e7e1      	b.n	8011296 <__sccl+0x32>
 80112d2:	4610      	mov	r0, r2
 80112d4:	e7da      	b.n	801128c <__sccl+0x28>

080112d6 <memmove>:
 80112d6:	4288      	cmp	r0, r1
 80112d8:	b510      	push	{r4, lr}
 80112da:	eb01 0402 	add.w	r4, r1, r2
 80112de:	d902      	bls.n	80112e6 <memmove+0x10>
 80112e0:	4284      	cmp	r4, r0
 80112e2:	4623      	mov	r3, r4
 80112e4:	d807      	bhi.n	80112f6 <memmove+0x20>
 80112e6:	1e43      	subs	r3, r0, #1
 80112e8:	42a1      	cmp	r1, r4
 80112ea:	d008      	beq.n	80112fe <memmove+0x28>
 80112ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80112f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80112f4:	e7f8      	b.n	80112e8 <memmove+0x12>
 80112f6:	4402      	add	r2, r0
 80112f8:	4601      	mov	r1, r0
 80112fa:	428a      	cmp	r2, r1
 80112fc:	d100      	bne.n	8011300 <memmove+0x2a>
 80112fe:	bd10      	pop	{r4, pc}
 8011300:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011304:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011308:	e7f7      	b.n	80112fa <memmove+0x24>

0801130a <strncmp>:
 801130a:	b510      	push	{r4, lr}
 801130c:	b16a      	cbz	r2, 801132a <strncmp+0x20>
 801130e:	3901      	subs	r1, #1
 8011310:	1884      	adds	r4, r0, r2
 8011312:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011316:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801131a:	429a      	cmp	r2, r3
 801131c:	d103      	bne.n	8011326 <strncmp+0x1c>
 801131e:	42a0      	cmp	r0, r4
 8011320:	d001      	beq.n	8011326 <strncmp+0x1c>
 8011322:	2a00      	cmp	r2, #0
 8011324:	d1f5      	bne.n	8011312 <strncmp+0x8>
 8011326:	1ad0      	subs	r0, r2, r3
 8011328:	bd10      	pop	{r4, pc}
 801132a:	4610      	mov	r0, r2
 801132c:	e7fc      	b.n	8011328 <strncmp+0x1e>

0801132e <_raise_r>:
 801132e:	291f      	cmp	r1, #31
 8011330:	b538      	push	{r3, r4, r5, lr}
 8011332:	4605      	mov	r5, r0
 8011334:	460c      	mov	r4, r1
 8011336:	d904      	bls.n	8011342 <_raise_r+0x14>
 8011338:	2316      	movs	r3, #22
 801133a:	6003      	str	r3, [r0, #0]
 801133c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011340:	bd38      	pop	{r3, r4, r5, pc}
 8011342:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011344:	b112      	cbz	r2, 801134c <_raise_r+0x1e>
 8011346:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801134a:	b94b      	cbnz	r3, 8011360 <_raise_r+0x32>
 801134c:	4628      	mov	r0, r5
 801134e:	f000 f853 	bl	80113f8 <_getpid_r>
 8011352:	4622      	mov	r2, r4
 8011354:	4601      	mov	r1, r0
 8011356:	4628      	mov	r0, r5
 8011358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801135c:	f000 b83a 	b.w	80113d4 <_kill_r>
 8011360:	2b01      	cmp	r3, #1
 8011362:	d00a      	beq.n	801137a <_raise_r+0x4c>
 8011364:	1c59      	adds	r1, r3, #1
 8011366:	d103      	bne.n	8011370 <_raise_r+0x42>
 8011368:	2316      	movs	r3, #22
 801136a:	6003      	str	r3, [r0, #0]
 801136c:	2001      	movs	r0, #1
 801136e:	e7e7      	b.n	8011340 <_raise_r+0x12>
 8011370:	2100      	movs	r1, #0
 8011372:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011376:	4620      	mov	r0, r4
 8011378:	4798      	blx	r3
 801137a:	2000      	movs	r0, #0
 801137c:	e7e0      	b.n	8011340 <_raise_r+0x12>
	...

08011380 <raise>:
 8011380:	4b02      	ldr	r3, [pc, #8]	@ (801138c <raise+0xc>)
 8011382:	4601      	mov	r1, r0
 8011384:	6818      	ldr	r0, [r3, #0]
 8011386:	f7ff bfd2 	b.w	801132e <_raise_r>
 801138a:	bf00      	nop
 801138c:	2000003c 	.word	0x2000003c

08011390 <_fstat_r>:
 8011390:	b538      	push	{r3, r4, r5, lr}
 8011392:	4d07      	ldr	r5, [pc, #28]	@ (80113b0 <_fstat_r+0x20>)
 8011394:	2300      	movs	r3, #0
 8011396:	4604      	mov	r4, r0
 8011398:	4608      	mov	r0, r1
 801139a:	4611      	mov	r1, r2
 801139c:	602b      	str	r3, [r5, #0]
 801139e:	f7f2 fe2b 	bl	8003ff8 <_fstat>
 80113a2:	1c43      	adds	r3, r0, #1
 80113a4:	d102      	bne.n	80113ac <_fstat_r+0x1c>
 80113a6:	682b      	ldr	r3, [r5, #0]
 80113a8:	b103      	cbz	r3, 80113ac <_fstat_r+0x1c>
 80113aa:	6023      	str	r3, [r4, #0]
 80113ac:	bd38      	pop	{r3, r4, r5, pc}
 80113ae:	bf00      	nop
 80113b0:	20002314 	.word	0x20002314

080113b4 <_isatty_r>:
 80113b4:	b538      	push	{r3, r4, r5, lr}
 80113b6:	4d06      	ldr	r5, [pc, #24]	@ (80113d0 <_isatty_r+0x1c>)
 80113b8:	2300      	movs	r3, #0
 80113ba:	4604      	mov	r4, r0
 80113bc:	4608      	mov	r0, r1
 80113be:	602b      	str	r3, [r5, #0]
 80113c0:	f7f2 fe2a 	bl	8004018 <_isatty>
 80113c4:	1c43      	adds	r3, r0, #1
 80113c6:	d102      	bne.n	80113ce <_isatty_r+0x1a>
 80113c8:	682b      	ldr	r3, [r5, #0]
 80113ca:	b103      	cbz	r3, 80113ce <_isatty_r+0x1a>
 80113cc:	6023      	str	r3, [r4, #0]
 80113ce:	bd38      	pop	{r3, r4, r5, pc}
 80113d0:	20002314 	.word	0x20002314

080113d4 <_kill_r>:
 80113d4:	b538      	push	{r3, r4, r5, lr}
 80113d6:	4d07      	ldr	r5, [pc, #28]	@ (80113f4 <_kill_r+0x20>)
 80113d8:	2300      	movs	r3, #0
 80113da:	4604      	mov	r4, r0
 80113dc:	4608      	mov	r0, r1
 80113de:	4611      	mov	r1, r2
 80113e0:	602b      	str	r3, [r5, #0]
 80113e2:	f7f2 fda9 	bl	8003f38 <_kill>
 80113e6:	1c43      	adds	r3, r0, #1
 80113e8:	d102      	bne.n	80113f0 <_kill_r+0x1c>
 80113ea:	682b      	ldr	r3, [r5, #0]
 80113ec:	b103      	cbz	r3, 80113f0 <_kill_r+0x1c>
 80113ee:	6023      	str	r3, [r4, #0]
 80113f0:	bd38      	pop	{r3, r4, r5, pc}
 80113f2:	bf00      	nop
 80113f4:	20002314 	.word	0x20002314

080113f8 <_getpid_r>:
 80113f8:	f7f2 bd96 	b.w	8003f28 <_getpid>
 80113fc:	0000      	movs	r0, r0
	...

08011400 <nan>:
 8011400:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011408 <nan+0x8>
 8011404:	4770      	bx	lr
 8011406:	bf00      	nop
 8011408:	00000000 	.word	0x00000000
 801140c:	7ff80000 	.word	0x7ff80000

08011410 <__assert_func>:
 8011410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011412:	4614      	mov	r4, r2
 8011414:	461a      	mov	r2, r3
 8011416:	4b09      	ldr	r3, [pc, #36]	@ (801143c <__assert_func+0x2c>)
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	4605      	mov	r5, r0
 801141c:	68d8      	ldr	r0, [r3, #12]
 801141e:	b954      	cbnz	r4, 8011436 <__assert_func+0x26>
 8011420:	4b07      	ldr	r3, [pc, #28]	@ (8011440 <__assert_func+0x30>)
 8011422:	461c      	mov	r4, r3
 8011424:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011428:	9100      	str	r1, [sp, #0]
 801142a:	462b      	mov	r3, r5
 801142c:	4905      	ldr	r1, [pc, #20]	@ (8011444 <__assert_func+0x34>)
 801142e:	f7fc f837 	bl	800d4a0 <fiprintf>
 8011432:	f7fc fee3 	bl	800e1fc <abort>
 8011436:	4b04      	ldr	r3, [pc, #16]	@ (8011448 <__assert_func+0x38>)
 8011438:	e7f4      	b.n	8011424 <__assert_func+0x14>
 801143a:	bf00      	nop
 801143c:	2000003c 	.word	0x2000003c
 8011440:	08012c8f 	.word	0x08012c8f
 8011444:	08012c61 	.word	0x08012c61
 8011448:	08012c54 	.word	0x08012c54

0801144c <_calloc_r>:
 801144c:	b570      	push	{r4, r5, r6, lr}
 801144e:	fba1 5402 	umull	r5, r4, r1, r2
 8011452:	b93c      	cbnz	r4, 8011464 <_calloc_r+0x18>
 8011454:	4629      	mov	r1, r5
 8011456:	f7fa fe71 	bl	800c13c <_malloc_r>
 801145a:	4606      	mov	r6, r0
 801145c:	b928      	cbnz	r0, 801146a <_calloc_r+0x1e>
 801145e:	2600      	movs	r6, #0
 8011460:	4630      	mov	r0, r6
 8011462:	bd70      	pop	{r4, r5, r6, pc}
 8011464:	220c      	movs	r2, #12
 8011466:	6002      	str	r2, [r0, #0]
 8011468:	e7f9      	b.n	801145e <_calloc_r+0x12>
 801146a:	462a      	mov	r2, r5
 801146c:	4621      	mov	r1, r4
 801146e:	f7fc fdff 	bl	800e070 <memset>
 8011472:	e7f5      	b.n	8011460 <_calloc_r+0x14>

08011474 <rshift>:
 8011474:	6903      	ldr	r3, [r0, #16]
 8011476:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801147a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801147e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011482:	f100 0414 	add.w	r4, r0, #20
 8011486:	dd45      	ble.n	8011514 <rshift+0xa0>
 8011488:	f011 011f 	ands.w	r1, r1, #31
 801148c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011490:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011494:	d10c      	bne.n	80114b0 <rshift+0x3c>
 8011496:	f100 0710 	add.w	r7, r0, #16
 801149a:	4629      	mov	r1, r5
 801149c:	42b1      	cmp	r1, r6
 801149e:	d334      	bcc.n	801150a <rshift+0x96>
 80114a0:	1a9b      	subs	r3, r3, r2
 80114a2:	009b      	lsls	r3, r3, #2
 80114a4:	1eea      	subs	r2, r5, #3
 80114a6:	4296      	cmp	r6, r2
 80114a8:	bf38      	it	cc
 80114aa:	2300      	movcc	r3, #0
 80114ac:	4423      	add	r3, r4
 80114ae:	e015      	b.n	80114dc <rshift+0x68>
 80114b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80114b4:	f1c1 0820 	rsb	r8, r1, #32
 80114b8:	40cf      	lsrs	r7, r1
 80114ba:	f105 0e04 	add.w	lr, r5, #4
 80114be:	46a1      	mov	r9, r4
 80114c0:	4576      	cmp	r6, lr
 80114c2:	46f4      	mov	ip, lr
 80114c4:	d815      	bhi.n	80114f2 <rshift+0x7e>
 80114c6:	1a9a      	subs	r2, r3, r2
 80114c8:	0092      	lsls	r2, r2, #2
 80114ca:	3a04      	subs	r2, #4
 80114cc:	3501      	adds	r5, #1
 80114ce:	42ae      	cmp	r6, r5
 80114d0:	bf38      	it	cc
 80114d2:	2200      	movcc	r2, #0
 80114d4:	18a3      	adds	r3, r4, r2
 80114d6:	50a7      	str	r7, [r4, r2]
 80114d8:	b107      	cbz	r7, 80114dc <rshift+0x68>
 80114da:	3304      	adds	r3, #4
 80114dc:	1b1a      	subs	r2, r3, r4
 80114de:	42a3      	cmp	r3, r4
 80114e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80114e4:	bf08      	it	eq
 80114e6:	2300      	moveq	r3, #0
 80114e8:	6102      	str	r2, [r0, #16]
 80114ea:	bf08      	it	eq
 80114ec:	6143      	streq	r3, [r0, #20]
 80114ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114f2:	f8dc c000 	ldr.w	ip, [ip]
 80114f6:	fa0c fc08 	lsl.w	ip, ip, r8
 80114fa:	ea4c 0707 	orr.w	r7, ip, r7
 80114fe:	f849 7b04 	str.w	r7, [r9], #4
 8011502:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011506:	40cf      	lsrs	r7, r1
 8011508:	e7da      	b.n	80114c0 <rshift+0x4c>
 801150a:	f851 cb04 	ldr.w	ip, [r1], #4
 801150e:	f847 cf04 	str.w	ip, [r7, #4]!
 8011512:	e7c3      	b.n	801149c <rshift+0x28>
 8011514:	4623      	mov	r3, r4
 8011516:	e7e1      	b.n	80114dc <rshift+0x68>

08011518 <__hexdig_fun>:
 8011518:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801151c:	2b09      	cmp	r3, #9
 801151e:	d802      	bhi.n	8011526 <__hexdig_fun+0xe>
 8011520:	3820      	subs	r0, #32
 8011522:	b2c0      	uxtb	r0, r0
 8011524:	4770      	bx	lr
 8011526:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801152a:	2b05      	cmp	r3, #5
 801152c:	d801      	bhi.n	8011532 <__hexdig_fun+0x1a>
 801152e:	3847      	subs	r0, #71	@ 0x47
 8011530:	e7f7      	b.n	8011522 <__hexdig_fun+0xa>
 8011532:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011536:	2b05      	cmp	r3, #5
 8011538:	d801      	bhi.n	801153e <__hexdig_fun+0x26>
 801153a:	3827      	subs	r0, #39	@ 0x27
 801153c:	e7f1      	b.n	8011522 <__hexdig_fun+0xa>
 801153e:	2000      	movs	r0, #0
 8011540:	4770      	bx	lr
	...

08011544 <__gethex>:
 8011544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011548:	b085      	sub	sp, #20
 801154a:	468a      	mov	sl, r1
 801154c:	9302      	str	r3, [sp, #8]
 801154e:	680b      	ldr	r3, [r1, #0]
 8011550:	9001      	str	r0, [sp, #4]
 8011552:	4690      	mov	r8, r2
 8011554:	1c9c      	adds	r4, r3, #2
 8011556:	46a1      	mov	r9, r4
 8011558:	f814 0b01 	ldrb.w	r0, [r4], #1
 801155c:	2830      	cmp	r0, #48	@ 0x30
 801155e:	d0fa      	beq.n	8011556 <__gethex+0x12>
 8011560:	eba9 0303 	sub.w	r3, r9, r3
 8011564:	f1a3 0b02 	sub.w	fp, r3, #2
 8011568:	f7ff ffd6 	bl	8011518 <__hexdig_fun>
 801156c:	4605      	mov	r5, r0
 801156e:	2800      	cmp	r0, #0
 8011570:	d168      	bne.n	8011644 <__gethex+0x100>
 8011572:	49a0      	ldr	r1, [pc, #640]	@ (80117f4 <__gethex+0x2b0>)
 8011574:	2201      	movs	r2, #1
 8011576:	4648      	mov	r0, r9
 8011578:	f7ff fec7 	bl	801130a <strncmp>
 801157c:	4607      	mov	r7, r0
 801157e:	2800      	cmp	r0, #0
 8011580:	d167      	bne.n	8011652 <__gethex+0x10e>
 8011582:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011586:	4626      	mov	r6, r4
 8011588:	f7ff ffc6 	bl	8011518 <__hexdig_fun>
 801158c:	2800      	cmp	r0, #0
 801158e:	d062      	beq.n	8011656 <__gethex+0x112>
 8011590:	4623      	mov	r3, r4
 8011592:	7818      	ldrb	r0, [r3, #0]
 8011594:	2830      	cmp	r0, #48	@ 0x30
 8011596:	4699      	mov	r9, r3
 8011598:	f103 0301 	add.w	r3, r3, #1
 801159c:	d0f9      	beq.n	8011592 <__gethex+0x4e>
 801159e:	f7ff ffbb 	bl	8011518 <__hexdig_fun>
 80115a2:	fab0 f580 	clz	r5, r0
 80115a6:	096d      	lsrs	r5, r5, #5
 80115a8:	f04f 0b01 	mov.w	fp, #1
 80115ac:	464a      	mov	r2, r9
 80115ae:	4616      	mov	r6, r2
 80115b0:	3201      	adds	r2, #1
 80115b2:	7830      	ldrb	r0, [r6, #0]
 80115b4:	f7ff ffb0 	bl	8011518 <__hexdig_fun>
 80115b8:	2800      	cmp	r0, #0
 80115ba:	d1f8      	bne.n	80115ae <__gethex+0x6a>
 80115bc:	498d      	ldr	r1, [pc, #564]	@ (80117f4 <__gethex+0x2b0>)
 80115be:	2201      	movs	r2, #1
 80115c0:	4630      	mov	r0, r6
 80115c2:	f7ff fea2 	bl	801130a <strncmp>
 80115c6:	2800      	cmp	r0, #0
 80115c8:	d13f      	bne.n	801164a <__gethex+0x106>
 80115ca:	b944      	cbnz	r4, 80115de <__gethex+0x9a>
 80115cc:	1c74      	adds	r4, r6, #1
 80115ce:	4622      	mov	r2, r4
 80115d0:	4616      	mov	r6, r2
 80115d2:	3201      	adds	r2, #1
 80115d4:	7830      	ldrb	r0, [r6, #0]
 80115d6:	f7ff ff9f 	bl	8011518 <__hexdig_fun>
 80115da:	2800      	cmp	r0, #0
 80115dc:	d1f8      	bne.n	80115d0 <__gethex+0x8c>
 80115de:	1ba4      	subs	r4, r4, r6
 80115e0:	00a7      	lsls	r7, r4, #2
 80115e2:	7833      	ldrb	r3, [r6, #0]
 80115e4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80115e8:	2b50      	cmp	r3, #80	@ 0x50
 80115ea:	d13e      	bne.n	801166a <__gethex+0x126>
 80115ec:	7873      	ldrb	r3, [r6, #1]
 80115ee:	2b2b      	cmp	r3, #43	@ 0x2b
 80115f0:	d033      	beq.n	801165a <__gethex+0x116>
 80115f2:	2b2d      	cmp	r3, #45	@ 0x2d
 80115f4:	d034      	beq.n	8011660 <__gethex+0x11c>
 80115f6:	1c71      	adds	r1, r6, #1
 80115f8:	2400      	movs	r4, #0
 80115fa:	7808      	ldrb	r0, [r1, #0]
 80115fc:	f7ff ff8c 	bl	8011518 <__hexdig_fun>
 8011600:	1e43      	subs	r3, r0, #1
 8011602:	b2db      	uxtb	r3, r3
 8011604:	2b18      	cmp	r3, #24
 8011606:	d830      	bhi.n	801166a <__gethex+0x126>
 8011608:	f1a0 0210 	sub.w	r2, r0, #16
 801160c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011610:	f7ff ff82 	bl	8011518 <__hexdig_fun>
 8011614:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8011618:	fa5f fc8c 	uxtb.w	ip, ip
 801161c:	f1bc 0f18 	cmp.w	ip, #24
 8011620:	f04f 030a 	mov.w	r3, #10
 8011624:	d91e      	bls.n	8011664 <__gethex+0x120>
 8011626:	b104      	cbz	r4, 801162a <__gethex+0xe6>
 8011628:	4252      	negs	r2, r2
 801162a:	4417      	add	r7, r2
 801162c:	f8ca 1000 	str.w	r1, [sl]
 8011630:	b1ed      	cbz	r5, 801166e <__gethex+0x12a>
 8011632:	f1bb 0f00 	cmp.w	fp, #0
 8011636:	bf0c      	ite	eq
 8011638:	2506      	moveq	r5, #6
 801163a:	2500      	movne	r5, #0
 801163c:	4628      	mov	r0, r5
 801163e:	b005      	add	sp, #20
 8011640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011644:	2500      	movs	r5, #0
 8011646:	462c      	mov	r4, r5
 8011648:	e7b0      	b.n	80115ac <__gethex+0x68>
 801164a:	2c00      	cmp	r4, #0
 801164c:	d1c7      	bne.n	80115de <__gethex+0x9a>
 801164e:	4627      	mov	r7, r4
 8011650:	e7c7      	b.n	80115e2 <__gethex+0x9e>
 8011652:	464e      	mov	r6, r9
 8011654:	462f      	mov	r7, r5
 8011656:	2501      	movs	r5, #1
 8011658:	e7c3      	b.n	80115e2 <__gethex+0x9e>
 801165a:	2400      	movs	r4, #0
 801165c:	1cb1      	adds	r1, r6, #2
 801165e:	e7cc      	b.n	80115fa <__gethex+0xb6>
 8011660:	2401      	movs	r4, #1
 8011662:	e7fb      	b.n	801165c <__gethex+0x118>
 8011664:	fb03 0002 	mla	r0, r3, r2, r0
 8011668:	e7ce      	b.n	8011608 <__gethex+0xc4>
 801166a:	4631      	mov	r1, r6
 801166c:	e7de      	b.n	801162c <__gethex+0xe8>
 801166e:	eba6 0309 	sub.w	r3, r6, r9
 8011672:	3b01      	subs	r3, #1
 8011674:	4629      	mov	r1, r5
 8011676:	2b07      	cmp	r3, #7
 8011678:	dc0a      	bgt.n	8011690 <__gethex+0x14c>
 801167a:	9801      	ldr	r0, [sp, #4]
 801167c:	f7fd fc5e 	bl	800ef3c <_Balloc>
 8011680:	4604      	mov	r4, r0
 8011682:	b940      	cbnz	r0, 8011696 <__gethex+0x152>
 8011684:	4b5c      	ldr	r3, [pc, #368]	@ (80117f8 <__gethex+0x2b4>)
 8011686:	4602      	mov	r2, r0
 8011688:	21e4      	movs	r1, #228	@ 0xe4
 801168a:	485c      	ldr	r0, [pc, #368]	@ (80117fc <__gethex+0x2b8>)
 801168c:	f7ff fec0 	bl	8011410 <__assert_func>
 8011690:	3101      	adds	r1, #1
 8011692:	105b      	asrs	r3, r3, #1
 8011694:	e7ef      	b.n	8011676 <__gethex+0x132>
 8011696:	f100 0a14 	add.w	sl, r0, #20
 801169a:	2300      	movs	r3, #0
 801169c:	4655      	mov	r5, sl
 801169e:	469b      	mov	fp, r3
 80116a0:	45b1      	cmp	r9, r6
 80116a2:	d337      	bcc.n	8011714 <__gethex+0x1d0>
 80116a4:	f845 bb04 	str.w	fp, [r5], #4
 80116a8:	eba5 050a 	sub.w	r5, r5, sl
 80116ac:	10ad      	asrs	r5, r5, #2
 80116ae:	6125      	str	r5, [r4, #16]
 80116b0:	4658      	mov	r0, fp
 80116b2:	f7fd fd35 	bl	800f120 <__hi0bits>
 80116b6:	016d      	lsls	r5, r5, #5
 80116b8:	f8d8 6000 	ldr.w	r6, [r8]
 80116bc:	1a2d      	subs	r5, r5, r0
 80116be:	42b5      	cmp	r5, r6
 80116c0:	dd54      	ble.n	801176c <__gethex+0x228>
 80116c2:	1bad      	subs	r5, r5, r6
 80116c4:	4629      	mov	r1, r5
 80116c6:	4620      	mov	r0, r4
 80116c8:	f7fe f8c9 	bl	800f85e <__any_on>
 80116cc:	4681      	mov	r9, r0
 80116ce:	b178      	cbz	r0, 80116f0 <__gethex+0x1ac>
 80116d0:	1e6b      	subs	r3, r5, #1
 80116d2:	1159      	asrs	r1, r3, #5
 80116d4:	f003 021f 	and.w	r2, r3, #31
 80116d8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80116dc:	f04f 0901 	mov.w	r9, #1
 80116e0:	fa09 f202 	lsl.w	r2, r9, r2
 80116e4:	420a      	tst	r2, r1
 80116e6:	d003      	beq.n	80116f0 <__gethex+0x1ac>
 80116e8:	454b      	cmp	r3, r9
 80116ea:	dc36      	bgt.n	801175a <__gethex+0x216>
 80116ec:	f04f 0902 	mov.w	r9, #2
 80116f0:	4629      	mov	r1, r5
 80116f2:	4620      	mov	r0, r4
 80116f4:	f7ff febe 	bl	8011474 <rshift>
 80116f8:	442f      	add	r7, r5
 80116fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80116fe:	42bb      	cmp	r3, r7
 8011700:	da42      	bge.n	8011788 <__gethex+0x244>
 8011702:	9801      	ldr	r0, [sp, #4]
 8011704:	4621      	mov	r1, r4
 8011706:	f7fd fc59 	bl	800efbc <_Bfree>
 801170a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801170c:	2300      	movs	r3, #0
 801170e:	6013      	str	r3, [r2, #0]
 8011710:	25a3      	movs	r5, #163	@ 0xa3
 8011712:	e793      	b.n	801163c <__gethex+0xf8>
 8011714:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011718:	2a2e      	cmp	r2, #46	@ 0x2e
 801171a:	d012      	beq.n	8011742 <__gethex+0x1fe>
 801171c:	2b20      	cmp	r3, #32
 801171e:	d104      	bne.n	801172a <__gethex+0x1e6>
 8011720:	f845 bb04 	str.w	fp, [r5], #4
 8011724:	f04f 0b00 	mov.w	fp, #0
 8011728:	465b      	mov	r3, fp
 801172a:	7830      	ldrb	r0, [r6, #0]
 801172c:	9303      	str	r3, [sp, #12]
 801172e:	f7ff fef3 	bl	8011518 <__hexdig_fun>
 8011732:	9b03      	ldr	r3, [sp, #12]
 8011734:	f000 000f 	and.w	r0, r0, #15
 8011738:	4098      	lsls	r0, r3
 801173a:	ea4b 0b00 	orr.w	fp, fp, r0
 801173e:	3304      	adds	r3, #4
 8011740:	e7ae      	b.n	80116a0 <__gethex+0x15c>
 8011742:	45b1      	cmp	r9, r6
 8011744:	d8ea      	bhi.n	801171c <__gethex+0x1d8>
 8011746:	492b      	ldr	r1, [pc, #172]	@ (80117f4 <__gethex+0x2b0>)
 8011748:	9303      	str	r3, [sp, #12]
 801174a:	2201      	movs	r2, #1
 801174c:	4630      	mov	r0, r6
 801174e:	f7ff fddc 	bl	801130a <strncmp>
 8011752:	9b03      	ldr	r3, [sp, #12]
 8011754:	2800      	cmp	r0, #0
 8011756:	d1e1      	bne.n	801171c <__gethex+0x1d8>
 8011758:	e7a2      	b.n	80116a0 <__gethex+0x15c>
 801175a:	1ea9      	subs	r1, r5, #2
 801175c:	4620      	mov	r0, r4
 801175e:	f7fe f87e 	bl	800f85e <__any_on>
 8011762:	2800      	cmp	r0, #0
 8011764:	d0c2      	beq.n	80116ec <__gethex+0x1a8>
 8011766:	f04f 0903 	mov.w	r9, #3
 801176a:	e7c1      	b.n	80116f0 <__gethex+0x1ac>
 801176c:	da09      	bge.n	8011782 <__gethex+0x23e>
 801176e:	1b75      	subs	r5, r6, r5
 8011770:	4621      	mov	r1, r4
 8011772:	9801      	ldr	r0, [sp, #4]
 8011774:	462a      	mov	r2, r5
 8011776:	f7fd fe39 	bl	800f3ec <__lshift>
 801177a:	1b7f      	subs	r7, r7, r5
 801177c:	4604      	mov	r4, r0
 801177e:	f100 0a14 	add.w	sl, r0, #20
 8011782:	f04f 0900 	mov.w	r9, #0
 8011786:	e7b8      	b.n	80116fa <__gethex+0x1b6>
 8011788:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801178c:	42bd      	cmp	r5, r7
 801178e:	dd6f      	ble.n	8011870 <__gethex+0x32c>
 8011790:	1bed      	subs	r5, r5, r7
 8011792:	42ae      	cmp	r6, r5
 8011794:	dc34      	bgt.n	8011800 <__gethex+0x2bc>
 8011796:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801179a:	2b02      	cmp	r3, #2
 801179c:	d022      	beq.n	80117e4 <__gethex+0x2a0>
 801179e:	2b03      	cmp	r3, #3
 80117a0:	d024      	beq.n	80117ec <__gethex+0x2a8>
 80117a2:	2b01      	cmp	r3, #1
 80117a4:	d115      	bne.n	80117d2 <__gethex+0x28e>
 80117a6:	42ae      	cmp	r6, r5
 80117a8:	d113      	bne.n	80117d2 <__gethex+0x28e>
 80117aa:	2e01      	cmp	r6, #1
 80117ac:	d10b      	bne.n	80117c6 <__gethex+0x282>
 80117ae:	9a02      	ldr	r2, [sp, #8]
 80117b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80117b4:	6013      	str	r3, [r2, #0]
 80117b6:	2301      	movs	r3, #1
 80117b8:	6123      	str	r3, [r4, #16]
 80117ba:	f8ca 3000 	str.w	r3, [sl]
 80117be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80117c0:	2562      	movs	r5, #98	@ 0x62
 80117c2:	601c      	str	r4, [r3, #0]
 80117c4:	e73a      	b.n	801163c <__gethex+0xf8>
 80117c6:	1e71      	subs	r1, r6, #1
 80117c8:	4620      	mov	r0, r4
 80117ca:	f7fe f848 	bl	800f85e <__any_on>
 80117ce:	2800      	cmp	r0, #0
 80117d0:	d1ed      	bne.n	80117ae <__gethex+0x26a>
 80117d2:	9801      	ldr	r0, [sp, #4]
 80117d4:	4621      	mov	r1, r4
 80117d6:	f7fd fbf1 	bl	800efbc <_Bfree>
 80117da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80117dc:	2300      	movs	r3, #0
 80117de:	6013      	str	r3, [r2, #0]
 80117e0:	2550      	movs	r5, #80	@ 0x50
 80117e2:	e72b      	b.n	801163c <__gethex+0xf8>
 80117e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d1f3      	bne.n	80117d2 <__gethex+0x28e>
 80117ea:	e7e0      	b.n	80117ae <__gethex+0x26a>
 80117ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d1dd      	bne.n	80117ae <__gethex+0x26a>
 80117f2:	e7ee      	b.n	80117d2 <__gethex+0x28e>
 80117f4:	08012bc8 	.word	0x08012bc8
 80117f8:	08012a5c 	.word	0x08012a5c
 80117fc:	08012c90 	.word	0x08012c90
 8011800:	1e6f      	subs	r7, r5, #1
 8011802:	f1b9 0f00 	cmp.w	r9, #0
 8011806:	d130      	bne.n	801186a <__gethex+0x326>
 8011808:	b127      	cbz	r7, 8011814 <__gethex+0x2d0>
 801180a:	4639      	mov	r1, r7
 801180c:	4620      	mov	r0, r4
 801180e:	f7fe f826 	bl	800f85e <__any_on>
 8011812:	4681      	mov	r9, r0
 8011814:	117a      	asrs	r2, r7, #5
 8011816:	2301      	movs	r3, #1
 8011818:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801181c:	f007 071f 	and.w	r7, r7, #31
 8011820:	40bb      	lsls	r3, r7
 8011822:	4213      	tst	r3, r2
 8011824:	4629      	mov	r1, r5
 8011826:	4620      	mov	r0, r4
 8011828:	bf18      	it	ne
 801182a:	f049 0902 	orrne.w	r9, r9, #2
 801182e:	f7ff fe21 	bl	8011474 <rshift>
 8011832:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011836:	1b76      	subs	r6, r6, r5
 8011838:	2502      	movs	r5, #2
 801183a:	f1b9 0f00 	cmp.w	r9, #0
 801183e:	d047      	beq.n	80118d0 <__gethex+0x38c>
 8011840:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011844:	2b02      	cmp	r3, #2
 8011846:	d015      	beq.n	8011874 <__gethex+0x330>
 8011848:	2b03      	cmp	r3, #3
 801184a:	d017      	beq.n	801187c <__gethex+0x338>
 801184c:	2b01      	cmp	r3, #1
 801184e:	d109      	bne.n	8011864 <__gethex+0x320>
 8011850:	f019 0f02 	tst.w	r9, #2
 8011854:	d006      	beq.n	8011864 <__gethex+0x320>
 8011856:	f8da 3000 	ldr.w	r3, [sl]
 801185a:	ea49 0903 	orr.w	r9, r9, r3
 801185e:	f019 0f01 	tst.w	r9, #1
 8011862:	d10e      	bne.n	8011882 <__gethex+0x33e>
 8011864:	f045 0510 	orr.w	r5, r5, #16
 8011868:	e032      	b.n	80118d0 <__gethex+0x38c>
 801186a:	f04f 0901 	mov.w	r9, #1
 801186e:	e7d1      	b.n	8011814 <__gethex+0x2d0>
 8011870:	2501      	movs	r5, #1
 8011872:	e7e2      	b.n	801183a <__gethex+0x2f6>
 8011874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011876:	f1c3 0301 	rsb	r3, r3, #1
 801187a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801187c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801187e:	2b00      	cmp	r3, #0
 8011880:	d0f0      	beq.n	8011864 <__gethex+0x320>
 8011882:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011886:	f104 0314 	add.w	r3, r4, #20
 801188a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801188e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011892:	f04f 0c00 	mov.w	ip, #0
 8011896:	4618      	mov	r0, r3
 8011898:	f853 2b04 	ldr.w	r2, [r3], #4
 801189c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80118a0:	d01b      	beq.n	80118da <__gethex+0x396>
 80118a2:	3201      	adds	r2, #1
 80118a4:	6002      	str	r2, [r0, #0]
 80118a6:	2d02      	cmp	r5, #2
 80118a8:	f104 0314 	add.w	r3, r4, #20
 80118ac:	d13c      	bne.n	8011928 <__gethex+0x3e4>
 80118ae:	f8d8 2000 	ldr.w	r2, [r8]
 80118b2:	3a01      	subs	r2, #1
 80118b4:	42b2      	cmp	r2, r6
 80118b6:	d109      	bne.n	80118cc <__gethex+0x388>
 80118b8:	1171      	asrs	r1, r6, #5
 80118ba:	2201      	movs	r2, #1
 80118bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80118c0:	f006 061f 	and.w	r6, r6, #31
 80118c4:	fa02 f606 	lsl.w	r6, r2, r6
 80118c8:	421e      	tst	r6, r3
 80118ca:	d13a      	bne.n	8011942 <__gethex+0x3fe>
 80118cc:	f045 0520 	orr.w	r5, r5, #32
 80118d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80118d2:	601c      	str	r4, [r3, #0]
 80118d4:	9b02      	ldr	r3, [sp, #8]
 80118d6:	601f      	str	r7, [r3, #0]
 80118d8:	e6b0      	b.n	801163c <__gethex+0xf8>
 80118da:	4299      	cmp	r1, r3
 80118dc:	f843 cc04 	str.w	ip, [r3, #-4]
 80118e0:	d8d9      	bhi.n	8011896 <__gethex+0x352>
 80118e2:	68a3      	ldr	r3, [r4, #8]
 80118e4:	459b      	cmp	fp, r3
 80118e6:	db17      	blt.n	8011918 <__gethex+0x3d4>
 80118e8:	6861      	ldr	r1, [r4, #4]
 80118ea:	9801      	ldr	r0, [sp, #4]
 80118ec:	3101      	adds	r1, #1
 80118ee:	f7fd fb25 	bl	800ef3c <_Balloc>
 80118f2:	4681      	mov	r9, r0
 80118f4:	b918      	cbnz	r0, 80118fe <__gethex+0x3ba>
 80118f6:	4b1a      	ldr	r3, [pc, #104]	@ (8011960 <__gethex+0x41c>)
 80118f8:	4602      	mov	r2, r0
 80118fa:	2184      	movs	r1, #132	@ 0x84
 80118fc:	e6c5      	b.n	801168a <__gethex+0x146>
 80118fe:	6922      	ldr	r2, [r4, #16]
 8011900:	3202      	adds	r2, #2
 8011902:	f104 010c 	add.w	r1, r4, #12
 8011906:	0092      	lsls	r2, r2, #2
 8011908:	300c      	adds	r0, #12
 801190a:	f7fc fc63 	bl	800e1d4 <memcpy>
 801190e:	4621      	mov	r1, r4
 8011910:	9801      	ldr	r0, [sp, #4]
 8011912:	f7fd fb53 	bl	800efbc <_Bfree>
 8011916:	464c      	mov	r4, r9
 8011918:	6923      	ldr	r3, [r4, #16]
 801191a:	1c5a      	adds	r2, r3, #1
 801191c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011920:	6122      	str	r2, [r4, #16]
 8011922:	2201      	movs	r2, #1
 8011924:	615a      	str	r2, [r3, #20]
 8011926:	e7be      	b.n	80118a6 <__gethex+0x362>
 8011928:	6922      	ldr	r2, [r4, #16]
 801192a:	455a      	cmp	r2, fp
 801192c:	dd0b      	ble.n	8011946 <__gethex+0x402>
 801192e:	2101      	movs	r1, #1
 8011930:	4620      	mov	r0, r4
 8011932:	f7ff fd9f 	bl	8011474 <rshift>
 8011936:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801193a:	3701      	adds	r7, #1
 801193c:	42bb      	cmp	r3, r7
 801193e:	f6ff aee0 	blt.w	8011702 <__gethex+0x1be>
 8011942:	2501      	movs	r5, #1
 8011944:	e7c2      	b.n	80118cc <__gethex+0x388>
 8011946:	f016 061f 	ands.w	r6, r6, #31
 801194a:	d0fa      	beq.n	8011942 <__gethex+0x3fe>
 801194c:	4453      	add	r3, sl
 801194e:	f1c6 0620 	rsb	r6, r6, #32
 8011952:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011956:	f7fd fbe3 	bl	800f120 <__hi0bits>
 801195a:	42b0      	cmp	r0, r6
 801195c:	dbe7      	blt.n	801192e <__gethex+0x3ea>
 801195e:	e7f0      	b.n	8011942 <__gethex+0x3fe>
 8011960:	08012a5c 	.word	0x08012a5c

08011964 <L_shift>:
 8011964:	f1c2 0208 	rsb	r2, r2, #8
 8011968:	0092      	lsls	r2, r2, #2
 801196a:	b570      	push	{r4, r5, r6, lr}
 801196c:	f1c2 0620 	rsb	r6, r2, #32
 8011970:	6843      	ldr	r3, [r0, #4]
 8011972:	6804      	ldr	r4, [r0, #0]
 8011974:	fa03 f506 	lsl.w	r5, r3, r6
 8011978:	432c      	orrs	r4, r5
 801197a:	40d3      	lsrs	r3, r2
 801197c:	6004      	str	r4, [r0, #0]
 801197e:	f840 3f04 	str.w	r3, [r0, #4]!
 8011982:	4288      	cmp	r0, r1
 8011984:	d3f4      	bcc.n	8011970 <L_shift+0xc>
 8011986:	bd70      	pop	{r4, r5, r6, pc}

08011988 <__match>:
 8011988:	b530      	push	{r4, r5, lr}
 801198a:	6803      	ldr	r3, [r0, #0]
 801198c:	3301      	adds	r3, #1
 801198e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011992:	b914      	cbnz	r4, 801199a <__match+0x12>
 8011994:	6003      	str	r3, [r0, #0]
 8011996:	2001      	movs	r0, #1
 8011998:	bd30      	pop	{r4, r5, pc}
 801199a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801199e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80119a2:	2d19      	cmp	r5, #25
 80119a4:	bf98      	it	ls
 80119a6:	3220      	addls	r2, #32
 80119a8:	42a2      	cmp	r2, r4
 80119aa:	d0f0      	beq.n	801198e <__match+0x6>
 80119ac:	2000      	movs	r0, #0
 80119ae:	e7f3      	b.n	8011998 <__match+0x10>

080119b0 <__hexnan>:
 80119b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119b4:	680b      	ldr	r3, [r1, #0]
 80119b6:	6801      	ldr	r1, [r0, #0]
 80119b8:	115e      	asrs	r6, r3, #5
 80119ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80119be:	f013 031f 	ands.w	r3, r3, #31
 80119c2:	b087      	sub	sp, #28
 80119c4:	bf18      	it	ne
 80119c6:	3604      	addne	r6, #4
 80119c8:	2500      	movs	r5, #0
 80119ca:	1f37      	subs	r7, r6, #4
 80119cc:	4682      	mov	sl, r0
 80119ce:	4690      	mov	r8, r2
 80119d0:	9301      	str	r3, [sp, #4]
 80119d2:	f846 5c04 	str.w	r5, [r6, #-4]
 80119d6:	46b9      	mov	r9, r7
 80119d8:	463c      	mov	r4, r7
 80119da:	9502      	str	r5, [sp, #8]
 80119dc:	46ab      	mov	fp, r5
 80119de:	784a      	ldrb	r2, [r1, #1]
 80119e0:	1c4b      	adds	r3, r1, #1
 80119e2:	9303      	str	r3, [sp, #12]
 80119e4:	b342      	cbz	r2, 8011a38 <__hexnan+0x88>
 80119e6:	4610      	mov	r0, r2
 80119e8:	9105      	str	r1, [sp, #20]
 80119ea:	9204      	str	r2, [sp, #16]
 80119ec:	f7ff fd94 	bl	8011518 <__hexdig_fun>
 80119f0:	2800      	cmp	r0, #0
 80119f2:	d151      	bne.n	8011a98 <__hexnan+0xe8>
 80119f4:	9a04      	ldr	r2, [sp, #16]
 80119f6:	9905      	ldr	r1, [sp, #20]
 80119f8:	2a20      	cmp	r2, #32
 80119fa:	d818      	bhi.n	8011a2e <__hexnan+0x7e>
 80119fc:	9b02      	ldr	r3, [sp, #8]
 80119fe:	459b      	cmp	fp, r3
 8011a00:	dd13      	ble.n	8011a2a <__hexnan+0x7a>
 8011a02:	454c      	cmp	r4, r9
 8011a04:	d206      	bcs.n	8011a14 <__hexnan+0x64>
 8011a06:	2d07      	cmp	r5, #7
 8011a08:	dc04      	bgt.n	8011a14 <__hexnan+0x64>
 8011a0a:	462a      	mov	r2, r5
 8011a0c:	4649      	mov	r1, r9
 8011a0e:	4620      	mov	r0, r4
 8011a10:	f7ff ffa8 	bl	8011964 <L_shift>
 8011a14:	4544      	cmp	r4, r8
 8011a16:	d952      	bls.n	8011abe <__hexnan+0x10e>
 8011a18:	2300      	movs	r3, #0
 8011a1a:	f1a4 0904 	sub.w	r9, r4, #4
 8011a1e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011a22:	f8cd b008 	str.w	fp, [sp, #8]
 8011a26:	464c      	mov	r4, r9
 8011a28:	461d      	mov	r5, r3
 8011a2a:	9903      	ldr	r1, [sp, #12]
 8011a2c:	e7d7      	b.n	80119de <__hexnan+0x2e>
 8011a2e:	2a29      	cmp	r2, #41	@ 0x29
 8011a30:	d157      	bne.n	8011ae2 <__hexnan+0x132>
 8011a32:	3102      	adds	r1, #2
 8011a34:	f8ca 1000 	str.w	r1, [sl]
 8011a38:	f1bb 0f00 	cmp.w	fp, #0
 8011a3c:	d051      	beq.n	8011ae2 <__hexnan+0x132>
 8011a3e:	454c      	cmp	r4, r9
 8011a40:	d206      	bcs.n	8011a50 <__hexnan+0xa0>
 8011a42:	2d07      	cmp	r5, #7
 8011a44:	dc04      	bgt.n	8011a50 <__hexnan+0xa0>
 8011a46:	462a      	mov	r2, r5
 8011a48:	4649      	mov	r1, r9
 8011a4a:	4620      	mov	r0, r4
 8011a4c:	f7ff ff8a 	bl	8011964 <L_shift>
 8011a50:	4544      	cmp	r4, r8
 8011a52:	d936      	bls.n	8011ac2 <__hexnan+0x112>
 8011a54:	f1a8 0204 	sub.w	r2, r8, #4
 8011a58:	4623      	mov	r3, r4
 8011a5a:	f853 1b04 	ldr.w	r1, [r3], #4
 8011a5e:	f842 1f04 	str.w	r1, [r2, #4]!
 8011a62:	429f      	cmp	r7, r3
 8011a64:	d2f9      	bcs.n	8011a5a <__hexnan+0xaa>
 8011a66:	1b3b      	subs	r3, r7, r4
 8011a68:	f023 0303 	bic.w	r3, r3, #3
 8011a6c:	3304      	adds	r3, #4
 8011a6e:	3401      	adds	r4, #1
 8011a70:	3e03      	subs	r6, #3
 8011a72:	42b4      	cmp	r4, r6
 8011a74:	bf88      	it	hi
 8011a76:	2304      	movhi	r3, #4
 8011a78:	4443      	add	r3, r8
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	f843 2b04 	str.w	r2, [r3], #4
 8011a80:	429f      	cmp	r7, r3
 8011a82:	d2fb      	bcs.n	8011a7c <__hexnan+0xcc>
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	b91b      	cbnz	r3, 8011a90 <__hexnan+0xe0>
 8011a88:	4547      	cmp	r7, r8
 8011a8a:	d128      	bne.n	8011ade <__hexnan+0x12e>
 8011a8c:	2301      	movs	r3, #1
 8011a8e:	603b      	str	r3, [r7, #0]
 8011a90:	2005      	movs	r0, #5
 8011a92:	b007      	add	sp, #28
 8011a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a98:	3501      	adds	r5, #1
 8011a9a:	2d08      	cmp	r5, #8
 8011a9c:	f10b 0b01 	add.w	fp, fp, #1
 8011aa0:	dd06      	ble.n	8011ab0 <__hexnan+0x100>
 8011aa2:	4544      	cmp	r4, r8
 8011aa4:	d9c1      	bls.n	8011a2a <__hexnan+0x7a>
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	f844 3c04 	str.w	r3, [r4, #-4]
 8011aac:	2501      	movs	r5, #1
 8011aae:	3c04      	subs	r4, #4
 8011ab0:	6822      	ldr	r2, [r4, #0]
 8011ab2:	f000 000f 	and.w	r0, r0, #15
 8011ab6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011aba:	6020      	str	r0, [r4, #0]
 8011abc:	e7b5      	b.n	8011a2a <__hexnan+0x7a>
 8011abe:	2508      	movs	r5, #8
 8011ac0:	e7b3      	b.n	8011a2a <__hexnan+0x7a>
 8011ac2:	9b01      	ldr	r3, [sp, #4]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d0dd      	beq.n	8011a84 <__hexnan+0xd4>
 8011ac8:	f1c3 0320 	rsb	r3, r3, #32
 8011acc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011ad0:	40da      	lsrs	r2, r3
 8011ad2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011ad6:	4013      	ands	r3, r2
 8011ad8:	f846 3c04 	str.w	r3, [r6, #-4]
 8011adc:	e7d2      	b.n	8011a84 <__hexnan+0xd4>
 8011ade:	3f04      	subs	r7, #4
 8011ae0:	e7d0      	b.n	8011a84 <__hexnan+0xd4>
 8011ae2:	2004      	movs	r0, #4
 8011ae4:	e7d5      	b.n	8011a92 <__hexnan+0xe2>

08011ae6 <__ascii_mbtowc>:
 8011ae6:	b082      	sub	sp, #8
 8011ae8:	b901      	cbnz	r1, 8011aec <__ascii_mbtowc+0x6>
 8011aea:	a901      	add	r1, sp, #4
 8011aec:	b142      	cbz	r2, 8011b00 <__ascii_mbtowc+0x1a>
 8011aee:	b14b      	cbz	r3, 8011b04 <__ascii_mbtowc+0x1e>
 8011af0:	7813      	ldrb	r3, [r2, #0]
 8011af2:	600b      	str	r3, [r1, #0]
 8011af4:	7812      	ldrb	r2, [r2, #0]
 8011af6:	1e10      	subs	r0, r2, #0
 8011af8:	bf18      	it	ne
 8011afa:	2001      	movne	r0, #1
 8011afc:	b002      	add	sp, #8
 8011afe:	4770      	bx	lr
 8011b00:	4610      	mov	r0, r2
 8011b02:	e7fb      	b.n	8011afc <__ascii_mbtowc+0x16>
 8011b04:	f06f 0001 	mvn.w	r0, #1
 8011b08:	e7f8      	b.n	8011afc <__ascii_mbtowc+0x16>

08011b0a <_malloc_usable_size_r>:
 8011b0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b0e:	1f18      	subs	r0, r3, #4
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	bfbc      	itt	lt
 8011b14:	580b      	ldrlt	r3, [r1, r0]
 8011b16:	18c0      	addlt	r0, r0, r3
 8011b18:	4770      	bx	lr
	...

08011b1c <_strtoul_l.constprop.0>:
 8011b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b20:	4e34      	ldr	r6, [pc, #208]	@ (8011bf4 <_strtoul_l.constprop.0+0xd8>)
 8011b22:	4686      	mov	lr, r0
 8011b24:	460d      	mov	r5, r1
 8011b26:	4628      	mov	r0, r5
 8011b28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011b2c:	5d37      	ldrb	r7, [r6, r4]
 8011b2e:	f017 0708 	ands.w	r7, r7, #8
 8011b32:	d1f8      	bne.n	8011b26 <_strtoul_l.constprop.0+0xa>
 8011b34:	2c2d      	cmp	r4, #45	@ 0x2d
 8011b36:	d12f      	bne.n	8011b98 <_strtoul_l.constprop.0+0x7c>
 8011b38:	782c      	ldrb	r4, [r5, #0]
 8011b3a:	2701      	movs	r7, #1
 8011b3c:	1c85      	adds	r5, r0, #2
 8011b3e:	f033 0010 	bics.w	r0, r3, #16
 8011b42:	d109      	bne.n	8011b58 <_strtoul_l.constprop.0+0x3c>
 8011b44:	2c30      	cmp	r4, #48	@ 0x30
 8011b46:	d12c      	bne.n	8011ba2 <_strtoul_l.constprop.0+0x86>
 8011b48:	7828      	ldrb	r0, [r5, #0]
 8011b4a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8011b4e:	2858      	cmp	r0, #88	@ 0x58
 8011b50:	d127      	bne.n	8011ba2 <_strtoul_l.constprop.0+0x86>
 8011b52:	786c      	ldrb	r4, [r5, #1]
 8011b54:	2310      	movs	r3, #16
 8011b56:	3502      	adds	r5, #2
 8011b58:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8011b5c:	2600      	movs	r6, #0
 8011b5e:	fbb8 f8f3 	udiv	r8, r8, r3
 8011b62:	fb03 f908 	mul.w	r9, r3, r8
 8011b66:	ea6f 0909 	mvn.w	r9, r9
 8011b6a:	4630      	mov	r0, r6
 8011b6c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8011b70:	f1bc 0f09 	cmp.w	ip, #9
 8011b74:	d81c      	bhi.n	8011bb0 <_strtoul_l.constprop.0+0x94>
 8011b76:	4664      	mov	r4, ip
 8011b78:	42a3      	cmp	r3, r4
 8011b7a:	dd2a      	ble.n	8011bd2 <_strtoul_l.constprop.0+0xb6>
 8011b7c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8011b80:	d007      	beq.n	8011b92 <_strtoul_l.constprop.0+0x76>
 8011b82:	4580      	cmp	r8, r0
 8011b84:	d322      	bcc.n	8011bcc <_strtoul_l.constprop.0+0xb0>
 8011b86:	d101      	bne.n	8011b8c <_strtoul_l.constprop.0+0x70>
 8011b88:	45a1      	cmp	r9, r4
 8011b8a:	db1f      	blt.n	8011bcc <_strtoul_l.constprop.0+0xb0>
 8011b8c:	fb00 4003 	mla	r0, r0, r3, r4
 8011b90:	2601      	movs	r6, #1
 8011b92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011b96:	e7e9      	b.n	8011b6c <_strtoul_l.constprop.0+0x50>
 8011b98:	2c2b      	cmp	r4, #43	@ 0x2b
 8011b9a:	bf04      	itt	eq
 8011b9c:	782c      	ldrbeq	r4, [r5, #0]
 8011b9e:	1c85      	addeq	r5, r0, #2
 8011ba0:	e7cd      	b.n	8011b3e <_strtoul_l.constprop.0+0x22>
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d1d8      	bne.n	8011b58 <_strtoul_l.constprop.0+0x3c>
 8011ba6:	2c30      	cmp	r4, #48	@ 0x30
 8011ba8:	bf0c      	ite	eq
 8011baa:	2308      	moveq	r3, #8
 8011bac:	230a      	movne	r3, #10
 8011bae:	e7d3      	b.n	8011b58 <_strtoul_l.constprop.0+0x3c>
 8011bb0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8011bb4:	f1bc 0f19 	cmp.w	ip, #25
 8011bb8:	d801      	bhi.n	8011bbe <_strtoul_l.constprop.0+0xa2>
 8011bba:	3c37      	subs	r4, #55	@ 0x37
 8011bbc:	e7dc      	b.n	8011b78 <_strtoul_l.constprop.0+0x5c>
 8011bbe:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8011bc2:	f1bc 0f19 	cmp.w	ip, #25
 8011bc6:	d804      	bhi.n	8011bd2 <_strtoul_l.constprop.0+0xb6>
 8011bc8:	3c57      	subs	r4, #87	@ 0x57
 8011bca:	e7d5      	b.n	8011b78 <_strtoul_l.constprop.0+0x5c>
 8011bcc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8011bd0:	e7df      	b.n	8011b92 <_strtoul_l.constprop.0+0x76>
 8011bd2:	1c73      	adds	r3, r6, #1
 8011bd4:	d106      	bne.n	8011be4 <_strtoul_l.constprop.0+0xc8>
 8011bd6:	2322      	movs	r3, #34	@ 0x22
 8011bd8:	f8ce 3000 	str.w	r3, [lr]
 8011bdc:	4630      	mov	r0, r6
 8011bde:	b932      	cbnz	r2, 8011bee <_strtoul_l.constprop.0+0xd2>
 8011be0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011be4:	b107      	cbz	r7, 8011be8 <_strtoul_l.constprop.0+0xcc>
 8011be6:	4240      	negs	r0, r0
 8011be8:	2a00      	cmp	r2, #0
 8011bea:	d0f9      	beq.n	8011be0 <_strtoul_l.constprop.0+0xc4>
 8011bec:	b106      	cbz	r6, 8011bf0 <_strtoul_l.constprop.0+0xd4>
 8011bee:	1e69      	subs	r1, r5, #1
 8011bf0:	6011      	str	r1, [r2, #0]
 8011bf2:	e7f5      	b.n	8011be0 <_strtoul_l.constprop.0+0xc4>
 8011bf4:	080128a9 	.word	0x080128a9

08011bf8 <_strtoul_r>:
 8011bf8:	f7ff bf90 	b.w	8011b1c <_strtoul_l.constprop.0>

08011bfc <__ascii_wctomb>:
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	4608      	mov	r0, r1
 8011c00:	b141      	cbz	r1, 8011c14 <__ascii_wctomb+0x18>
 8011c02:	2aff      	cmp	r2, #255	@ 0xff
 8011c04:	d904      	bls.n	8011c10 <__ascii_wctomb+0x14>
 8011c06:	228a      	movs	r2, #138	@ 0x8a
 8011c08:	601a      	str	r2, [r3, #0]
 8011c0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011c0e:	4770      	bx	lr
 8011c10:	700a      	strb	r2, [r1, #0]
 8011c12:	2001      	movs	r0, #1
 8011c14:	4770      	bx	lr
	...

08011c18 <_init>:
 8011c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c1a:	bf00      	nop
 8011c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c1e:	bc08      	pop	{r3}
 8011c20:	469e      	mov	lr, r3
 8011c22:	4770      	bx	lr

08011c24 <_fini>:
 8011c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c26:	bf00      	nop
 8011c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c2a:	bc08      	pop	{r3}
 8011c2c:	469e      	mov	lr, r3
 8011c2e:	4770      	bx	lr
